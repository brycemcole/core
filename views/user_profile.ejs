<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/user_profile.css" />
  <link rel="shortcut icon" href="/img/core.png" />
  <title>CORE - @<%= otheruser.username %></title>

  <meta name="description" content="<%= otheruser.firstname %> <%= otheruser.lastname %>'s profile on CORE. Connect with <%= otheruser.firstname %> and explore their activities, posts, and more.">
  <meta name="keywords" content="<%= otheruser.firstname %> <%= otheruser.lastname %>, CORE profile, connect with <%= otheruser.firstname %>, <%= otheruser.username %>'s activities, user posts, social links">
  <meta name="robots" content="index, follow">
  <meta property="og:title" content="<%= otheruser.username %> - CORE">
  <meta property="og:description" content="Connect with <%= otheruser.firstname %> <%= otheruser.lastname %> on CORE. Explore their activities, posts, and more.">
  <meta property="og:image" content="<%= otheruser.avatar ? otheruser.avatar : '/img/default-avatar.png' %>">
  <meta property="og:url" content="https://getcore.dev/user/<%= otheruser.username %>">
  <meta property="og:type" content="profile">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="<%= otheruser.username %> - CORE">
  <meta name="twitter:description" content="Connect with <%= otheruser.firstname %> <%= otheruser.lastname %> on CORE. Explore their activities, posts, and more.">
  <meta name="twitter:image" content="<%= otheruser.avatar ? otheruser.avatar : '/img/default-avatar.png' %>">
</head>

<% if (!otheruser.profile_border_color) { %>
<% otheruser.profile_border_color = '#000000'; %>
<% } %>
<style>
  .link-display,
  .github-commit-repos {
    background: <%=otheruser.profile_border_color%>0f !important;
    border: 1px solid <%=otheruser.profile_border_color%>52 !important;
    color: black;
  }

  .job-tag {
    background: <%=otheruser.profile_border_color%>70 !important;
    border: 1px solid <%=otheruser.profile_border_color%>70 !important;
    color: <%=otheruser.profile_border_color%> !important;
  }

  .job-tag:hover {
    color: white !important;
  }

  #repo-table {
    border-collapse: collapse;
    width: 100%;
  }

  #repo-table th,
  #repo-table td {
    padding: 8px;
    text-align: left;
  }

  .post:hover {
    background: <%=otheruser.profile_border_color%>92 !important;
  }

  #repo-table th {
    border: 0;
    margin-top: 5px;
  }

  #repo-table tr:last-child td {
    border-bottom: none;
  }

  #repo-table tr:nth-child(even) {
    background-color: <%=otheruser.profile_border_color%>24;
  }

  #repo-table tr:hover {
    background-color: <%=otheruser.profile_border_color%>52;
  }

  #repo-table thead tr:hover {
    background-color: transparent;
  }


  .navbar {
    border-color: <%=otheruser.profile_border_color%> !important;
  }

  @media (prefers-color-scheme: dark) {

    .link-display,
    .github-commit-repos,
    .post,
    .comment {
      background: <%=otheruser.profile_border_color%>30 !important;
      border: 1px solid <%=otheruser.profile_border_color%>52 !important;
      color: white;
    }
  }

  .admin-button {
    border: 1px solid #ae4444 !important;
    background-color: #cd3a3a1c !important;
    color: #ae4444 !important;
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'communities' }) %>
  <main>
    <div class="main-container">
      <% if (otheruser.isBanned) {%>
      <div class="error-messages">
        <p>This user has been banned.</p>
      </div>
      <% } %>
      <div id="profile" class="grid-container">

        <div class="profile-info">
          <div class="profile-content">
            <div class="profile-picture" data-hue-rotate="0">
              <img class="thumbnail thumbnail-large" src="<%= otheruser.avatar || '/img/default-avatar.png' %>" alt="Profile Picture" />

            </div>
            <div class="profile-details">
              <h2 class="bold"><%= otheruser.firstname %> <%= otheruser.lastname%>
              </h2>

              <p id="firstname-display" class="third-text margin-06-bottom sub-text" style="color: <%= otheruser.isAdmin ? '#b40000' : '' %>;">@<%= otheruser.username %> <% if (otheruser.verified) { %>
                <span class="material-symbols-outlined" style="color: green">
                  check
                </span>
                <% } %>
              </p>
              <div class="user-bio sub-text" style="background: 0 !important; padding-top: 0;">
                <p>
                  <%= otheruser.bio %>
                </p>
              </div>
              <div class="followers-info">
                <a class="secondary-text sub-text clickable" href="/user/<%= otheruser.username %>/followers" style="display: flex; flex-direction:row; align-items: center;gap: 3px;">
                  <span class="bold link primary-text" id="followerCount">
                    <%= otheruser.followerCount %>
                  </span>
                  Followers
                </a>
                <a class="secondary-text sub-text clickable" href="/user/<%= otheruser.username %>/following" style="display: flex; align-items: center;flex-direction:row; gap: 3px;">
                  <span class="bold link primary-text" id="followCount">
                    <%= otheruser.followingCount %>
                  </span>
                  Following
                </a>
              </div>

            </div>
          </div>
          <div class="edit-controls-and-follow-button">
            <% if (user) { %>
            <% if (otheruser.username === user.username) { %>
            <button class="regular-button-normal" id="edit-button" onclick="window.location.href='/edit-profile'" style="margin-bottom: auto;">
              <span class="material-symbols-outlined">
                edit
              </span>
              Edit
            </button>
            <% } else { %>
            <button class="<%= isFollowing ? 'cancel-button-normal' : 'submit-button-normal' %>" id="followButton" style="margin-bottom: auto;">
              <%- isFollowing ? '<span class="material-symbols-outlined">person_remove</span> Unfollow' : '<span class="material-symbols-outlined">person_add</span> Follow' %>
            </button>
            <% } %>
            <% } %>

            <button class="null-button-normal" id="edit-button" onclick="share('User Profile', '', 'https://getcore.dev/user/<%= otheruser.username %>')" style="margin-bottom: auto;">
              <span class="material-symbols-outlined">
                share
              </span>
            </button>
          </div>
          <% if (user) { %>
          <% if (user.isAdmin ) { %>
          <div class="flex flex-row gap-06 space-between">
            <form class="flex w-100" action="/admin/users/<%= otheruser.id %>/toggle-admin" method="POST">
              <button class="w-100 special-button-normal" type="submit" style="margin-bottom: auto;"><%- otheruser.isAdmin ? '<span class="material-symbols-outlined">admin_panel_settings</span> Revoke Admin' : '<span class="material-symbols-outlined">admin_panel_settings</span> Make Admin' %></button>
            </form>
            <form class="flex w-100" action="/admin/users/<%= otheruser.id %>/toggle-verified" method="POST">
              <button class="w-100 submit-button-normal" type="submit" style="margin-bottom: auto;"><%- otheruser.verified ? '<span class="material-symbols-outlined">check</span> Unverify' : '<span class="material-symbols-outlined">check</span> Verify' %></button>
            </form>
            <form class="flex w-100" action="/admin/users/<%= otheruser.id %>/toggle-ban" method="POST">
              <button class="w-100 cancel-button-normal" type="submit" style="margin-bottom: auto;"><%- otheruser.isBanned ? '<span class="material-symbols-outlined">block</span> Unban' : '<span class="material-symbols-outlined">block</span> Ban' %></button>
            </form>
          </div>
          <% } %>
          <% } %>

          <% if (otheruser.username != "core") { %>
          <% if (otheruser.topCommunities && otheruser.topCommunities.length > 0) { %>
          <h4>Communities</h4>

          <div class="communities-info flex flex-row gap-06 wrap">
            <% otheruser.topCommunities.split(',').forEach(function(community) { %>
            <button class="text-tag"><%= community.trim() %></button>
            <% }); %>
          </div>
          <% } %>
          <div class="links-container">
            <% if (otheruser.link || otheruser.link2 || otheruser.github_url || otheruser.linkedin_url || otheruser.leetcode_url) { %>
            <h4>Links</h4>
            <div class="flex flex-row gap-06 w-100">
              <% if (otheruser.leetcode_url) { %>
              <a href="https://leetcode.com/<%= otheruser.leetcode_url %>">
                <button class="null-button-normal"><img src="/src/leetcodeglyph.png" style="width: 16px;border-radius: 0;"></button>
              </a>
              <% } else { %><% } %>
              <% if (otheruser.linkedin_url) { %>
              <a href="https://linkedin.com/in/<%= otheruser.linkedin_url %>">
                <button class="null-button-normal"><img src="/src/linkedin.png" style="width: 16px;border-radius: 0;"></button>
              </a>
              <% } else { %><% } %>
              <% if (otheruser.github_url) { %>
              <a href="https://github.com//<%= otheruser.github_url %>">
                <button class="null-button-normal"><img src="/src/github.png" style="background: white;width: 16px;border-radius: 50%;"></button>
              </a>
              <% } else { %><% } %>
            </div>
            <div class="personal-links flex flex-row wrap gap-06">
              <div class="text-tag flex flex-row">
                <span class="clickable material-symbols-outlined">
                  open_in_new
                </span>
                <p id="link-url-display"> <a class="link bold sub-text" href="<%= otheruser.link %>"><%= otheruser.link.startsWith('https://') ? otheruser.link.slice(8) : otheruser.link %></a> </p>
              </div>
              <% } else { %><% } %>
              <% if (otheruser.link2) { %>
              <div class="text-tag flex flex-row">
                <span class="clickable material-symbols-outlined">
                  open_in_new
                </span>
                <p id="link2-url-display"> <a class="link bold sub-text" href="<%= otheruser.link2 %>"><%= otheruser.link2.startsWith('https://') ? otheruser.link2.slice(8) : otheruser.link2 %></a> </p>
              </div>
              <% } else { %><% } %>
            </div>
          </div>
          <div class="current-education" style="background:none !important; padding: 0;">
            <div class="current-job-header">
              <h4>Education</h4>
            </div>
            <div id="currentEducationContainer"></div>
          </div>
          <div class="current-job" style="background:none !important; padding: 0;">
            <div class="current-job-header">
              <h4>Experience</h4>
            </div>
            <div id="currentJobContainer"></div>
          </div>
          <div class="projecs" style="background:none !important; padding: 0;">
            <div class="projects-header">
              <h4>Projects</h4>
            </div>
            <div id="projectContainer">
              <p>No projects available.</p>
            </div>
          </div>
          <div class="github-commit-repos">
            <h4>GitHub Activity</h4>
            <!-- Commit Graph -->
            <div id="commit-graph-container"></div>
            <!-- Repository List -->
            <table id="repo-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Stars</th>
                  <th>Language</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
          <% } %>

          <div class="user-activity">
            <div class="user-activity-header">
              <div class="user-activity-title">
                <h4><%=otheruser.username%>'s activity</h4>
              </div>
              <div class="user-activity-buttons">
                <button class="sort-option posts-button active" onclick="showSection('posts')">Posts</button>
                <button class="sort-option comments-button" onclick="showSection('comments')">Comments</button>

              </div>
            </div>
            <%
                function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + 'm';
      } else if (hours < 24) {
        formattedDate = hours + 'h';
      } else if (days < 365) {
        formattedDate = days + 'd';
      } else {
        formattedDate = years + 'y';
      }
      return formattedDate;
    }

    %>
            <div id="posts" class="content">
              <% if (posts.length === 0) { %>
              <p>No posts yet.</p>
              <% } else { %>
              <div class="post-container">
                <% posts.forEach(function(post) { %>
                <div class="post" onclick="window.location.href='/posts/<%= post.id %>'">
                  <h5 class="post-title">
                    <%= post.title %>
                  </h5>
                  <p class="post-content" style="font-size: 14px;"><%= post.content %></p>
                  <div class="post-info">
                    <span class="link-display">
                      <p>
                        <%= formatDate(post.created_at) %>
                      </p>
                    </span>
                    <span class="link-display">
                      <p>
                        <%= post.views%> views
                      </p>
                    </span class="link-display">

                    <span class="link-display">
                      <p>
                        <%= post.comment_count %> comments
                      </p>
                    </span>
                    <span class="link-display">
                      <p>
                        <%= post.reaction_count %> reactions
                      </p>
                    </span>
                  </div>
                </div>
                <% }); %>
              </div>
              <% } %>
            </div>

            <div id="comments" class="content" style="display:none;">
              <% if (comments.length === 0) { %>
              <p>No comments yet.</p>
              <% } else { %>
              <div class="comments-container">
                <% comments.forEach(function(comment) { %>
                <div class="com" onclick="window.location.href='/posts/<%= comment.post_id %>'">
                  <div class="comment-header">
                    <img class="comment-author-avatar" src="<%= comment.author.avatar %>" alt="Avatar" />
                    <p class="comment-author">

                      <a href="/user/<%= comment.author.username %>"><%= comment.author.username %></a> <% if (comment.receiver) { %> to <a href="/user/<%= comment.receiver %>"><%= comment.receiver %></a> <% } %>
                    </p>
                  </div>
                  <div class="comment">
                    <h5 class="comment-title">
                      <%= comment.title %>
                    </h5>
                    <p class="comment-content"><%= comment.comment %></p>
                    <div class="comment-info">
                      <span>
                        <p>
                          <%= formatDate(comment.created_at) %>
                        </p>
                      </span>
                    </div>
                  </div>
                </div>
                <% }); %>
              </div>
              <% } %>
            </div>
          </div>
        </div>
        <%- include('partials/footer') %>


  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        form.addEventListener('submit', async function (event) {
          event.preventDefault();
          const formData = new FormData(this);
          const action = this.getAttribute('action');
          const method = this.getAttribute('method').toUpperCase();

          try {
            const response = await fetch(action, {
              method: method,
              body: formData,
            });
            const result = await response.json();
            if (response.ok) {
              showBannerNotification(JSON.stringify(result));
              // Optionally, you can update the UI here without a full page reload
            } else {
              showBannerNotification(JSON.stringify(result));
            }
          } catch (error) {
            showBannerNotification(`JSON.stringify(error)`);
          }
        });
      });
    });

    async function fetchRepositories() {
      const username = '<%= otheruser.github_url %>';
      const response = await fetch(`/api/github-repos/${username}`);
      const data = await response.json();

      if (response.ok) {
        displayRepositories(data.repositories);
      } else {
        console.error('Failed to fetch repositories:', data.error);
        displayNoRepositoriesMessage();
      }
    }

    function displayNoRepositoriesMessage() {
      const tableBody = document.querySelector('#repo-table tbody');
      const tableHead = document.querySelector('#repo-table thead');

      tableHead.style.display = 'none';

      const row = document.createElement('tr');
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '3');
      cell.textContent = 'No GitHub repositories found.';
      row.appendChild(cell);
      tableBody.appendChild(row);
    }

    function displayRepositories(repositories) {
      const tableBody = document.querySelector('#repo-table tbody');

      repositories.forEach(repo => {
        const row = document.createElement('tr');

        const nameCell = document.createElement('td');
        const nameLink = document.createElement('a');
        nameLink.href = repo.url;
        nameLink.textContent = repo.name;
        nameCell.appendChild(nameLink);
        row.appendChild(nameCell);

        const starsCell = document.createElement('td');
        starsCell.textContent = repo.stars;
        row.appendChild(starsCell);

        const languageCell = document.createElement('td');
        languageCell.textContent = repo.language || '';
        row.appendChild(languageCell);

        tableBody.appendChild(row);
      });

      if (repositories.length === 0) {
        const tableHead = document.querySelector('#repo-table thead');

        const row = document.createElement('tr');
        const cell = document.createElement('td');
        tableHead.style.display = 'none';
        cell.setAttribute('colspan', '4');
        cell.textContent = 'No public repositories found.';
        row.appendChild(cell);
        tableBody.appendChild(row);
      }
    }

    async function fetchCommitGraph() {
      const git_username = '<%= otheruser.github_url %>';
      const response = await fetch(`/api/github-commit-graph/${git_username}`);
      const data = await response.json();
      console.log(data);

      if (response.ok) {
        if (Object.keys(data.commitGraph).length === 0) {
          displayNoCommitGraphMessage();
        } else {
          displayCommitGraph(data.commitGraph, data.commitCount);
        }
      } else {
        console.error('Failed to fetch commit graph:', data.error);
        displayNoCommitGraphMessage();
      }
    }

    function displayNoCommitGraphMessage() {
      const container = document.getElementById('commit-graph-container');
      const message = document.createElement('p');
      message.className = 'no-data-message sub-text ';
      message.textContent = 'No GitHub activity found.';
      container.appendChild(message);
    }

    function formatDate2(dateString) {
      const options = {
        year: 'numeric',
        month: 'short'
      };
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', options);
    }

    document.addEventListener('DOMContentLoaded', function () {
      const currentJobContainer = document.getElementById('currentJobContainer');
      const currentEducationContainer = document.getElementById('currentEducationContainer');

      function displayJobExperience(experiences) {
        if (experiences.length === 0) {
          if (currentJobContainer)
            currentJobContainer.innerHTML = '<p>No job experiences available.</p>';
          return;
        }
        experiences.forEach(experience => {
          const formattedStartDate = formatDate2(experience.startDate);
          const formattedEndDate = experience.isCurrent ? '' : formatDate2(experience.endDate);

          const jobElement = document.createElement('div');
          jobElement.className = 'flex flex-row v-center';
          jobElement.innerHTML = `
            <div class="job-experience-image">
              <% if (otheruser.settings_PrivateJobNames) { %>
                <img class="thumbnail thumbnail-regular thumbnail-tiny" src='/img/glyph.png' alt="Company Logo">
                  <% } else { %>    
              <img class="thumbnail thumbnail-regular thumbnail-tiny" src="${experience.companyLogo || '/img/glyph.png'}" alt="Company Logo">
              <% } %> 
            </div>
                        <div class="job-experience-body">
              <div class="job-experience-header">

                <% if (otheruser.settings_PrivateJobNames) { %>
                  <h4>Company Name Hidden</h4>
                <% } else { %>
                  <a class="link bold sub-text" href="/jobs/company/${encodeURIComponent(experience.companyName)}">
                  ${experience.companyName}</a>
                <% } %>
                <div class="date-range secondary-text mini-text">
                  <p><time>${formattedStartDate}</time> - <time>${experience.isCurrent ? 'Present' : formattedEndDate}</time></p>
                </div>
              </div>
              <h4 class="bold main-text">${experience.title}</h4>
              <p class="mini-text">${experience.employmentType ? experience.employmentType : 'Employee'}</p>
              <% if (otheruser.settings_PrivateJobNames) { %>
              <p class="sub-text primary-text short-text">${experience.description.replace(createNameRegex(experience.companyName), '[Company Name Hidden]')}</p>
              <% } else { %>
              <p class="sub-text primary-text short-text">${experience.description}</p>
              <% } %>
              <p>${ experience.tags ? experience.tags.split(',').slice(0, 3).map(tag => {
                const trimmedTag = tag.trim();
                return `<span class="job-tag" onclick="window.location.href='/tags/${encodeURIComponent(trimmedTag)}'">${trimmedTag}</span>`;
              }).join('') : ''}</p>
            </div>
          `;
          currentJobContainer.appendChild(jobElement);
        });
      }


      function createNameRegex(name) {
        // List of common suffixes to remove
        const suffixes = ['Inc', 'Incorporated', 'LLC', 'Ltd', 'Limited', 'Corp', 'Corporation', 'Company', 'Co', 'University', 'College', 'Institute'];

        // Split the name into words
        let words = name.split(/\s+/);

        // Remove common suffixes
        words = words.filter(word => !suffixes.includes(word));

        // Escape special regex characters
        words = words.map(word => word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));

        // Join the words back together with optional whitespace
        const pattern = words.join('\\s*');

        // Create a regex pattern, case-insensitive
        return new RegExp(pattern, 'gi');
      }

      function displayEducationExperience(experiences) {
        experiences.forEach(experience => {
          const educationElement = document.createElement('div');
          educationElement.innerHTML = `
            <div class="job-experience-header">
            <% if (otheruser.settings_PrivateSchoolNames) { %>
              <h4 class="bold main-text">Institution Name Hidden</h4>
            <% } else { %>
              <h4 class="bold main-text">${experience.institutionName}</h4>
            <% } %>
              <div class="date-range secondary-text mini-text">
        <p>${formatDate2(experience.startDate)} - ${experience.isCurrent ? 'Present' : formatDate2(experience.endDate)}</p>              </div>
            </div>
            <h4 class="secondary-text sub-text">${experience.degree}</h4>
            <p class="sub-text">${experience.fieldOfStudy}</p>
            <p class="sub-text secondary-text">${experience.description ? experience.description : ''}</p>
            `;
          currentEducationContainer.appendChild(educationElement);
        });
      }


      const userID = '<%= otheruser.id %>';
      fetch(`/api/job-experience/${userID}`)
        .then(response => response.json())
        .then(data => {
          if (data.length > 0) {
            displayJobExperience(data);
          } else {
            if (currentJobContainer)
              currentJobContainer.innerHTML = '<p>No job experiences available.</p>';
          }
        })
        .catch(error => {
          console.error('Error fetching job experience data:', error);
          if (currentJobContainer)
            currentJobContainer.innerHTML = '<p>Error fetching job experience data.</p>';
        });

      fetch(`/api/education-experience/${userID}`)
        .then(response => response.json())
        .then(data => {
          if (data.length > 0) {
            displayEducationExperience(data);
          } else {
            if (currentEducationContainer)
              currentEducationContainer.innerHTML = '<p>No education experiences available.</p>';
          }
        });
    });

    function displayCommitGraph(commitGraph, commitCount) {
      const container = document.getElementById('commit-graph-container');
      // Create a container element for the commit graph
      const graphContainer = document.createElement('div');
      graphContainer.classList.add('commit-graph');

      // Get the dates from the commitGraph keys
      const dates = Object.keys(commitGraph);
      // Sort the dates in descending order (most recent first)
      dates.sort((a, b) => new Date(b) - new Date(a));

      // Find the start and end dates
      const startDate = new Date(dates[0]);
      const endDate = new Date(dates[dates.length - 1]);

      // Calculate the number of weeks between start and end dates
      const weeksDiff = Math.ceil((startDate - endDate) / (7 * 24 * 60 * 60 * 1000));

      // Create a div for each day of the week (7 rows)
      for (let i = 0; i < 7; i++) {
        const rowDiv = document.createElement('div');
        rowDiv.classList.add('commit-row');

        // Create a div for each week of commit data (number of weeks columns)
        for (let j = 0; j < weeksDiff; j++) {
          const date = new Date(startDate);
          date.setDate(startDate.getDate() - j * 7 - i);
          const dateString = date.toISOString().split('T')[0];
          const count = commitGraph[dateString] || 0;

          const cellDiv = document.createElement('div');
          cellDiv.classList.add('commit-cell');
          cellDiv.setAttribute('data-date', dateString);
          cellDiv.setAttribute('data-count', count);

          // Set the background color based on the commit count
          const color = getColorForCommitCount(count);
          cellDiv.style.backgroundColor = color;

          rowDiv.appendChild(cellDiv);
        }

        graphContainer.appendChild(rowDiv);
      }

      container.appendChild(graphContainer);
    }

    function getColorForCommitCount(count) {
      if (count === 0) {
        return '<%= otheruser.profile_border_color%>20';
      } else if (count === 1) {
        return '#9be9a8';
      } else if (count === 2) {
        return '#40c463';
      } else if (count === 3) {
        return '#30a14e';
      } else {
        return '#216e39';
      }
    }

    if ('<%= otheruser.github_url %>') {
      fetchCommitGraph();
      fetchRepositories();
    } else {
      displayNoCommitGraphMessage();
      displayNoRepositoriesMessage();
    }
    <% if (user && otheruser.username !== user.username) { %>
    document.addEventListener('DOMContentLoaded', () => {
      const button = document.getElementById('followButton');
      const followerCountElement = document.getElementById('followerCount');
      let isFollowing = <%= isFollowing %>;

      button.addEventListener('click', async () => {
        try {
          const action = isFollowing ? 'unfollow' : 'follow';
          const response = await fetch(`/users/<%= otheruser.id %>/${action}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin'
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          // Update button text
          button.textContent = isFollowing ? 'Follow' : 'Unfollow';
          button.className = isFollowing ? 'submit-button-normal' : 'cancel-button-normal';

          // Update follower count
          if (followerCountElement && data.followerCount !== undefined) {
            followerCountElement.textContent = data.followerCount;
          }

          // Toggle isFollowing state
          isFollowing = !isFollowing;

        } catch (error) {
          console.error('Error:', error);
          showBannerNotification('An error occurred. Please try again.');
        }
      });
    });
    <% } %>

    function editImage() {
      // Show the URL input and update button
      document.getElementById("imageEditControls").style.display = "block";
    }

    function submitImageEdit() {
      // Get the new image URL from the input element
      const imageUrl = document.getElementById("imageUrl").value;

      // Hide the URL input and update button
      document.getElementById("imageEditControls").style.display = "none";

      // Continue only if the imageUrl is not empty
      if (imageUrl.trim() !== "") {
        // Send the POST request to the ` / edits` endpoint with the imageURL
        fetch("/edits", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              avatar: imageUrl, // The 'avatar' field is being updated with the imageURL
            }),
          })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok.");
            }
            return response.json();
          })
          .then((data) => {

            // Update the profile picture preview with the new URL
            document.getElementById("profilePic").src = imageUrl;
            // You can redirect or refresh the page if needed
          })
          .catch((error) => {
            console.error("Error:", error);
            // You might want to show an error message to the user here
          });
      } else {
        // If imageUrl is empty, display an error or reset the view
        // You might want to show an error message to the user here
      }
    }

    function editField(field, button) {
      const displayElement = document.getElementById(`
                        $ {
                          field
                        } - display`);
      const currentValue = displayElement.innerText;

      if (button.textContent === "Edit") {
        // If the button is in 'Edit' state, create an input field
        const inputField = document.createElement("input");
        inputField.type = "text";
        inputField.value = currentValue;
        inputField.id = `
                        $ {
                          field
                        } - input`;
        inputField.classList.add("edit-input"); // Add this class to style the input

        displayElement.parentNode.insertBefore(inputField, displayElement);
        displayElement.style.display = "none"; // Hide the display element

        button.textContent = "Submit"; // Change button text to 'Submit'
        // Pass in the display element into the onclick handler
        button.onclick = function () {
          submitEdit(field, button, displayElement, inputField);
        };
      }
    }

    function submitEdit(field, button, displayElement, inputField) {
      const newValue = inputField.value;

      // Send the request to the server
      fetch("/edits", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            [field]: newValue
          }), // Use computed property names
        })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok.");
          }
          return response.json();
        })
        .then((data) => {


          // Update the display element and remove the textfield
          displayElement.innerText = newValue;
          displayElement.style.display = "block";
          inputField.remove();

          // Change the button text back to 'Edit' and restore the original onclick event
          button.textContent = "Edit";
          button.onclick = function () {
            editField(field, button); // Restore the editField function
          };
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    function showSection(section) {
      // Hide both sections
      document.getElementById('posts').style.display = 'none';
      document.getElementById('comments').style.display = 'none';

      // Show the selected section
      document.getElementById(section).style.display = 'block';

      // Update the active class on the buttons
      document.querySelectorAll('.sort-option').forEach(button => {
        button.classList.remove('active');
      });

      document.querySelector(`.$ {
                          section
                        } - button`).classList.add('active');


    }
  </script>

</body>

</html>