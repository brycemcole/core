<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/user_profile.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="shortcut icon" href="/img/core.png" />
  <title><%= otheruser.firstname %> <%= otheruser.lastname %> (@<%= otheruser.username %>)</title>

  <meta name="description" content="<%= otheruser.firstname %> <%= otheruser.lastname %>'s profile on CORE. Connect with <%= otheruser.firstname %> and explore their activities, posts, and more.">
  <meta name="keywords" content="<%= otheruser.firstname %> <%= otheruser.lastname %>, CORE profile, connect with <%= otheruser.firstname %>, <%= otheruser.username %>'s activities, user posts, social links">
  <meta name="robots" content="index, follow">
  <meta property="og:title" content="<%= otheruser.username %> - CORE">
  <meta property="og:description" content="Connect with <%= otheruser.firstname %> <%= otheruser.lastname %> on CORE. Explore their activities, posts, and more.">
  <meta property="og:image" content="<%= otheruser.avatar ? otheruser.avatar : '/img/default-avatar.png' %>">
  <meta property="og:url" content="https://getcore.dev/user/<%= otheruser.username %>">
  <meta property="og:type" content="profile">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="<%= otheruser.username %> - CORE">
  <meta name="twitter:description" content="Connect with <%= otheruser.firstname %> <%= otheruser.lastname %> on CORE. Explore their activities, posts, and more.">
  <meta name="twitter:image" content="<%= otheruser.avatar ? otheruser.avatar : '/img/default-avatar.png' %>">
</head>

<% if (!otheruser.profile_border_color) { %>
<% otheruser.profile_border_color = 'var(--active-indicator-color)'; %>
<% } %>
<style>
  .link-display {
    background: <%=otheruser.profile_border_color%>0f !important;
    border: 1px solid <%=otheruser.profile_border_color%>52 !important;
    color: black;
  }

  .job-tag:hover {
    color: white !important;
  }

  #repo-table {
    border-collapse: collapse;
    width: 100%;
  }

  #repo-table th,
  #repo-table td {
    padding: 8px;
    text-align: left;
  }

  .post:hover {
    background: <%=otheruser.profile_border_color%>92 !important;
  }

  < !-- .navbar {
    border-color: <%=otheruser.profile_border_color%> !important;
  }

  -->@media (prefers-color-scheme: dark) {

    .link-display,
    .post,
    .comment {
      background: <%=otheruser.profile_border_color%>30 !important;
      border: 1px solid <%=otheruser.profile_border_color%>52 !important;
      color: white;
    }
  }

  .admin-button {
    border: 1px solid #ae4444 !important;
    background-color: #cd3a3a1c !important;
    color: #ae4444 !important;
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'communities' }) %>
  <main>
    <div class="main-container">
      <% if (otheruser.isBanned) {%>
      <div class="error-messages">
        <p>This user has been banned.</p>
      </div>
      <% } %>
      <div id="profile" class="grid-container">

        <div class="profile-info">
          <div class="profile-content">
            <div class="profile-details flex flex-row gap-4 w-100">
              <div class="profile-picture" data-hue-rotate="0">
                <img class="thumbnail thumbnail-large" src="<%= otheruser.avatar || '/img/default-avatar.png' %>" alt="Profile Picture" />

              </div>
              <div class="flex flex-col gap-03 w-full h-center">
                <h2 class="text-2xl font-semibold">
                  <% if (otheruser.firstname && otheruser.lastname) { %>
                  <%= otheruser.firstname %> <%= otheruser.lastname %>
                  <% } else { %>
                  @<%= otheruser.username %>
                  <% } %>
                </h2>

                <div class="flex flex-row v-center gap-03 secondary-text sub-text">
                  <!--
                  <% if (otheruser.verified) { %>
                  <span class="material-symbols-outlined no-padding" style="color: green">
                    check
                  </span>
                  <% } %>

                  <% if (otheruser.isAdmin) { %>
                  <span class="material-symbols-outlined no-padding" style="color: #b40000">
                    admin_panel_settings
                  </span>
                  <% } %>
                  -->
                  <a class="secondary-text sub-text" href="/user/<%= otheruser.username %>/followers" style="display: flex; flex-direction:row; align-items: center;gap: 3px;">
                    <%= otheruser.followerCount || 0 %>
                    Followers
                  </a>

                </div>
                <% if (otheruser.experience_title && otheruser.experience_place && otheruser.experience_title.trim() !== '' && otheruser.experience_place.trim() !== '') { %>
                <span class="flex flex-row v-center gap-2 secondary-text sub-text">
                  <% if (otheruser.company_logo) { %>
                  <img src="<%= otheruser.company_logo %>" alt="<%= otheruser.experience_place %>" style="width: 16px; height: 16px; margin-right: 5px;">
                  <% } %>
                  <%= otheruser.experience_title %> at <%= otheruser.experience_place %>
                </span>
                <% } %>


              </div>

            </div>
            <div class="flex flex-col gap-06">
              <div class="edit-controls-and-follow-button">
                <% if (user) { %>
                <% if (otheruser.username === user.username) { %>
                <button class="main-button-normal" id="edit-button" onclick="window.location.href='/edit-profile'">
                  <span class="material-symbols-outlined">
                    person_edit
                  </span>
                  Edit
                </button>
                <% } else { %>
                <button class="<%= isFollowing ? 'cancel-button-normal' : 'main-button-normal' %>" id="followButton">
                  <%- isFollowing ? '<span class="material-symbols-outlined">person_remove</span> Unfollow' : '<span class="material-symbols-outlined">person_add</span> Follow' %>
                </button>
                <% } %>
                <% } %>

                <button class="bordered-button-normal" onclick="share('User Profile', '', 'https://getcore.dev/user/<%= otheruser.username %>')">
                  <span class="material-symbols-outlined">
                    share
                  </span>
                  Share
                </button>

                <% if (user && otheruser.username !== user.username) { %>
                <% if (user.isAdmin ) { %>
                <div class="dropdown" tabindex="0">
                  <!-- Dropdown Button -->
                  <button class="bordered-button-normal px-4 py-2 mini-text secondary-text" aria-haspopup="true" aria-expanded="false">
                    <span class="material-symbols-outlined">
                      more_vert
                    </span>
                  </button>

                  <!-- Dropdown Content -->
                  <div class="dropdown-content">
                    <a href="#">
                      <form class="flex w-100" action="/admin/users/<%= otheruser.id %>/toggle-verified" method="POST">
                        <button class="w-100 no-bg no-border flex flex-row space-between cancel-button-text" type="submit" style="margin-bottom: auto;"><%- otheruser.verified ? '<span class="material-symbols-outlined">check</span> Unverify' : '<span class="material-symbols-outlined">check</span> Verify' %></button>
                      </form>
                    </a>
                    <a href="#">

                      <form class="flex w-100" action="/admin/users/<%= otheruser.id %>/toggle-admin" method="POST">
                        <button class="w-100 no-bg no-border flex flex-row space-between cancel-button-text" type="submit" style="margin-bottom: auto;"><%- otheruser.isAdmin ? '<span class="material-symbols-outlined">admin_panel_settings</span> Revoke Admin' : '<span class="material-symbols-outlined">admin_panel_settings</span> Make Admin' %></button>
                      </form>
                    </a>
                    <a href="#">

                      <form class="flex w-100" action="/admin/users/<%= otheruser.id %>/toggle-ban" method="POST">
                        <button class="w-100 no-bg no-border flex flex-row space-between cancel-button-text" type="submit" style="margin-bottom: auto;"><%- otheruser.isBanned ? '<span class="material-symbols-outlined">block</span> Unban' : '<span class="material-symbols-outlined">block</span> Ban' %></button>
                      </form>
                    </a>
                  </div>
                </div>
                <% } %>
                <% } %>
              </div>


            </div>
          </div>

          <% if (otheruser.bio) { %>
          <div class="flex flex-col gap-06">
            <h4 class="text-lg font-semibold">Bio</h4>
            <div class="user-bio sub-text" style="background: 0 !important; padding-top: 0;">
              <p>
                <%= otheruser.bio %>
              </p>
            </div>
          </div>
          <% } %>
          <% if (otheruser.username != "core") { %>
          <!--
          <% if (otheruser.topCommunities && otheruser.topCommunities.length > 0) { %>
          <div class="space-y-4">
            <h4 class="text-lg font-semibold">Communities</h4>
            <div class="flex flex-wrap gap-2">
              <% otheruser.topCommunities.split(',').forEach(function(community) { %>
              <span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10">
                <%= community.trim() %>
              </span>
              <% }); %>
            </div>
          </div>
          <% } %>
          -->
          <div class="space-y-4">
            <% if (otheruser && (otheruser.link || otheruser.link2 || otheruser.github_url || otheruser.linkedin_url || otheruser.leetcode_url)) { %>
            <h4 class="text-lg font-semibold">Links</h4>
            <div class="flex flex-wrap gap-2">
              <% if (otheruser.leetcode_url) { %>
              <a href="https://leetcode.com/<%= otheruser.leetcode_url %>" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2">
                <img src="/src/leetcodeglyph.png" alt="LeetCode" class="w-4 h-4 mr-2">
                LeetCode
              </a>
              <% } %>

              <% if (otheruser.linkedin_url) { %>
              <a href="https://linkedin.com/in/<%= otheruser.linkedin_url %>" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2">
                <img src="/src/linkedin.png" alt="LinkedIn" class="w-4 h-4 mr-2">
                LinkedIn
              </a>
              <% } %>

              <% if (otheruser.github_url) { %>
              <a href="https://github.com/<%= otheruser.github_url %>" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2">
                <img src="/src/github.png" alt="GitHub" class="w-4 h-4 mr-2 bg-white rounded-full">
                GitHub
              </a>
              <% } %>
            </div>

            <div class="flex flex-wrap gap-2">
              <% if (otheruser.link) { %>
              <a href="<%= otheruser.link %>" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                <span class="material-symbols-outlined mr-2">open_in_new</span>
                <%= otheruser.link.startsWith('https://') ? otheruser.link.slice(8) : otheruser.link %>
              </a>
              <% } %>

              <% if (otheruser.link2) { %>
              <a href="<%= otheruser.link2 %>" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                <span class="material-symbols-outlined mr-2">open_in_new</span>
                <%= otheruser.link2.startsWith('https://') ? otheruser.link2.slice(8) : otheruser.link2 %>
              </a>
              <% } %>
            </div>
            <% } %>
          </div>

          <div class="current-education" style="background:none !important; padding: 0;">
            <div class="current-job-header">
              <h4 class="text-lg font-semibold">Education</h4>
            </div>
            <div id="currentEducationContainer"></div>
          </div>
          <div class="current-job" style="background:none !important; padding: 0;">
            <div class="current-job-header">
              <h4 class="text-lg font-semibold">Experience</h4>
            </div>
            <div id="currentJobContainer"></div>
          </div>
          <div class="projecs" style="background:none !important; padding: 0;">
            <div class="projects-header">
              <h4 class="text-lg font-semibold">Projects</h4>
            </div>
            <div id="projectContainer">
              <p>No projects available.</p>
            </div>
          </div>
          <div class="github-commit-repos">
            <h4 class="text-lg font-semibold">GitHub Activity</h4>
            <!-- Commit Graph -->
            <div class="commit-activity-container" id="commit-activity-container"></div>
            <!-- Repository List -->
            <div id="repo-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-4"></div>


          </div>
          <% } %>

          <div class="user-activity">
            <div class="user-activity-header">
              <div class="user-activity-title">
                <h4 class="text-lg font-semibold"><%=otheruser.username%>'s activity</h4>
              </div>
              <div class="user-activity-buttons">
                <button class="sort-option posts-button active" onclick="showSection('posts')">Posts</button>
                <button class="sort-option comments-button" onclick="showSection('comments')">Comments</button>

              </div>
            </div>
            <%
            function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + 'm';
      } else if (hours < 24) {
        formattedDate = hours + 'h';
      } else if (days < 365) {
        formattedDate = days + 'd';
      } else {
        formattedDate = years + 'y';
      }
      return formattedDate;
    }

    %>
            <div id="posts" class="content">
              <% if (posts.length === 0) { %>
              <p>No posts yet.</p>
              <% } else { %>
              <div class="post-container">
                <% posts.forEach(function(post) { %>
                <div class="group rounded-lg border border-slate-200 dark:border-slate-700 dark:bg-slate-800 p-4 shadow-sm transition-all hover:shadow-md cursor-pointer" onclick="window.location.href='/posts/<%= post.id %>'">
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 mb-2">
                    <%= post.title %>
                  </h3>
                  <p class="text-sm text-slate-500 dark:text-slate-400 mb-4 line-clamp-2"><%= post.content %></p>
                  <div class="flex flex-wrap items-center gap-2 text-xs text-slate-500 dark:text-slate-400">
                    <span class="inline-flex items-center rounded-md bg-slate-100 dark:bg-slate-700 px-2 py-1 gap-2">
                      <svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                      </svg>
                      <%= formatDate(post.created_at) %>
                    </span>
                    <span class="inline-flex items-center rounded-md bg-slate-100 dark:bg-slate-700 px-2 py-1 gap-2">
                      <svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                      </svg>
                      <%= post.views %> views
                    </span>
                    <span class="inline-flex items-center rounded-md bg-slate-100 dark:bg-slate-700 px-2 py-1 gap-2">
                      <svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z" clip-rule="evenodd" />
                      </svg>
                      <%= post.comment_count %> comments
                    </span>
                    <span class="inline-flex items-center rounded-md bg-slate-100 dark:bg-slate-700 px-2 py-1 gap-2">
                      <svg class="mr-1.5 h-3 w-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
                      </svg>
                      <%= post.reaction_count %> reactions
                    </span>
                  </div>
                </div>
                <% }); %>
              </div>
              <% } %>
            </div>

            <section id="comments" class="comments-section" style="display:none;">
              <% if (comments.length === 0) { %>
              <p class="no-comments">No comments yet.</p>
              <% } else { %>
              <div class="comments-container">
                <% comments.forEach(function(comment) { %>
                <article class="comment" onclick="window.location.href='/posts/<%= comment.post_id %>'" tabindex="0" role="button" aria-pressed="false">
                  <header class="comment-header flex flex-row ">
                    <img class="comment-author-avatar" src="<%= comment.author.avatar %>" alt="<%= comment.author.username %>'s avatar" loading="lazy" />
                    <div class="comment-author-info">
                      <p class="comment-author-name">
                        <a class="main-text" href="/user/<%= comment.author.username %>"><%= comment.author.username %></a>
                        <% if (comment.receiver) { %>
                        <span class="to">to</span>
                        <a href="/user/<%= comment.receiver %>"><%= comment.receiver %></a>
                        <% } %>
                      </p>
                      <time class="comment-date mini-text" datetime="<%= comment.created_at.toISOString() %>">
                        <%= formatDate(comment.created_at) %>
                      </time>
                    </div>
                  </header>
                  <div class="comment-body adaptive-border px-4 py-2">
                    <h4 class="comment-title"><%= comment.title %></h4>
                    <p class="comment-content"><%= comment.comment %></p>
                  </div>
                </article>
                <% }); %>
              </div>
              <% } %>
            </section>
          </div>
        </div>
        <%- include('partials/footer') %>


  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        form.addEventListener('submit', async function (event) {
          event.preventDefault();
          const formData = new FormData(this);
          const action = this.getAttribute('action');
          const method = this.getAttribute('method').toUpperCase();

          try {
            const response = await fetch(action, {
              method: method,
              body: formData,
            });
            const result = await response.json();
            if (response.ok) {
              showBannerNotification(JSON.stringify(result));
              // Optionally, you can update the UI here without a full page reload
            } else {
              showBannerNotification(JSON.stringify(result));
            }
          } catch (error) {
            showBannerNotification(`JSON.stringify(error)`);
          }
        });
      });
    });

    async function fetchRepositories() {
      const username = '<%= otheruser.github_url %>';
      const response = await fetch(`/api/github-repos/${username}`);
      const data = await response.json();

      if (response.ok) {
        displayRepositories(data.repositories);
      } else {
        console.error('Failed to fetch repositories:', data.error);
        displayNoRepositoriesMessage();
      }
    }

    function displayNoRepositoriesMessage() {
      const tableBody = document.querySelector('#repo-table tbody');
      const tableHead = document.querySelector('#repo-table thead');

      tableHead.style.display = 'none';

      const row = document.createElement('tr');
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '3');
      cell.textContent = 'No GitHub repositories found.';
      row.appendChild(cell);
      tableBody.appendChild(row);
    }

    function displayRepositories(repositories) {
      const repoContainer = document.getElementById('repo-container');
      repoContainer.innerHTML = ''; // Clear existing content

      if (repositories.length === 0) {
        repoContainer.innerHTML = '<p class="text-center text-sm text-muted-foreground p-2">No public repositories found.</p>';
        return;
      }

      repositories.forEach(repo => {
        const card = document.createElement('div');
        card.className = 'bg-card text-card-foreground rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 p-3';

        const nameLink = document.createElement('a');
        nameLink.href = repo.url;
        nameLink.className = 'text-sm font-semibold text-primary hover:underline';
        nameLink.textContent = repo.name;

        const description = document.createElement('p');
        description.className = 'text-xs text-muted-foreground mt-1 line-clamp-2';
        description.textContent = repo.description || 'No description available';

        const stats = document.createElement('div');
        stats.className = 'flex items-center mt-2 text-xs text-muted-foreground';

        const starsSpan = document.createElement('span');
        starsSpan.className = 'flex items-center mr-3';
        starsSpan.innerHTML = `
      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
      </svg>
      ${repo.stars}
    `;

        const languageSpan = document.createElement('span');
        languageSpan.className = 'flex items-center';
        languageSpan.innerHTML = `
      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
      </svg>
      ${repo.language || 'Not specified'}
    `;

        stats.appendChild(starsSpan);
        stats.appendChild(languageSpan);

        card.appendChild(nameLink);
        card.appendChild(description);
        card.appendChild(stats);

        repoContainer.appendChild(card);
      });
    }

    async function fetchCommitGraph() {
      const git_username = '<%= otheruser.github_url %>';
      const response = await fetch(`/api/github-commit-graph/${git_username}`);
      const data = await response.json();
      console.log(data);

      if (response.ok) {
        if (Object.keys(data.commitGraph).length === 0) {
          displayNoCommitGraphMessage();
        } else {
          displayCommitActivity(data.commitGraph, data.commitCount);
        }
      } else {
        console.error('Failed to fetch commit graph:', data.error);
        displayNoCommitGraphMessage();
      }
    }

    function displayNoCommitGraphMessage() {
      const container = document.getElementById('commit-graph-container');
      const message = document.createElement('p');
      message.className = 'no-data-message sub-text ';
      message.textContent = 'No GitHub activity found.';
      container.appendChild(message);
    }

    function formatDate2(dateString) {
      const options = {
        year: 'numeric',
        month: 'short'
      };
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', options);
    }

    document.addEventListener('DOMContentLoaded', function () {
      const currentJobContainer = document.getElementById('currentJobContainer');
      const currentJob = document.querySelector('.current-job');
      const currentEducationContainer = document.getElementById('currentEducationContainer');

      function displayJobExperience(experiences) {
        if (experiences.length === 0) {
          currentJob.style.display = 'none';
          if (currentJobContainer)
            currentJobContainer.innerHTML = '<p>No job experiences available.</p>';
          return;
        }

        // Group experiences by company
        const groupedExperiences = experiences.reduce((acc, exp) => {
          if (!acc[exp.companyName]) {
            acc[exp.companyName] = [];
          }
          acc[exp.companyName].push(exp);
          return acc;
        }, {});

        // Sort companies by the most recent start date of any job at that company
        const sortedCompanies = Object.keys(groupedExperiences).sort((a, b) => {
          const latestA = Math.max(...groupedExperiences[a].map(exp => new Date(exp.startDate)));
          const latestB = Math.max(...groupedExperiences[b].map(exp => new Date(exp.startDate)));
          return latestB - latestA;
        });

        currentJobContainer.innerHTML = ''; // Clear existing content

        sortedCompanies.forEach(companyName => {
          const companyExperiences = groupedExperiences[companyName];
          const companyElement = document.createElement('div');
          companyElement.className = 'company-group';

          // Sort experiences within the company by start date (most recent first)
          companyExperiences.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));

          companyExperiences.forEach((experience, index) => {
            const formattedStartDate = formatDate2(experience.startDate);
            const formattedEndDate = experience.isCurrent ? 'Present' : formatDate2(experience.endDate);

            const jobElement = document.createElement('div');
            jobElement.className = 'flex flex-row v-center';
            jobElement.innerHTML = `
        <div class="job-experience-body">
          <div class="flex flex-row v-center gap-2">
                  ${index === 0 ? `
          <div class="job-experience-image">
            <% if (otheruser.settings_PrivateJobNames) { %>
              <img class="thumbnail thumbnail-regular thumbnail-micro" src='/img/glyph.png' alt="Company Logo">
            <% } else { %>    
              <img class="thumbnail thumbnail-regular thumbnail-micro" src="${experience.companyLogo || '/img/glyph.png'}" alt="Company Logo">
            <% } %> 
          </div>
        ` : ''}
            <% if (otheruser.settings_PrivateJobNames) { %>
              ${index === 0 ? '<h4>Company Name Hidden</h4>' : ''}
            <% } else { %>
              ${index === 0 ? `<a class="link bold sub-text" href="/jobs/company/${encodeURIComponent(companyName)}">${companyName}</a>` : ''}
            <% } %>
            <div class="date-range secondary-text mini-text">
              <p><time>${formattedStartDate}</time> - <time>${formattedEndDate}</time></p>
            </div>
                        ${experience.isCurrent ? '<span class="ml-auto font-sm text-xs star-icon">★</span>' : ''}

          </div>
          <h4 class="bold main-text">${experience.title}</h4>
          <p class="mini-text">${experience.employmentType ? experience.employmentType : 'Employee'}</p>
          <% if (otheruser.settings_PrivateJobNames) { %>
            <p class="sub-text primary-text short-text">${experience.description.replace(createNameRegex(experience.companyName), '[Company Name Hidden]')}</p>
          <% } else { %>
            <p class="sub-text primary-text short-text">${experience.description}</p>
          <% } %>
          <!--
          <div class="job-tags">${experience.tags ? experience.tags.split(',').slice(0, 3).map(tag => {
            const trimmedTag = tag.trim();
            return `<span class="text-tag" onclick="window.location.href='/tags/${encodeURIComponent(trimmedTag)}'">${trimmedTag}</span>`;
          }).join('') : ''}</div>
          -->
        </div>
      `;
            companyElement.appendChild(jobElement);
          });

          currentJobContainer.appendChild(companyElement);
        });
      }


      function createNameRegex(name) {
        // List of common suffixes to remove
        const suffixes = ['Inc', 'Incorporated', 'LLC', 'Ltd', 'Limited', 'Corp', 'Corporation', 'Company', 'Co', 'University', 'College', 'Institute'];

        // Split the name into words
        let words = name.split(/\s+/);

        // Remove common suffixes
        words = words.filter(word => !suffixes.includes(word));

        // Escape special regex characters
        words = words.map(word => word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));

        // Join the words back together with optional whitespace
        const pattern = words.join('\\s*');

        // Create a regex pattern, case-insensitive
        return new RegExp(pattern, 'gi');
      }

      function displayEducationExperience(experiences) {
        experiences.forEach(experience => {
          const educationElement = document.createElement('div');
          educationElement.innerHTML = `
            <div class="flex flex-row v-center gap-2">
            <% if (otheruser.settings_PrivateSchoolNames) { %>
              <h4 class="bold main-text">Institution Name Hidden</h4>
            <% } else { %>
              <h4 class="bold main-text">${experience.institutionName}</h4>
            <% } %>
              <div class="date-range secondary-text mini-text">
        <p>${formatDate2(experience.startDate)} - ${experience.isCurrent ? 'Present' : formatDate2(experience.endDate)}</p>              </div>
            

            ${experience.isCurrent ? '<span class="ml-auto text-xs font-sm star-icon">★</span>' : ''}
            
            </div>
            <h4 class="secondary-text sub-text">${experience.degree}</h4>
            <p class="sub-text">${experience.fieldOfStudy}</p>
            <p class="sub-text secondary-text">${experience.description ? experience.description : ''}</p>
            `;
          currentEducationContainer.appendChild(educationElement);
        });
      }


      const userID = '<%= otheruser.id %>';
      fetch(`/api/job-experience/${userID}`)
        .then(response => response.json())
        .then(data => {
          if (data.length > 0) {
            displayJobExperience(data);
          } else {
            if (currentJobContainer)
              currentJobContainer.innerHTML = '<p>No job experiences available.</p>';
          }
        })
        .catch(error => {
          console.error('Error fetching job experience data:', error);
          if (currentJobContainer)
            currentJobContainer.innerHTML = '<p>Error fetching job experience data.</p>';
        });

      fetch(`/api/education-experience/${userID}`)
        .then(response => response.json())
        .then(data => {
          if (data.length > 0) {
            displayEducationExperience(data);
          } else {
            if (currentEducationContainer)
              currentEducationContainer.innerHTML = '<p>No education experiences available.</p>';
          }
        });
    });

    function displayCommitActivity(commitGraph, totalCommits) {
      const container = document.getElementById('commit-activity-container');
      container.innerHTML = ''; // Clear existing content
      container.className = 'space-y-2'; // Reduce space between items

      // Calculate activity for each month
      const monthlyActivity = calculateMonthlyActivity(commitGraph);

      // Create summary card
      const summaryCard = document.createElement('div');
      summaryCard.className = 'bg-card text-card-foreground rounded-lg shadow-sm p-3 mb-2';
      summaryCard.innerHTML = `
    <h3 class="text-base font-semibold mb-1">Commit Summary</h3>
    <p class="text-sm text-muted-foreground">Total Commits: ${totalCommits}</p>
    <p class="text-sm text-muted-foreground">Active for ${Object.keys(monthlyActivity).length} months</p>
  `;
      container.appendChild(summaryCard);

      // Create activity timeline
      const timeline = document.createElement('div');
      timeline.className = 'space-y-2'; // Reduce space between month cards

      Object.entries(monthlyActivity).sort((a, b) => b[0].localeCompare(a[0])).forEach(([month, commits]) => {
        const monthCard = document.createElement('div');
        monthCard.className = 'bg-card text-card-foreground rounded-lg shadow-sm p-2 flex items-center';

        const activityLevel = getActivityLevel(commits);
        const activityColor = getActivityColor(activityLevel);

        monthCard.innerHTML = `
      <div class="w-10 h-10 rounded-full ${activityColor} flex items-center justify-center mr-3 flex-shrink-0">
        <span class="text-sm font-bold">${commits}</span>
      </div>
      <div>
        <h4 class="text-sm font-semibold">${formatMonth(month)}</h4>
        <p class="text-xs text-muted-foreground">${getActivityDescription(activityLevel)}</p>
      </div>
    `;

        timeline.appendChild(monthCard);
      });

      container.appendChild(timeline);
    }

    function calculateMonthlyActivity(commitGraph) {
      const monthlyActivity = {};
      Object.entries(commitGraph).forEach(([date, commits]) => {
        const month = date.substring(0, 7); // YYYY-MM
        monthlyActivity[month] = (monthlyActivity[month] || 0) + commits;
      });
      return monthlyActivity;
    }

    function getActivityLevel(commits) {
      if (commits > 100) return 'very-high';
      if (commits > 50) return 'high';
      if (commits > 20) return 'medium';
      if (commits > 0) return 'low';
      return 'none';
    }

    function getActivityColor(level) {
      const colors = {
        'very-high': 'bg-green-500 text-white',
        'high': 'bg-green-400 text-white',
        'medium': 'bg-yellow-400 text-white',
        'low': 'bg-orange-400 text-white',
        'none': 'bg-gray-300 text-gray-600'
      };
      return colors[level];
    }

    function getActivityDescription(level) {
      const descriptions = {
        'very-high': 'Extremely active',
        'high': 'Very active',
        'medium': 'Moderately active',
        'low': 'Slightly active',
        'none': 'No activity'
      };
      return descriptions[level];
    }

    function formatMonth(monthString) {
      const [year, month] = monthString.split('-');
      return new Date(year, month - 1).toLocaleString('default', {
        month: 'short',
        year: 'numeric'
      });
    }

    function getColorForCommitCount(count) {
      if (count === 0) {
        return '<%= otheruser.profile_border_color%>20';
      } else if (count === 1) {
        return '#9be9a8';
      } else if (count === 2) {
        return '#40c463';
      } else if (count === 3) {
        return '#30a14e';
      } else {
        return '#216e39';
      }
    }

    if ('<%= otheruser.github_url %>') {
      fetchCommitGraph();
      fetchRepositories();
    } else {
      displayNoCommitGraphMessage();
      displayNoRepositoriesMessage();
    }
    <% if (user && otheruser.username !== user.username) { %>
    document.addEventListener('DOMContentLoaded', () => {
      const button = document.getElementById('followButton');
      const followerCountElement = document.getElementById('followerCount');
      let isFollowing = <%= isFollowing %>;

      button.addEventListener('click', async () => {
        try {
          const action = isFollowing ? 'unfollow' : 'follow';
          const response = await fetch(`/users/<%= otheruser.id %>/${action}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin'
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          // Update button text
          button.textContent = isFollowing ? 'Follow' : 'Unfollow';
          button.className = isFollowing ? 'submit-button-normal' : 'cancel-button-normal';

          // Update follower count
          if (followerCountElement && data.followerCount !== undefined) {
            followerCountElement.textContent = data.followerCount;
          }

          // Toggle isFollowing state
          isFollowing = !isFollowing;

        } catch (error) {
          console.error('Error:', error);
          showBannerNotification('An error occurred. Please try again.');
        }
      });
    });
    <% } %>

    function editImage() {
      // Show the URL input and update button
      document.getElementById("imageEditControls").style.display = "block";
    }

    function submitImageEdit() {
      // Get the new image URL from the input element
      const imageUrl = document.getElementById("imageUrl").value;

      // Hide the URL input and update button
      document.getElementById("imageEditControls").style.display = "none";

      // Continue only if the imageUrl is not empty
      if (imageUrl.trim() !== "") {
        // Send the POST request to the ` / edits` endpoint with the imageURL
        fetch("/edits", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              avatar: imageUrl, // The 'avatar' field is being updated with the imageURL
            }),
          })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok.");
            }
            return response.json();
          })
          .then((data) => {

            // Update the profile picture preview with the new URL
            document.getElementById("profilePic").src = imageUrl;
            // You can redirect or refresh the page if needed
          })
          .catch((error) => {
            console.error("Error:", error);
            // You might want to show an error message to the user here
          });
      } else {
        // If imageUrl is empty, display an error or reset the view
        // You might want to show an error message to the user here
      }
    }

    function editField(field, button) {
      const displayElement = document.getElementById(`
                        $ {
                          field
                        } - display`);
      const currentValue = displayElement.innerText;

      if (button.textContent === "Edit") {
        // If the button is in 'Edit' state, create an input field
        const inputField = document.createElement("input");
        inputField.type = "text";
        inputField.value = currentValue;
        inputField.id = `
                        $ {
                          field
                        } - input`;
        inputField.classList.add("edit-input"); // Add this class to style the input

        displayElement.parentNode.insertBefore(inputField, displayElement);
        displayElement.style.display = "none"; // Hide the display element

        button.textContent = "Submit"; // Change button text to 'Submit'
        // Pass in the display element into the onclick handler
        button.onclick = function () {
          submitEdit(field, button, displayElement, inputField);
        };
      }
    }

    function submitEdit(field, button, displayElement, inputField) {
      const newValue = inputField.value;

      // Send the request to the server
      fetch("/edits", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            [field]: newValue
          }), // Use computed property names
        })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok.");
          }
          return response.json();
        })
        .then((data) => {


          // Update the display element and remove the textfield
          displayElement.innerText = newValue;
          displayElement.style.display = "block";
          inputField.remove();

          // Change the button text back to 'Edit' and restore the original onclick event
          button.textContent = "Edit";
          button.onclick = function () {
            editField(field, button); // Restore the editField function
          };
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    function showSection(section) {
      // Hide both sections
      document.getElementById('posts').style.display = 'none';
      document.getElementById('comments').style.display = 'none';

      // Show the selected section
      document.getElementById(section).style.display = 'block';

      // Update the active class on the buttons
      document.querySelectorAll('.sort-option').forEach(button => {
        button.classList.remove('active');
      });

      document.querySelector(`.$ {
                          section
                        } - button`).classList.add('active');


    }
  </script>

</body>

</html>