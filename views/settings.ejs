<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE/Settings</title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/settings.css" />
  <link rel="shortcut icon" href="/img/core.png" />
</head>
<style>

</style>

<body>
  <%- include('partials/navbar', { pagePath: 'settings' }) %>
  <main>
    <div class="settings-container">
      <div class="page-header flex items-center justify-between mb-4">
        <h5 class="text-2xl font-semibold text-gray-800 dark:text-gray-200">Settings</h4>
      </div>
      <div class="settings-body flex flex-col gap-4">
        <label>
          <input type="checkbox" class="peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground" id="settings_PrivateJobNames" name="settings_PrivateJobNames"> Company names are private
        </label>
        <label>
          <input type="checkbox" class="peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground" id="settings_PrivateSchoolNames" name="settings_PrivateSchoolNames"> University names are private
        </label>
        <div>
          <button class="main-button mb-4" onclick="saveSettings()">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-save">
              <path d="M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z" />
              <path d="M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7" />
              <path d="M7 3v4a1 1 0 0 0 1 1h7" />
            </svg>
            Save</button>
        </div>
      </div>
    </div>

    <% if (user.isAdmin) { %>

    <div class="flex flex-col items-start gap-2 rounded-lg border p-3 text-left mb-4 ml-4 mr-4 shadow text-sm transition-all">
      <div class="flex flex-row justify-between w-full">
        <h4 class="margin-06-bottom" id="duplicate-companies-header">Duplicate Companies</h4>
        <button class="button-normal" id="search-duplicate-companies">Search</button>
      </div>
      <div id="duplicate-companies-container" class="flex flex-col items-start gap-2 rounded-lg border p-3 text-left bg-accent w-full text-sm transition-all">
      </div>
    </div>

    <div class="flex flex-col items-start gap-2 rounded-lg border p-3 text-left mb-4 ml-4 mr-4 shadow text-sm transition-all">
      <div class="flex flex-row justify-between w-full">
        <h4 class="margin-06-bottom" id="server-info-header">Server Information</h4>
      </div>
      <div id="duplicate-companies-container" class="flex flex-col items-start gap-2  p-3 text-left w-full text-sm transition-all">
        <p>Server Time: <%= new Date().toLocaleString() %></p>
        <span class="w-full"><strong>Active Users:</strong> <span id="active-users"></span></span>
        <script>
          fetch('/api/get-current-user-count')
            .then(response => response.json())
            .then(data => {
              document.getElementById('active-users').textContent = data;
            })
            .catch(error => console.error('Error fetching active users:', error));
        </script>
        <span><strong>Active Jobs:</strong> <span id="active-jobs"></span></span>
        <script>
          fetch('/api/recentJobsCount')
            .then(response => response.json())
            .then(data => {
              document.getElementById('active-jobs').textContent = data;
            })
            .catch(error => console.error('Error fetching active jobs:', error));
        </script>
        <span><strong>Active Companies:</strong> <span id="active-companies"></span></span>
        <script>
          fetch('/api/totalCompaniesCount')
            .then(response => response.json())
            .then(data => {
              document.getElementById('active-companies').textContent = data;
            })
            .catch(error => console.error('Error fetching active companies:', error));
        </script>

      </div>
    </div>
    <% } %>


    <%- include('partials/footer') %>

    <script>
      document.addEventListener('DOMContentLoaded', (event) => {
        const isPrivateJobNames = <%= user.settings_PrivateJobNames ? 'true' : 'false' %>;
        const isPrivateSchoolNames = <%= user.settings_PrivateSchoolNames ? 'true' : 'false' %>;
        const searchDuplicateCompaniesButton = document.getElementById('search-duplicate-companies');
        const duplicateCompaniesHeader = document.getElementById('duplicate-companies-header');

        searchDuplicateCompaniesButton.addEventListener('click', () => {
          duplicateCompaniesHeader.textContent = 'Searching for duplicate companies...';
          searchDuplicateCompanies();
          searchDuplicateCompaniesButton.disabled = true;
        });

        if (isPrivateJobNames) {
          document.getElementById("settings_PrivateJobNames").checked = true;
        }

        if (isPrivateSchoolNames) {
          document.getElementById("settings_PrivateSchoolNames").checked = true;
        }

      });


      function searchDuplicateCompanies() {
        fetch('/api/duplicate-companies')
          .then(response => response.json())
          .then(data => {
            displayDuplicateCompanies(data.companies);
          })
          .catch(error => console.error('Error searching for duplicate companies:', error));
      }

      function combineDuplicateCompanies(companyId, duplicateCompanyIds) {
        // iterate through duplicateCompanyIds (string of ids separated by commas) and combine them with companyId
        const duplicateCompanyIdArray = duplicateCompanyIds.split(',');
        duplicateCompanyIdArray.forEach(duplicateCompanyId => {
          fetch(`/api/combine-duplicate-companies`, {
              method: 'POST',
              body: JSON.stringify({
                companyId,
                duplicateCompanyId
              }),
              headers: {
                'Content-Type': 'application/json'
              }
            })
            .then(response => response.json())
            .then(data => {
              if (data.error) {
                showBannerNotification(data.message);
              } else {
                showBannerNotification('Duplicate companies combined successfully');
              }
            })
            .catch(error => console.error('Error combining duplicate companies:', error));
        });
      }

      function displayDuplicateCompanies(companies) {
        const duplicateCompaniesContainer = document.getElementById('duplicate-companies-container');
        const duplicateCompaniesHeader = document.getElementById('duplicate-companies-header');
        duplicateCompaniesHeader.textContent = `Found ${companies.length} duplicate companies`;
        duplicateCompaniesContainer.innerHTML = '';

        companies.forEach(company => {
          const companyElement = document.createElement('div');
          companyElement.className = 'flex flex-row space-between w-full v-center';
          companyElement.innerHTML = `
            <div class="flex flex-row space-between w-full v-center gap-4">
            <div class="flex flex-col">
              <h4>${company.name}</h4>
              <p>${company.duplicate_count} duplicates</p>
              <p class="text-xs break-words" style="word-break: break-all;">${company.duplicate_ids}</p>
            </div>
              <button class="regular-button-normal" onclick="combineDuplicateCompanies(${company.id}, '${company.duplicate_ids}')">Combine</button>
            </div>
          `;
          duplicateCompaniesContainer.appendChild(companyElement);
        });
      }

      function saveSettings() {
        const PrivateJobNames = document.getElementById("settings_PrivateJobNames").checked;
        const PrivateSchoolNames = document.getElementById("settings_PrivateSchoolNames").checked;
        // Send the state to the server using AJAX or fetch API
        fetch(`/user/<%= user.id %>/settings`, {
            method: 'POST',
            body: JSON.stringify({
              settings_PrivateJobNames: PrivateJobNames,
              settings_PrivateSchoolNames: PrivateSchoolNames
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => {
            if (response.ok) {
              showBannerNotification('Settings saved successfully');
            } else {
              showBannerNotification('Failed to save settings');
            }
          })
          .catch(error => {
            console.error('An error occurred while saving settings:', error);
          });
      }
    </script>
  </main>
</body>

</html>