<!DOCTYPE html>
<html>

<head>
  <title>CORE - <%= post.title %></title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <meta name="author" content="<%= post.user.name %>">

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="article" />
  <% if (post.title) { %>
  <meta name="twitter:title" content="<%= post.title %>" />

  <meta property="og:title" content="<%= post.title %>" />
  <% } %>
  <% if (post.content) { %>
  <meta name="description" content="<%= post.content.substring(0, 160) %>" />
  <meta property="og:description" content="<%= post.content.substring(0, 160) %>" />
  <meta name="twitter:description" content="<%= post.content.substring(0, 160) %>" />
  <% } %>

  <% if (post.tags) { %>
  <meta name="keywords" content="<%= post.tags.map(tag => tag.name).join(', ') %>" />
  <% } %>
  <meta property="og:image" content="<%= post.user.avatar || '/img/default-avatar.png' %>" />
  <meta property="og:url" content="https://getcore.dev/post/<%= post.id %>" />

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:image" content="<%= post.user.avatar || '/img/default-avatar.png' %>" />

  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/post.css" />
  <link rel="stylesheet" href="/css/post-formats.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />

  <link rel="shortcut icon" href="/img/core.png" />
  <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
  <link rel="stylesheet" id="hljs-style" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/styles/googlecode.min.css" media="(prefers-color-scheme: light), (prefers-color-scheme: no-preference)">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/styles/atom-one-dark.min.css" media="(prefers-color-scheme: dark)">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/highlight.min.js"></script>
</head>

<body>

  <%- include('partials/navbar', { pagePath: 'post' }) %>

  <main>

    <%- include('partials/com-btn-container', { }) %>

    <div class="main-container">
      <% if (post.deleted) { %>
      <div class="error-messages">
        <p>This post has been deleted</p>
      </div>
      <% } %>
      <% if (post.post_type != 'blog') { %>
      <% } %>
      <div class="post">
        <div class="header">
          <div class="title">
            <%
              let postDate = new Date(post.created_at);
              let today = new Date();
              let formattedDate;
            
              // Calculate time difference in milliseconds
              let diff = today - postDate;
            
              // Convert time difference to different units
              let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
              let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
              let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
              let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
            
              // Decide the format based on the time difference
              if (minutes < 60) {
                formattedDate = minutes + 'm';
              } else if (hours < 24) {
                formattedDate = hours + 'h';
              } else if (days < 365) {
                formattedDate = days + 'd';
              } else {
                formattedDate = years + 'y';
              }
              %>
            <span class="post-title-navigator">
              <a id="community-header-text" href="/networks/<%= post.community.shortname %>"><%= post.community.shortname.toLowerCase() %></a>
              <span>
                /
              </span>

              <a href="/user/<%= post.user.username %>" id="blog-username">
                <%= post.user.username %>
              </a>
            </span>

            <div class="post-title-container">

              <div>
                <h2 class="post-title" style="font-size: 1.35rem;font-weight: bold;margin-bottom: .05rem;"><%= post.title %>
                </h2>

                <% if (post.post_type == "blog") { %>
                <div class="post-subtitle-text">
                  <p><%= post.subtitle %></p>
                </div>
                <% } %>
              </div>
            </div>
            <div class="post-info-container margin-06-bottom secondary-text sub-text">
              <div class="post-views-container">
                <span class="material-symbols-outlined">visibility</span>
                <span class="post-views"><%= post.views %></span>
              </div>
              <span style="font-size:.7rem;">•</span>
              <div class="post-comments-container">
                <span class="material-symbols-outlined">comment</span>
                <span class="post-comments">

                  <% 
                        function countAllReplies(replies) {
                          if (!replies || replies.length === 0) return 0;
                          let total = 0;
                          for (const reply of replies) {
                            total += 1 + countAllReplies(reply.replies);
                          }
                          return total;
                        }
                        const totalReplies = countAllReplies(post.comments);
                      %><%= String(totalReplies).trim() %>
                </span>
              </div>
              <span style="font-size:.7rem;">•</span>
              <div class="post-reactions-container">
                <span class="material-symbols-outlined">bolt</span>
                <span class="post-reactions">
                  <% const reactionTypes = [
                    { type: "LOVE", icon: "❤️" },
                    { type: "LIKE", icon: "👍" },
                    { type: "CURIOUS", icon: "🤔" },
                    { type: "DISLIKE", icon: "👎" }
                  ]; %>
                  <% let totalReactions = 0; %>
                  <% reactionTypes.forEach(reaction => { %>
                  <% totalReactions += post[reaction.type.toLowerCase() + 'Count']; %>
                  <% }); %>
                  <%= totalReactions %>
                </span>
              </div>
              <span style="font-size:.7rem;">•</span>
              <div class="post-timestamp-container">
                <span class="material-symbols-outlined">today</span>
                <span class="post-time">
                  <% postDate = new Date(post.created_at); %>
                  <%
                function formatRelativeDate(dateString) {
                  const now = new Date();
                  const postedDate = new Date(dateString);
                  const diffTime = Math.abs(now - postedDate);
                  const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
                  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
                  const diffMonths = Math.floor(diffDays / 30);
                  const diffYears = Math.floor(diffDays / 365);

                  if (diffYears > 0) {
                    return `${diffYears}y`;
                  } else if (diffMonths > 0) {
                    return `${diffMonths}m`;
                  } else if (diffDays > 0) {
                    return `${diffDays}d`;
                  } else if (diffHours > 0) {
                    return `${diffHours}h`;
                  } else {
                    return 'Just now';
                  }
                }
                %>

                  <%formattedPostDate = formatRelativeDate(postDate);%>
                  <%= formattedPostDate %>
                </span>
              </div>
            </div>

          </div>

        </div>
        <div class="post-information margin-1-bottom">

          <div class="post-userinfo">
            <div class="blog-post-info">
              <img src="<%= post.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="blog-avatar" onclick="window.location.href = '/user/<%= post.user.username %>'" />
              <div class="post-user-info">
                <span class="post-user-info-span main-text">
                  <a href="/user/<%= post.user.username %>" id="blog-username">
                    <% if (post.user.firstname && post.user.lastname) { %>
                    <%= post.user.firstname %> <%= post.user.lastname %>
                    <% } else { %>
                    <%= post.user.username %>
                    <% } %>

                  </a>
                  <% if (post.user.verified) { %>
                  <span>
                    <span class="material-symbols-outlined" style="padding: 0;font-size: .85rem;color: #169da8;">verified_user</span>
                  </span>
                  <% } %>
                </span>
              </div>


              <% if (user && user.username !== post.user.username) { %>
              <button class="regular-button-normal margin-l-auto" data-username="<%= post.user.username %>" onclick="followUser('<%= post.user.id %>')">
                <span class="material-symbols-outlined">person_add</span>
                <p class="bold">Follow</p>
              </button>
              <% } else { %>
              <button class="regular-button-normal margin-l-auto" onclick="window.location.href = '/user/<%= post.user.username %>'">
                <span class="material-symbols-outlined">person</span>
                <p class="bold">Profile</p>
              </button>
              <% } %>
            </div>
            <div class="post-userinfo2">
            </div>



          </div>
        </div>
        <div class="post-container">

          <div class="post-content" style="
            <% if (post.post_type == 'blog') { %>
            background-color: rgba(0, 0, 0, 0.00);
            border: 0;
            padding: 0;
            <% } %>
            ">

            <div class="post-body" style="
                ">
              <% if ((post.post_type == 'post' && !post.linkPreview) || post.post_type == 'project' || post.post_type == 'blog' || post.post_type == 'question' || (post.post_type == 'discussion' && !post.linkPreview)) { %>
              <% if (post.post_type == 'project') { %>
              <% 
                    let gitHubData;
                    let gitHubCommitData;
                    try {
                      gitHubData = JSON.parse(post.gitHubLinkPreview.raw_json);
                      gitHubCommitData = JSON.parse(post.gitHubLinkPreview.raw_commits_json);
                    } catch(e) {
                      console.error('Error parsing JSON', e);
                      gitHubData = {}; // Set a default empty object in case of error
                      gitHubCommitData = {};
                    }
                    function formatDate(dateString) {
                      const date = new Date(dateString);
                      const month = String(date.getMonth() + 1).padStart(2, '0');
                      const day = String(date.getDate()).padStart(2, '0');
                      const year = date.getFullYear();
                      return `${month}/${day}/${year}`;
                    }
                  %>
              <div class="project-link">
                <div class="project-link-body margin-06-bottom">

                  <div class="project-link-image">
                    <img src="<%= gitHubData.owner.avatar_url %>" alt="Preview" class="large-preview-image" />
                  </div>
                  <div class="project-link-header">
                    <a href="<%= post.link %>" class="project-link-title margin-06-bottom">
                      <img src="/src/github.png" alt="GitHub Logo" class="github-logo" style="display: inline-block; background-color: white; border-radius: 100%; height: 16px; width: 16px; aspect-ratio: 1/1; padding: 0; margin: 0; margin-right: 5px;" />
                      <%= post.link %>
                    </a>
                    <div class="project-link-info margin-06-bottom">
                      <h5 class="margin-03-bottom"><%= gitHubData.name %></h5>
                      <div class="project-link-description sub-text secondary-text">
                        <%= gitHubData.description %>
                      </div>
                      <span><%= gitHubData.license %></span>
                    </div>

                  </div>
                </div>
                <div class="project-link-stats sub-text secondary-text">
                  <span class="tag-flair"><span class="material-symbols-outlined">code</span><%= gitHubData.language %></span>
                  <span class="tag-flair"><span class="material-symbols-outlined">bug_report</span><%= gitHubData.open_issues %></span>
                  <span class="tag-flair"><span class="material-symbols-outlined">star</span><%= gitHubData.stargazers_count %> stars</span>
                  <span class="tag-flair"><span class="material-symbols-outlined">fork_right</span><%= gitHubData.forks %> forks</span>
                  <span class="tag-flair"><span class="material-symbols-outlined">update</span><%= gitHubData.updated_at.substring(0, 10) %></span>
                </div>
              </div>

              <% } %>

              <% if (post.post_type == 'question' && post.solution) { %>
              <div class="solution">
                <div class="solution-header">
                  <div class="solution-avatar">
                    <img src="<%= post.solution.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar" />
                  </div>
                  <div class="solution-username">
                    <a href="/user/<%= post.solution.user.username %>"><%= post.solution.user.username %></a>
                    <span class="secondary-text">answered</span>
                  </div>
                  <div class="accepted-badge" style="margin-left: auto">Accepted Solution</div>

                </div>
                <div class="solution-body">
                  <%- post.solution.comment %>
                </div>
              </div>
              <% } %>
              <% } else if ((post.post_type == 'post' || post.post_type == 'discussion') && post.linkPreview) { %>

              <div class="discussion-link" onclick="window.location.href='<%= post.link %>'">
                <% let imageUrl = post.linkPreview.image || post.linkPreview.favicon; %>
                <% if (imageUrl) { %>
                <div class="link-image">
                  <img src="<%= imageUrl %>" alt="Preview" class="large-preview-image" />
                </div>
                <% } %>

                <div class="link-info" onclick="window.location.href='<%= encodeURIComponent(post.link) %>'">
                  <div class="link-info-url"><%= post.linkPreview.url %></div>
                  <div class="link-info-title">
                    <h3><%= post.linkPreview.title %></h3>
                  </div>
                  <div class="link-info-description" id="secondary-text"><%= post.linkPreview.description.substring(0, 100) %></div>
                </div>
              </div>
              <% } %>
              <%- post.content %>

              <% if (post.updated_at) { %>
              <p class="post-updatedat secondary-text"><%
                    let editedDate = new Date(post.updated_at);
                    let today = new Date();
                    let formattedDate;
                  
                    // Calculate time difference in milliseconds
                    let diff = today - editedDate;
                  
                    // Convert time difference to different units
                    let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
                    let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
                    let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
                    let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year
                  
                    // Decide the format based on the time difference
                    if (minutes < 60) {
                      formattedDate = minutes + 'm';
                    } else if (hours < 24) {
                      formattedDate = hours + 'h';
                    } else if (days < 365) {
                      formattedDate = days + 'd';
                    } else {
                      formattedDate = years + 'y';
                    }
                    %>
                <span class="secondary-text">Edited: <%= formattedDate %></span>
              </p>
              <% } %>
              <div class="reaction-container">
                <div class="user-interactions post-user-interactions">
                  <div id="reactionPopup-post-<%= post.id %>" class="reaction-popup post-reaction-popup">
                    <div class="reaction-popup-content">
                      <% reactionTypes.forEach(reaction => { %>
                      <button class="reaction-button-popup<% if (post.userReaction == reaction.type) { %> active <% }%>" data-type="post" data-id="<%= post.id %>" data-reaction="<%= reaction.type %>" onclick="interactWithPost('<%= post.id %>', '<%= user %>', '<%= reaction.type %>')">
                        <%= reaction.icon %>

                        <span class="reaction-count"><%= post[reaction.type.toLowerCase() + 'Count'] %></span>
                      </button>
                      <% }); %>
                    </div>
                  </div>
                  <button class="mainReactionButton null-button-normal reaction-button<% if (post.userReaction) { %> active <% } %>" data-type="post" data-id="<%= post.id %>">
                    <% if (post.userReaction) { %>
                    <% if (post.userReaction == "B") { post.userReaction = "BOOST"; } %>
                    <% if (post.userReaction != null && reactionTypes.find(reaction => reaction.type === post.userReaction)) { %>
                    <span class="reaction-emote <%= post.id %>" id="secondary-text">
                      <%= reactionTypes.find(reaction => reaction.type === post.userReaction).icon %>
                    </span>
                    <% } else { %>
                    <span class="reaction-emote <%= post.id %>" id="secondary-text"><span class="material-symbols-outlined">thumb_up</span></span>
                    <% } %>
                    <% } else { %>
                    <span class="reaction-emote <%= post.id %>" id="secondary-text"><span class="material-symbols-outlined">thumb_up</span></span>
                    <% } %>

                    <% totalReactions = 0; %>
                    <% reactionTypes.forEach(reaction => { %>
                    <% totalReactions += post[reaction.type.toLowerCase() + 'Count']; %>
                    <% }); %>
                    <% if (totalReactions > 0) { %>
                    <span id="secondary-text" class="total-reactions-count-<%= post.id %>"><%= totalReactions %> </span>
                    <% } else { %>
                    <span id="secondary-text" class="total-reactions-count <%= post.id %>">0 </span>
                    <% } %>
                  </button>

                  <% if (!post.deleted && !post.isLocked) { %>


                  <button class="null-button-normal reaction-button" onclick="<% if (user) { %>showCommentForm()<% } else { %>window.location.href = '/login';<% } %>">
                    <span class="reaction-emote" id="secondary-text"><span class="material-symbols-outlined">chat_bubble</span></span>
                    <span id="secondary-text">
                      <% 
                        function countAllReplies(replies) {
                          if (!replies || replies.length === 0) return 0;
                          let total = 0;
                          for (const reply of replies) {
                            total += 1 + countAllReplies(reply.replies);
                          }
                          return total;
                        }
                        const totalReplies = countAllReplies(post.comments);
                      %><%= String(totalReplies).trim() %>
                    </span>
                  </button>


                  <% } %>


                  <button class="null-button-normal" id="favorite-button" onclick="favorite('<%= post.id %>')">
                    <span class="material-symbols-outlined">favorite</span>
                  </button>
                  <button class="null-button-normal" id="share-button" onclick="share('<%= post.title %>', '', 'https://getcore.dev/posts/<%= post.id %>', 'post', '<%= post.id%>')">
                    <span class="material-symbols-outlined">ios_share</span> <%= post.share_count ? post.share_count : 0 %>
                  </button>
                  <% if (user && user.isAdmin) { %>
                  <div class="dropdown">
                    <button class="null-button-normal" onclick="showDropdown(event)">
                      <span class="material-symbols-outlined">more_horiz</span>
                    </button>
                    <div class="dropdown-content" style="display: none;">
                      <div class="dropdown-item">
                        <button onclick="adminDeletePost('<%= post.id %>')">
                          <span style="color: red;" class="material-symbols-outlined">
                            gavel
                          </span>
                          <strong style="color: red;">
                            <p>Admin Delete (Logged)</p>
                          </strong>
                        </button>
                      </div>
                      <% if (!post.deleted && !post.isLocked) { %>
                      <% if (user && user.username === post.username) { %>
                      <div class="dropdown-item">
                        <button onclick="window.location.href='/posts/<%= post.id %>/edit'">
                          Edit
                        </button>
                      </div>
                      <% } %>
                      <% } %>

                      <% if (!post.deleted) { %>
                      <% if (user && user.username === post.username) { %>
                      <div class="dropdown-item">

                        <button onclick="deletePost('<%= post.id %>')">
                          Delete
                        </button>
                      </div>
                      <% } %>
                      <% } %>

                      <div class="dropdown-item">
                        <span>
                          <button onclick="toggleLockPost('<%= post.id %>')">
                            <span class="material-symbols-outlined">
                              lock
                            </span>
                            <p>Lock Post</p>
                          </button>
                        </span>
                      </div>
                    </div>
                  </div>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="comments-section">
          <% if (post.isLocked) { %>
          <div class="caution-messages">
            <p>This post has been locked from new comments</p>
          </div>
          <% } %>

          <% let curUser = user; %>
          <% if (curUser) { %>
          <div class="comment-form" style="display: none;">
            <form action="/posts/<%= post.id %>/comments" method="POST">
              <textarea id="comment-form-textarea" name="comment"></textarea>
              <div class="button-container">
                <button type="button" id="cancel-button-normal">Cancel</button>
                <button type="submit" id="submit-button-normal" class="fab">Submit</button>
              </div>
            </form>
          </div>
          <% } %>

          <% function renderComments(comments, level = 0) { %>
          <% const sortedComments = comments.sort((a, b) => b.isPinned - a.isPinned); %>
          <% sortedComments.forEach(comment => { %>
          <div class="comment-with-replies <%= level === 0 ? 'top-level' : '' %>">
            <div class="comment level-<%= level %>">

              <div class="comment-main">
                <div class="comment-content">
                  <div class="comment-header" onclick="toggleNestedComments('<%= comment.id %>')">
                    <div class="comment-avatar">
                      <img src="<%= comment.user.avatar || '/img/default-avatar.png' %>" alt="Avatar" class="avatar" onclick="window.location.href = '/user/<%= comment.user.username %>'; event.stopPropagation();" />
                    </div>
                    <a class="comment-user-info" href="/user/<%= comment.user.username %>" onclick="event.stopPropagation()">
                      <div class="repliers-info">
                        <span><%= comment.user.username %></span>
                        <% if (comment.user.username == post.user.username) { %>
                        <span class="tag author-tag comment-tag">OP</span>
                        <% } else if (comment.user.isAdmin) { %>
                        <span class="tag admin-tag comment-tag">ADMIN</span>
                        <% } %>
                      </div>
                    </a>
                    <% 
                let commentDate = new Date(comment.created_at);
                let currentDate = new Date();
                let timeDifference = currentDate - commentDate;
                let minutes = Math.floor(timeDifference / 60000);
                let hours = Math.floor(minutes / 60);
                let days = Math.floor(hours / 24);
                let timeSinceComment = '';

                if (days > 0) {
                  timeSinceComment = days + 'd';
                } else if (hours > 0) {
                  timeSinceComment = hours + 'h';
                } else if (minutes > 0) {
                  timeSinceComment = minutes + 'm';
                } else {
                  timeSinceComment = 'Just now';
                }
                %>

                    <span class="comment-timestamp" id="secondary-text"><%= timeSinceComment %></span>
                    <% if (comment.isPinned) { %>
                    <span class="tag comment-tag pinned-comment">
                      <span class="material-symbols-outlined" id="secondary-text" style="color:#ffdf34;">push_pin</span>
                    </span>
                    <% } %>


                  </div>
                  <% if (user) { %>
                  <div class="dropdown-<%= comment.id %>" style="position: relative; display: inline-block;">
                    <button class="dropbtn" onclick="showDropdown(event)" style="z-index:0;">
                      <span class="material-symbols-outlined" style="z-index:0;">more_horiz</span>
                    </button>
                    <div class="dropdown-content" style="display: none;">
                      <!-- Dropdown menu items -->
                      <% if (user && post.username === user.username && post.post_type == 'question') { %>
                      <span>
                        <form id="answer-form-<%= comment.id %>" action="/posts/<%= post.id %>/answer/<%= comment.id %>" method="POST">
                          <button type="submit">
                            <span class="material-symbols-outlined">check</span>
                            <p style="color: green">Accept</p>
                          </button>
                        </form>
                      </span>
                      <% } %>
                      <% if (user) { %>
                      <span>
                        <form id="favorite-form-<%= comment.id %>" action="/favorites/comment/<%= post.id %>/<%= comment.id %>" method="POST">
                          <button type="submit">
                            <span class="material-symbols-outlined">favorite</span>
                            <p>Favorite</p>
                          </button>
                        </form>
                      </span>
                      <% } %>
                      <% if (user && user.username === comment.user.username) { %>
                      <span>
                        <form id="delete-comment-form-<%= comment.id %>" class="reactionButton" action="/comment/<%= comment.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                          <input type="hidden" name="_method" value="DELETE" />
                          <button type="submit" class="delete-comment-button-<%= comment.id %>">
                            <span style="color: red" class="material-symbols-outlined">delete</span>
                            <strong style="color: red">Delete</strong>
                          </button>
                        </form>
                      </span>
                      <% } %>
                      <% if (user && user.username == post.username) { %>
                      <span>
                        <form id="pin-comment-form-<%= comment.id %>" action="/comment/<%= comment.id %>/toggle-pin" method="POST">
                          <button type="submit">
                            <span class="material-symbols-outlined" style="color:#ffdf34;">push_pin</span>
                            <p>Pin</p>
                          </button>
                        </form>
                      </span>
                      <% } %>
                      <% if (user && user.isAdmin) { %>
                      <span>
                        <form id="admin-delete-comment-form-<%= comment.id %>" class="reactionButton" action="/admin/comment/<%= comment.id %>?_method=DELETE" method="POST">
                          <input type="hidden" name="_method" value="DELETE" />
                          <button type="submit" class="admin-delete-comment-button-<%= comment.id %>">
                            <span style="color: red" class="material-symbols-outlined">gavel</span>
                            <strong style="color: red">Admin Delete (Logged)</strong>
                          </button>
                        </form>
                      </span>
                      <% } %>
                    </div>
                  </div>
                  <% } %>
                </div>
                <div class="comment-body">
                  <p><%- linkify(comment.comment) %></p>
                </div>
              </div>
            </div>
            <script>
              document.getElementById('admin-delete-comment-form-<%= comment.id %>').addEventListener('submit', function (e) {
                e.preventDefault();

                if (confirm('Are you sure you want to delete this comment?')) {
                  fetch(this.action, {
                      method: 'POST',
                      body: new FormData(this),
                      headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                      }
                    })
                    .then(response => response.json())
                    .then(data => {
                      showBannerNotification(data.message);
                      if (data.success) {
                        // Optionally, remove the comment from the DOM or update the UI
                        // For example: document.getElementById('comment-<%= comment.id %>').remove();
                      }
                    })
                    .catch(error => {
                      console.error('Error:', error);
                      showBannerNotification({
                        error: 'An error occurred while deleting the comment.'
                      });
                    });
                }
              });
            </script>

            <div class="user-actions <%= comment.id %>">
              <% const reactionTypes = [
                  { type: "LOVE", icon: "❤️" },
                  { type: "LIKE", icon: "👍" },
                  { type: "CURIOUS", icon: "🤔" },
                  { type: "DISLIKE", icon: "👎" }
                ]; %>
              <div class="comment-user-interactions <%= comment.id %>" data-type="comment" data-id="<%= comment.id %>">
                <% if (!post.deleted && !post.isLocked) { %>

                <div class="replies">

                  <a href="#" class="secondary-text reply-button" id="reply-button-<%= comment.id %>" onclick="<% if (user) { %>showReplyForm('<%= comment.id %>', event)<% } else { %>window.location.href = '/login';<% } %>">
                    Reply
                  </a>

                </div>

                <% } %>

                <button class="commentMainReactionButton null-button-normal reaction-button <% if (comment.userReaction) { %> active <% }%>" data-type="comment" data-id="<%= comment.id %>">
                  <% if (comment.userReaction) { %>

                  <% if (comment.userReaction == "B") {
                  comment.userReaction = "BOOST";
                  } %>

                  <% if (comment.userReaction != null && reactionTypes.find(reaction => reaction.type === comment.userReaction)) { %>
                  <span class="reaction-emote <%= comment.id %>" id="secondary-text">
                    <%= reactionTypes.find(reaction => reaction.type === comment.userReaction).icon %>
                  </span>
                  <% } else { %>
                  <span class="reaction-emote <%= comment.id %>" id="secondary-text"><span class="material-symbols-outlined">thumb_up</span></span>
                  <% } %>
                  <% } else { %>
                  <span class="reaction-emote <%= comment.id %>" id="secondary-text"><span class="material-symbols-outlined">thumb_up</span></span>
                  <% } %>

                  <% let totalReactions = 0; %>
                  <% reactionTypes.forEach(reaction => { %>
                  <% totalReactions += comment[reaction.type.toLowerCase() + 'Count']; %>
                  <% }); %>
                  <span id="secondary-text" class="total-reactions-count-comment-<%= comment.id %>"><%= totalReactions %></span>

                </button>
                <div id="reactionPopup-comment-<%= comment.id %>" class="reaction-popup comment-reaction-popup" style="display:block; opacity:0; position: sticky;left: 0; <% if (post.post_type == "discussion") { %> bottom: 30px; <% } else { %> bottom: 37px; <% } %>">

                  <div class="reaction-popup-content">
                    <% reactionTypes.forEach(reaction => { %>
                    <button class="reaction-button-popup<% if (comment.userReaction == reaction.type) { %> active <% }%>" data-type="comment" data-id="<%= comment.id %>" data-reaction="<%= reaction.type %>" onclick="interactWithComment('<%= post.id%>', '<%= comment.id %>', '<%= user %>', '<%= reaction.type %>')">
                      <%= reaction.icon %>
                      <span class="reaction-count"><%= comment[reaction.type.toLowerCase() + 'Count'] %></span>
                    </button>
                    <% }); %>
                  </div>
                </div>

              </div>

            </div>

            <div class="reply-form">
              <form id="reply-form-<%= comment.id %>" action="/comments/<%= comment.id %>/replies" method="POST" style="display: none">
                <div class="input-container margin-06-bottom">
                  <textarea id="comment-<%= comment.id %>" name="comment" rows="6" required maxlength="500" placeholder="Reply to <%= comment.user.username %>"></textarea>
                  <div class="reply-buttons" id="reply-buttons-<%= comment.id %>" style="display: none;">
                    <button id="cancel-button-normal" type="button" class="fab" onclick="showReplyForm('<%= comment.id %>', event)">Cancel</button>
                    <button id="submit-button-normal" type="submit" class="fab">Submit</button>
                  </div>
                </div>
              </form>
            </div>

            <% if (comment.replies && comment.replies.length > 0) { %>
            <% const nestedLevel = level + 1; %>
            <% const maxDisplayLevel = 5; %>
            <div class="nested-comments level-<%= Math.min(nestedLevel, 6) %>" id="nested-comments-<%= comment.id %>" style="display: <%= nestedLevel <= maxDisplayLevel ? 'block' : 'none' %>;">
              <% renderComments(comment.replies, nestedLevel); %>
            </div>

            <% } %>
          </div>
          <% }); %>
          <% } %>

          <% if (post.comments.length === 0) { %>
          <div class="no-comments">
            No comments yet, start a discussion!
          </div>
          <% } else { %>
          <% renderComments(post.comments); %>
          <% } %>
        </div>
        <% if (post.tags && post.tags.length > 0) { %>
        <div class="header">
          <h3 class="secondary-text sub-text margin-06-bottom">Tags</h3>
        </div>
        <div class="blog-tags-div">
          <div class="tags">
            <% post.tags.forEach(tag => { %>
            <span class="tag" onclick="window.location.href='/tags/<%= tag.name %>'">
              <p><%= tag.name %></p>
            </span>
            <% }); %>
            <% if (post.post_type == "project") { %>
            <% let gitHubData = post.gitHubLinkPreview ? JSON.parse(post.gitHubLinkPreview.raw_json) : {}; %>
            <% if (gitHubData.topics && gitHubData.topics.length > 0) { %>
            <% gitHubData.topics.forEach(topic => { %>
            <span class="tag" onclick="window.location.href='/tags/<%= topic %>'">
              <p><%= topic %></p>
            </span>
            <% }); %>
            <% } %>
            <% } %>
          </div>
        </div>
        <% } %>
        <% if (similarPosts.length > 0) { %>

        <div class="similar-posts">
          <h3 class="sub-text" id="secondary-text">Explore</h3>
          <% similarPosts.forEach(similarPost => { %>
          <div class="post" onclick="window.location.href='/posts/<%= similarPost.id %>'">
            <div class="post-content">
              <div class="post-header">
                <% 
            function formatDate(date) {
              let postDate = new Date(date);
              let today = new Date();
              let formattedDate;

              let diff = today - postDate;

              let minutes = Math.floor(diff / 60000); 
              let hours = Math.floor(diff / 3600000); 
              let days = Math.floor(diff / 86400000); 
              let years = Math.floor(diff / 31536000000); 

              if (minutes < 60) {
                formattedDate = minutes + ' m';
              } else if (hours < 24) {
                formattedDate = hours + ' h';
              } else if (days < 365) {
                formattedDate = days + ' d';
              } else {
                formattedDate = years + ' y';
              }
              return formattedDate;
            }
          %>
                <div class="post-header-username">
                  <div class="avatar">
                    <img src="<%= similarPost.avatar %>" loading="lazy">
                  </div>
                  <div class="username">
                    <p>
                      <a href="/user/<%= similarPost.username %>" class="username-link"><strong><%= similarPost.username %></strong></a>
                      <span id="secondary-text">
                        in
                      </span>
                      <a style="color: <%= similarPost.community_color %>;" href="/networks/<%= similarPost.community_shortname %>" class="community">/<%= similarPost.community_shortname %></a>
                      <span id="secondary-text">
                        <%= formatDate(similarPost.created_at) %>
                      </span>
                    </p>
                  </div>
                </div>
                <div class="dropdown">
                  <button class="dropbtn" onclick="showDropdown(event)">
                    <span class="material-symbols-outlined">more_horiz</span>
                  </button>
                  <div class="dropdown-content" style="display: none;">
                    <% if (user) { %>
                    <div class="dropdown-item">
                      <span>
                        <form id="favorite-form-<%= similarPost.id %>" action="/favorites/post/<%= similarPost.id %>" method="POST">
                          <button type="submit">Favorite Post</button>
                        </form>
                      </span>
                    </div>
                    <% } %>
                    <div class="dropdown-item">
                      <button onclick="share('<%= similarPost.title %>', '', 'https://getcore.dev/posts/<%= similarPost.id %>')">
                        <p>Share Post</p>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div class="title">
                <a href="/posts/<%= similarPost.id %>">
                  <%= similarPost.title %>
                </a>
              </div>
              <div class="link-preview" style="<% if (similarPost.link) { %> flex-direction: column; <% } %>">
                <% if (similarPost.link) { %>
                <div class="link">
                  <div class="similar-link-preview" id="similar-link-preview-<%= similarPost.id %>"></div>
                  <script>
                    (function fetchLinkPreview(link, containerId) {
                      fetch(`/api/link-preview/${encodeURIComponent(link)}`)
                        .then(response => response.json())
                        .then(linkPreview => {
                          if (linkPreview) {
                            let imageUrl = linkPreview.image || linkPreview.favicon;
                            let htmlContent = `
                        <div class="mini-link">
                          <div class="mini-link-image">
                            ${imageUrl ? `<img loading="lazy" src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
                          </div>
                          <div class="mini-link-body">
                            <div class="mini-link-body-header">
                              <div class="mini-link-favicon">
                                <img src="${linkPreview.favicon}" alt="" class="favicon" />
                              </div>
                              <div class="mini-link-url" id="main-text"><a>${new URL(linkPreview.url || '').hostname || ''}</a></div>
                            </div>
                            <div class="mini-link-title"><p>${linkPreview.title || ''}</p></div>
                            <div class="mini-link-description"><p>${linkPreview.description || ''}</p></div>
                          </div>
                        </div>`;
                            document.getElementById(containerId).innerHTML = htmlContent;
                          }
                        });
                    })('<%= similarPost.link %>', 'similar-link-preview-<%= similarPost.id %>');
                  </script>
                </div>

                <% } %>
              </div>
              <% 
            let imageUrl;
            const imageUrlMatch = similarPost.content.match(/!\[.*?\]\((.*?)\)/);
            if (imageUrlMatch && imageUrlMatch[1]) {
              imageUrl = imageUrlMatch[1];
            }
          %>
              <% if (imageUrl) { %>
              <div class="image">
                <img class="thumbnail-image" src="<%= imageUrl %>" alt="Preview" />
              </div>
              <% } %>
              <% if (similarPost.post_type !== 'question' && (!similarPost.link || (similarPost.post_type !== 'post' && similarPost.post_type !== 'project'))) { %>
              <div class="description">
                <%
              let contentWithoutMarkdown = similarPost.content
                .replace(/(?:\r\n|\r|\n)/g, ' ')
                .replace(/\*\*(.*?)\*\*/g, '$1')
                .replace(/\*(.*?)\*/g, '$1')
                .replace(/__(.*?)__/g, '$1')
                .replace(/_(.*?)_/g, '$1')
                .replace(/!\[.*?\]\(.*?\)/g, '')
                .replace(/\[.*?\]\(.*?\)/g, '$1');
            %>
                <%- contentWithoutMarkdown %>
              </div>
              <% } %>

              <div class="votes">
                <div class="reaction-interactions <%= similarPost.id %>-reactions" id="reaction-interactions <%= similarPost.id %>-reactions">
                  <%= similarPost.totalReactionCount %> reactions
                </div>
                <div class="comments">
                  <%= similarPost.commentCount %> comment<%= similarPost.commentCount > 1 ? 's' : '' %>
                </div>
              </div>
            </div>
          </div>
          <% }) %>
        </div>
        <% } %>
        <div class="mobile-jobs-container">
          <div class="jobslist">

          </div>
        </div>

      </div>
      <%- include('partials/footer') %>

    </div>
    <%- include('partials/right-side-container') %>


  </main>

  <script>
    // Function to handle favoriting a post
    function favorite(postId) {
      fetch(`/favorites/post/${postId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        })
        .then(response => {
          if (!response.ok) {
            if (response.status === 401) {
              // Unauthorized, user needs to log in
              window.location.href = '/login';
              throw new Error('Please log in to favorite posts');
            }
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          const favoriteButton = document.querySelector(`button[onclick="favorite('${postId}')"]`);
          if (data.success) {
            checkFavorite(postId);
            showBannerNotification(data.message);
          } else {
            showBannerNotification('Error updating favorite status');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showBannerNotification(error.message || 'An error occurred while updating favorite status');
        });
    }

    // Function to check if a post is favorited and update the button accordingly
    function checkFavorite(postId) {
      fetch(`/favorites/isFavorite/post/${postId}`)
        .then(response => response.json())
        .then(data => {
          const favoriteButton = document.querySelector(`button[onclick="favorite('${postId}')"]`);
          if (favoriteButton) {
            if (data.isFavorite) {
              favoriteButton.innerHTML = '<span class="material-symbols-outlined">heart_minus</span>';
            } else {
              favoriteButton.innerHTML = '<span class="material-symbols-outlined">favorite</span>';
            }
          }
        })
        .catch(error => {
          console.error('Error checking favorite status:', error);
        });
    }

    // Call checkFavorite when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      const postId = '<%= post.id %>'; // Assuming you have access to the post ID in your EJS template
      checkFavorite(postId);
      checkFollowing('<%= post.user.id %>');
    });

    // Function to handle deleting a post
    function deletePost(postId) {
      if (confirm('Are you sure you want to delete this post?')) {
        fetch(`/post/${postId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              showBannerNotification('Post deleted successfully');
              window.location.href = '/';
            } else {
              showBannerNotification(data.message || 'Error deleting post');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showBannerNotification('An error occurred while deleting the post');
          });
      }
    }

    function toggleNestedComments(commentId) {
      const nestedComments = document.getElementById(`nested-comments-${commentId}`);
      const button = nestedComments.nextElementSibling;

      if (nestedComments.style.display === 'none') {
        nestedComments.style.display = 'block';
        button.textContent = 'Hide replies';
      } else {
        nestedComments.style.display = 'none';
        button.textContent = 'Show more replies';
      }
    }

    // Function to handle admin deletion of a post
    function adminDeletePost(postId) {
      if (confirm('Are you sure you want to delete this post as an admin?')) {
        fetch(`/admin/post/${postId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showBannerNotification('Post deleted by admin successfully');
              // Redirect to home page or remove the post from the DOM
              window.location.href = '/';
            } else {
              showBannerNotification('Error deleting post');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showBannerNotification('An error occurred while deleting the post');
          });
      }
    }

    // Function to handle toggling the lock status of a post
    function toggleLockPost(postId) {
      fetch(`/admin/post/${postId}/toggle-lock`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const lockButton = document.querySelector(`#lock-form-${postId} button`);
            lockButton.textContent = data.isLocked ? 'Unlock Post' : 'Lock Post';
            showBannerNotification(data.message);
          } else {
            showBannerNotification('Error toggling post lock status');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showBannerNotification('An error occurred while toggling post lock status');
        });
    }


    document.addEventListener('DOMContentLoaded', () => {
      // Using event delegation to ensure the listener works even if the element is dynamically added
      document.body.addEventListener('click', (event) => {
        if (event.target && event.target.id === 'share-button') {
          console.log('Share button clicked');
          event.stopPropagation(); // Stop the click from propagating to the document
          const postId = event.target.getAttribute('data-post-id');
          sharePost(event, postId);
        }
      });
    });

    document.addEventListener('DOMContentLoaded', () => {
      const commentReactionButtons = document.querySelectorAll('button.commentMainReactionButton');
      const userActionsDivs = document.querySelectorAll('.user-actions');
      const commentReactionPopups = document.querySelectorAll('.comment-reaction-popup');
      const postReactionPopup = document.querySelector('.reaction-popup.post-reaction-popup');
      console.log(postReactionPopup);
      postReactionPopup.style.transform = `translateX(-${postReactionPopup.offsetWidth + 8}px)`;

      // translate the userActionsDivs X to the right by the length of their corresponding comment reaction popup
      userActionsDivs.forEach((div, index) => {
        const popup = commentReactionPopups[index];
        div.style.transform = `translateX(${popup.offsetWidth + 8}px)`;
      });

      function closeAllPopups() {
        userActionsDivs.forEach((div, index) => {
          const popup = commentReactionPopups[index];
          div.style.transform = `translateX(${popup.offsetWidth + 8}px)`;
          popup.style.opacity = '0';
        });
      }

      commentReactionButtons.forEach(button => {
        button.addEventListener('click', (event) => {
          event.stopPropagation(); // Stop the click from propagating to the document
          const commentId = button.getAttribute('data-id');
          const userActionsDiv = document.querySelector(`.user-actions.${commentId}`);
          const popup = document.getElementById(`reactionPopup-comment-${commentId}`);
          if (userActionsDiv.style.transform === 'translateX(0px)') {
            userActionsDiv.style.transform = `translateX(${popup.offsetWidth + 8}px)`;
            popup.style.opacity = '0';
          } else {
            closeAllPopups(); // Close all other popups first
            userActionsDiv.style.transform = 'translateX(0px)';
            popup.style.opacity = '1';
          }
        });
      });

      // Add a click event listener to the document
      document.addEventListener('click', (event) => {
        // Check if the clicked element is not a comment reaction button
        if (!event.target.closest('button.commentMainReactionButton')) {
          closeAllPopups();
        }
      });

      document.querySelectorAll('form[id^="favorite-form-"]').forEach(form => {
        form.addEventListener('submit', async (event) => {
          event.preventDefault(); // Prevent the default form submission

          const formId = form.getAttribute('id');
          const postId = formId.split('-')[2];
          const url = `/favorites/post/${postId}`;



          try {
            const response = await fetch(url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({})
            });

            if (response.ok) {
              const result = await response.json();
              showBannerNotification(result.message);
            } else {
              showBannerNotification('Failed to favorite the post.');
            }
          } catch (error) {
            console.error('Error favoriting post:', error);
            showBannerNotification('An error occurred. Please try again.');
          }
        });
      });
    });


    $(document).ready(function () {
      var easyMDE = new EasyMDE({
        element: document.getElementById('comment-form-textarea'),
        placeholder: 'Reply to <%= post.user.username %>'

      });

      $('#cancel-button-normal').on('click', function () {
        easyMDE.value(''); // Clear the content of the EasyMDE editor
        $('.button-container').hide();
        $(this).closest('.input-container').find('textarea').hide(); // Hide the textarea within the input-container
        $(this).closest('.reply-buttons').hide(); // Hide the reply buttons
        $('.editor-toolbar').hide();
      });

      // Attach the submit event handler to the form
      $('comment-form-textarea').on('submit', function (e) {
        // Check if the EasyMDE editor is empty
        if (!easyMDE.value().trim()) {
          e.preventDefault(); // Prevent form submission
          showBannerNotification("Please fill in the content."); // Display an error message
          easyMDE.codemirror.focus(); // Focus the EasyMDE editor
        } else {
          // Save the content from EasyMDE to the textarea
          easyMDE.codemirror.save();

          // If link field is hidden, remove its value before submitting
          if ($('#link-field').is(':hidden')) {
            $('#link').val('');
          }
        }
      });
    });



    function showDropdown(event) {
      event.stopPropagation(); // Stop the click from propagating to the document

      // Find the dropdown content next to the clicked button
      var dropdownContent = event.currentTarget.nextElementSibling;

      // Check if the current dropdown is already open
      var isCurrentlyShown = dropdownContent.style.display === 'flex';

      // Close all dropdowns first
      closeAllDropdowns();

      // If the dropdown was not already open, open it
      if (!isCurrentlyShown) {
        dropdownContent.style.display = 'flex';
      }
    }

    // prevent clicking through dropdown content
    document.querySelectorAll('.dropdown-content').forEach(function (dropdown) {
      dropdown.addEventListener('click', function (event) {
        event.stopPropagation();
      });
    });

    function closeAllDropdowns() {
      const allDropdowns = document.querySelectorAll('.dropdown-content');
      allDropdowns.forEach(function (dropdown) {
        dropdown.style.display = 'none';
      });
    }

    document.addEventListener('click', closeAllDropdowns);

    function showReplyButtons(commentId) {
      // Show the reply buttons
      var replyButtons = document.getElementById('reply-buttons-' + commentId);
      replyButtons.style.display = 'flex';
    }

    function showCommentForm() {
      var commentForm = document.querySelector('.comment-form');

      if (commentForm.style.display === 'none') {
        commentForm.style.display = 'block';
      } else {
        commentForm.style.display = 'none';
      }
    }

    function cancelReply(commentId) {
      // Clear the textarea
      var textarea = document.getElementById('comment-' + commentId);
      textarea.value = '';
      textarea.rows = 1;

      // Hide the reply buttons
      var replyButtons = document.getElementById('reply-buttons-' + commentId);
      replyButtons.style.display = 'none';
    }

    document.addEventListener('DOMContentLoaded', function () {
      var editPostButton = document.getElementById('editPostButton');
      if (editPostButton) {
        editPostButton.addEventListener('click', function () {
          console.log('Edit button clicked');
          var postId = this.dataset.postId;
          window.location.href = '/posts/' + postId + '/edit';
        });
      }
    });

    function autoExpandTextarea(event) {
      event.target.style.height = 'inherit';
      event.target.style.height = `${event.target.scrollHeight}px`;
    }
    // JavaScript function to toggle nested comments
    function toggleNestedComments(commentId, level) {
      var nestedComments = document.getElementById('nested-comments-' + commentId);
      if (nestedComments) {
        var isDisplayed = nestedComments.style.display === 'block';
        nestedComments.style.display = isDisplayed ? 'none' : 'block'; // Toggle display

        // Change chevron direction based on visibility
        var chevron = nestedComments.previousElementSibling.querySelector('.chevron');
        if (chevron) {
          chevron.textContent = isDisplayed ? 'chevron_right' : 'expand_more';
        }

        // Optionally, if you want to hide all deeper nested comments when collapsing one,
        // you can add the following lines:
        if (isDisplayed) {
          var allNested = nestedComments.querySelectorAll('.nested-comment');
          allNested.forEach(function (nested) {
            nested.style.display = 'none'; // Hide all deeper nested comments
            // Reset all chevrons in deeper nested comments
            var innerChevrons = nested.previousElementSibling.querySelectorAll('.chevron');
            innerChevrons.forEach(function (chevron) {
              chevron.textContent = 'chevron_right';
            });
          });
        }
      }
    }



    function submitForm(formId, event) {
      event.preventDefault();
      var form = document.getElementById(formId);

      if (!form) {
        console.error("Form not found: " + formId);
        return false;
      }

      var isReplyForm = formId.startsWith("reply-form");

      var inputField;
      if (isReplyForm) {
        inputField = form.querySelector("textarea");
      } else {
        inputField = form.querySelector('input[name="comment"]');
      }

      // Check if the input field or textarea exists
      if (!inputField) {
        console.error("Input field not found in form: " + formId);
        return false;
      }

      // Validate input value
      if (inputField.value.trim() === "") {
        showBannerNotification("Your message cannot be empty.");
        return false;
      } else {
        // Submit the form
        form.submit();
      }
    }

    function interactWithPost(postId, user, action) {
      if (!user) {
        window.location.href = '/login';
        return;
      }

      fetch(`/posts/${postId}/react`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            action: action
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.userReaction !== undefined && data.reactionsMap !== undefined) {
            updateReactionUI(postId, data.userReaction, data.reactionsMap);
          } else {
            console.error('Server response does not contain expected data');
          }
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }

    function updateReactionUI(postId, userReaction, reactionsMap) {
      const mainButton = document.querySelector(`.mainReactionButton[data-type="post"][data-id="${postId}"]`);
      const buttonIcon = document.querySelector(`.reaction-emote.${postId}`);
      const popup = document.getElementById(`reactionPopup-post-${postId}`);
      const totalCountSpan = document.querySelector(`.total-reactions-count-${postId}`);
      console.log(buttonIcon);
      console.log(userReaction);
      console.log(reactionsMap);

      const reactionIcons = {
        "LOVE": "❤️",
        "LIKE": "👍",
        "CURIOUS": "🤔",
        "DISLIKE": "👎",
      };

      // Update main button
      if (userReaction && reactionIcons[userReaction]) {
        buttonIcon.textContent = reactionIcons[userReaction];
        mainButton.classList.add('active');
      } else {
        buttonIcon.innerHTML = '<span class="material-symbols-outlined">thumb_up</span>';
        mainButton.classList.remove('active');
      }

      // Update reaction buttons in popup
      const buttons = popup.querySelectorAll('.reaction-button-popup');
      buttons.forEach(button => {
        const reaction = button.dataset.reaction;
        button.classList.toggle('active', reaction === userReaction);
        const reactionCountSpan = button.querySelector('.reaction-count');
        reactionCountSpan.textContent = reactionsMap[reaction] || 0;
      });

      // Update total reaction count
      const totalReactions = Object.values(reactionsMap).reduce((a, b) => a + b, 0);
      console.log(totalReactions);
      totalCountSpan.textContent = `${totalReactions}`;
    }

    function interactWithComment(postId, commentId, user, action) {
      if (!user) {
        window.location.href = '/login';
        return;
      }

      fetch(`/react/posts/${postId}/comment/${commentId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            action: action
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.userReaction !== undefined && data.totalReactions !== undefined && data.reactionsMap !== undefined) {
            updateCommentReactionUI(commentId, data.totalReactions, data.reactionsMap);
          } else {
            console.error('Server response does not contain expected data');
          }
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }

    function updateCommentReactionUI(commentId, totalCommentReactionCount, reactionsMap) {
      const mainButton = document.querySelector(`.commentMainReactionButton[data-type="comment"][data-id="${commentId}"]`);
      const popup = document.getElementById(`reactionPopup-comment-${commentId}`);
      const reactionEmote = document.querySelector(`.reaction-emote.${commentId}`);
      const totalCountSpan = document.querySelector(`.total-reactions-count-comment-${commentId}`);
      console.log(mainButton);
      console.log(popup)
      console.log(totalCountSpan);

      const reactionIcons = {
        "LOVE": "❤️",
        "LIKE": "👍",
        "CURIOUS": "🤔",
        "DISLIKE": "👎",
      };

      // Update main button
      const userReaction = Object.keys(reactionsMap).find(key => reactionsMap[key] > 0);
      if (userReaction && reactionIcons[userReaction]) {
        reactionEmote.textContent = reactionIcons[userReaction];
        mainButton.classList.add('active');
      } else {
        reactionEmote.innerHTML = '<span class="material-symbols-outlined">thumb_up</span>';
        mainButton.classList.remove('active');
      }

      // Update reaction buttons in popup
      const buttons = popup.querySelectorAll('.reaction-button-popup');
      buttons.forEach(button => {
        const reaction = button.dataset.reaction;
        button.classList.toggle('active', reaction === userReaction);
        const reactionCountSpan = button.querySelector('.reaction-count');
        reactionCountSpan.textContent = reactionsMap[reaction] || 0;
      });

      // Update total reaction count
      totalCountSpan.textContent = `${totalCommentReactionCount}`;
    }

    function showReplyForm(commentId, event) {
      event.preventDefault();
      var form = document.getElementById("reply-form-" + commentId);
      form.style.display = form.style.display === "none" ? "block" : "none";
      showReplyButtons(commentId);
    }

    function confirmDeletion(element) {
      if (confirm('Are you sure you want to delete this post?')) {
        element.closest('form').submit();
        return true; // Optional: To indicate the action was confirmed
      }
      return false; // Prevent default action if not confirmed
    }

    function autoExpandTextarea(event) {
      event.target.style.height = 'inherit';
      event.target.style.height = `${event.target.scrollHeight}px`;
    }
    document.addEventListener("DOMContentLoaded", function () {
      const posts = document.querySelectorAll('.post-container');

      posts.forEach(post => {
        const content = post.querySelector('.post-content');
        const viewMore = post.querySelector('.view-more');

        if (content.scrollHeight > content.clientHeight) {
          // Content is longer than the max height
          viewMore.style.display = 'block';

          viewMore.addEventListener('click', function () {
            if (content.style.maxHeight) {
              // If max-height is set, remove it
              content.style.maxHeight = null;
              viewMore.textContent = 'View More';
            } else {
              // Set max-height to scrollHeight to expand
              content.style.maxHeight = content.scrollHeight + 'px';
              viewMore.textContent = 'View Less';
            }
          });
        }
      });
    });

    document.addEventListener("DOMContentLoaded", function () {
      var postContents = document.querySelectorAll('.post-content');

      postContents.forEach(function (postContent) {
        if (postContent.scrollHeight > postContent.clientHeight) {
          postContent.classList.add('overflow');
        }
      });

      document.querySelectorAll('.mainReactionButton').forEach(button => {
        button.addEventListener('click', (event) => {
          event.stopPropagation(); // Prevent the click from immediately triggering the document click handler

          // Determine which button was clicked
          const clickedButton = event.target;
          const buttonType = clickedButton.getAttribute('data-type');
          const buttonId = clickedButton.getAttribute('data-id');
          const popup = document.getElementById(`reactionPopup-${buttonType}-${buttonId}`);
          const userInteractionsDiv = document.querySelector('.post-user-interactions');

          if (!popup) {
            console.error('Reaction menu not found');
            return;
          }

          // Toggle the popup
          if (popup.style.opacity === '1') {
            // If the popup is visible, hide it
            popup.style.opacity = '0';
            userInteractionsDiv.style.transform = 'translateX(0)';

          } else {
            // If the popup is hidden, show it
            popup.style.opacity = '1';
            userInteractionsDiv.style.transform = `translateX(${popup.offsetWidth + 8}px)`;

          }
        });
      });

      // Add a click event listener to the document
      document.addEventListener('click', () => {
        const popups = document.querySelectorAll('[id^="reactionPopup-"]');
        const userInteractionsDiv = document.querySelector('.post-user-interactions');

        popups.forEach(popup => {
          popup.style.opacity = '0';
        });

        if (userInteractionsDiv) {
          const firstPopup = popups[0]; // Assuming all popups have the same width
          userInteractionsDiv.style.transform = firstPopup ? 'translateX(0)' : `translateX(${firstPopup.offsetWidth + 8}px)`;
        }
      });

      function closeAllDropdowns() {
        const allDropdowns = document.querySelectorAll('.reaction-popup');
      }

      document.addEventListener('click', function (event) {
        const withinBoundaries = event.composedPath().some(
          element => element.classList && element.classList.contains('reaction-popup') || element.classList && element.classList.contains('mainReactionButton')
        );

        if (!withinBoundaries) {
          closeAllDropdowns();
        }
      });
    });
  </script>


</body>

</html>