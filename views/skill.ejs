<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE - #<%= skill %></title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/tags.css" />
  <link rel="stylesheet" href="/css/search.css" />
  <link rel="stylesheet" href="/css/company_profile.css" />

  <link rel="shortcut icon" href="/img/core.png" />

  <!-- Meta Tags for SEO and Social Media -->
  <meta name="description" content="Search results for the tag <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta name="keywords" content="<%= skill %>, CORE, tag search, job search, post search">
  <meta name="robots" content="index, follow">

  <!-- Open Graph Meta Tags -->
  <meta property="og:title" content="CORE - skill Results for <%= skill %>">
  <meta property="og:description" content="Search results for the skill <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta property="og:image" content="/img/core.png"> <!-- Replace with a suitable image if needed -->
  <meta property="og:url" content="https://c-ore.dev/search/<%= skill %>">
  <meta property="og:type" content="website">

  <!-- Twitter Meta Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="CORE - skill Results for <%= skill %>">
  <meta name="twitter:description" content="Search results for the skill <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta name="twitter:image" content="/img/core.png"> <!-- Replace with a suitable image if needed -->
</head>
<style>
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="tag-search-header">
      <h4>Results for <span class="tag active"><%= skill %></span></h4>
    </div>
    <%
    function getTintFromName(name) {
        let hash = 0;
        for (let i = 0; i < name.length; i++) {
          hash = name.charCodeAt(i) + ((hash << 5) - hash);
        }
        hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

        // Convert hash to a hexadecimal string and pad with leading zeros
        const colorHex = ("00000" + hash.toString(16)).slice(-6);
        const tintColor = `#${colorHex}65`;

        // Blend with a desaturated base color (e.g., gray)
        const baseColor = "#808080"; // Light gray
        const blendedColor = blendColors(tintColor, baseColor, 0.5);
        return blendedColor;
    }

function getTintFromNameSecondary(name) {
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

  // Convert hash to a hexadecimal string and pad with leading zeros
  const colorHex = ("00000" + hash.toString(16)).slice(-6);
  const tintColor = `#${colorHex}`;

  // Blend with a desaturated base color (e.g., gray)
  const baseColor = "#404040"; // Dark gray
  const blendedColor = blendColors(tintColor, baseColor, 0.5);
  return blendedColor;
}

function blendColors(color1, color2, ratio) {
  const r1 = parseInt(color1.slice(1, 3), 16);
  const g1 = parseInt(color1.slice(3, 5), 16);
  const b1 = parseInt(color1.slice(5, 7), 16);

  const r2 = parseInt(color2.slice(1, 3), 16);
  const g2 = parseInt(color2.slice(3, 5), 16);
  const b2 = parseInt(color2.slice(5, 7), 16);

  const r = Math.round(r1 * ratio + r2 * (1 - ratio));
  const g = Math.round(g1 * ratio + g2 * (1 - ratio));
  const b = Math.round(b1 * ratio + b2 * (1 - ratio));

  const blendedColor = `#${r.toString(16).padStart(2, "0")}${g
    .toString(16)
    .padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
  return blendedColor;
}%>
    <% if (jobs.length > 0) { %>
    <div class="jobs">
      <% jobs.forEach((job) => { %>
      <div class="job" onclick="window.location.href='/jobs/<%= job.id %>'">
        <div class="job-preview">
          <div class="job-info">
            <div class="company-info">
              <img class="thumbnail thumbnail-tiny" src="<%= job.company_logo %>" alt="<%= job.company_name %> logo" />
              <p class="company-name"><%= job.company_name %></p>
            </div>
            <h3 class="job-title">
              <%= job.title %>
              <span style=""><%= job.experienceLevel[0].toUpperCase() + job.experienceLevel.slice(1) %></span>
            </h3>
            <span style="">USD $<%= Math.floor((job.salary + job.salary_max) / 2 / 1000) %>k</span>
            <span><%= job.location %></span>
            <div class="job-skills">
              <% (job.skills.split(',') || []).forEach(jobSkill => { %>

              <span class="tag <% if (jobSkill.trim() === skill) { %>active<% } %>" onclick="window.location.href='/skills/<%= jobSkill.trim() %>'">
                <p><%= jobSkill.trim() %></p>
              </span>
              <% }); %>
            </div>
          </div>
        </div>
      </div>
      <% }); %>
      <div id="load-more-container">
        <button id="load-more-btn" class="load-more-btn null-button">Load More</button>
      </div>
    </div>
    <% } else { %>
    <div class="jobs-header">
      <p>No jobs found.</p>
    </div>
    <% } %>

    <% if (posts.length > 0) { %>
    <div class="posts">
      <% posts.forEach((post) => { %>
      <div class="post" onclick="window.location.href='/posts/<%= post.id %>'">
        <div class="post-content">
          <div class="post-header">
            <% 
                    function formatDate(dateString) {
                    const date = new Date(dateString);
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    const year = date.getFullYear();
                    return `${month}/${day}/${year}`;
                  }
                  %>
            <div class="post-header-username">
              <div class="avatar">
                <img src="<%= post.avatar %>" loading="lazy">
              </div>
              <div class="username">
                <a href="/user/<%= post.username %>" class="username-link"><strong><%= post.username %></strong></a>
                <div class="post-date" id="secondary-text">
                  <a style="color: <%= post.community_color %>;" href="/networks/<%= post.communities_id %>" class="community"><%= post.community_name %></a>

                  <%= formatDate(post.created_at) %> â€¢ <%= post.views %> views
                </div>
              </div>
            </div>
            <div class="three-dots">
              <span class="material-symbols-outlined" style="font-weight: 300; font-size: 22px;">more_horiz</span>
            </div>
          </div>
          <div class="title"><%= post.title %></div>
          <div class="link-preview">
            <% if (post.link) { %>
            <div class="link">
              <span class="material-symbols-outlined" style="color: var(--active-indicator-color);">
                link
              </span>
              <%= post.link %>
            </div>
            <% } %>
            <% if (post.post_type !== 'question' && (!post.link || (post.post_type !== 'post' && post.post_type !== 'project'))) { %>
            <div class="description">
              <%- post.content %>
            </div>
            <% } %>
          </div>
          <div class="votes">
            <div class="reaction-interactions <%= post.id %>-reactions" id="reaction-interactions <%= post.id %>-reactions">
              <%= post.totalReactionCount %> reactions
            </div>
            <div class="comments">
              <%= post.commentCount %> comment<%= post.commentCount > 1 ? 's' : '' %>
            </div>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
    <% } else { %>
    <div class="jobs-header">
    </div>
    <% } %>
    <%- include('partials/footer') %>

  </main>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let page = 1;
      const pageSize = 10;
      const skill = '<%= skill %>';
      const loadMoreButton = document.getElementById('load-more-btn');
      const loadMoreContainer = document.getElementById('load-more-container');

      function loadMoreJobs() {
        fetch(`/api/skills/jobs/${skill}`)
          .then(response => response.json())
          .then(data => {
            if (data.jobs.length > 0) {
              page += 1;
              // Insert new jobs into the page
              const jobsContainer = document.querySelector('.jobs');
              data.jobs.forEach(job => {
                const jobElement = document.createElement('div');
                jobElement.classList.add('job');
                jobElement.onclick = () => window.location.href = `/jobs/${job.id}`;
                jobElement.innerHTML = `
                  <div class="job-preview">
                    <div class="job-info">
                      <div class="company-info">
                        <img class="thumbnail thumbnail-tiny" src="${job.company_logo}" alt="${job.company_name} logo" />
                        <p class="company-name">${job.company_name}</p>
                      </div>
                      <h3 class="job-title">
                        ${job.title}
                        <span>${job.experienceLevel[0].toUpperCase() + job.experienceLevel.slice(1)}</span>
                      </h3>
                      <span>USD $${Math.floor((job.salary + job.salary_max) / 2 / 1000)}k</span>
                      <span>${job.location}</span>
                    </div>
                  </div>
                `;
                jobsContainer.appendChild(jobElement);
              });
            } else {
              loadMoreButton.style.display = 'none';
            }
          })
          .catch(err => console.error('Error loading jobs:', err));
      }

      // Load more on button click
      loadMoreButton.addEventListener('click', loadMoreJobs);

      // IntersectionObserver to load more when scrolling to bottom
      const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          loadMoreJobs();
        }
      }, {
        rootMargin: '100px'
      });

      observer.observe(loadMoreContainer);
    });
  </script>

</body>

</html>