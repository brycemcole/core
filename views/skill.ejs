<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE - #<%= skill %></title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/tags.css" />
  <link rel="stylesheet" href="/css/jobs.css" />
  <link rel="stylesheet" href="/css/company_profile.css" />

  <link rel="shortcut icon" href="/img/core.png" />

  <!-- Meta Tags for SEO and Social Media -->
  <meta name="description" content="Search results for the tag <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta name="keywords" content="<%= skill %>, CORE, tag search, job search, post search">
  <meta name="robots" content="index, follow">
  <meta name="skill" content="<%= skill %>">

  <!-- Open Graph Meta Tags -->
  <meta property="og:title" content="CORE - skill Results for <%= skill %>">
  <meta property="og:description" content="Search results for the skill <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta property="og:image" content="/img/core.png"> <!-- Replace with a suitable image if needed -->
  <meta property="og:url" content="https://getcore.dev/search/<%= skill %>">
  <meta property="og:type" content="website">

  <!-- Twitter Meta Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="CORE - skill Results for <%= skill %>">
  <meta name="twitter:description" content="Search results for the skill <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta name="twitter:image" content="/img/core.png"> <!-- Replace with a suitable image if needed -->
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="tag-search-menu">
      <div class="tag-search-header margin-06-bottom">
        <h4>Results for <span class="green-text-tag mini-text bold text-tag"><%= skill.trim() %></span></h4>
      </div>
      <div>
        <h4 class="margin-03-bottom third-text mini-text">Similar Results</h4>
        <div class="similar-tags sub-text margin-03-bottom secondary-text">
        </div>
      </div>
    </div>
    <%

  

  
  function getTintFromName(name) {
        let hash = 0;
        for (let i = 0; i < name.length; i++) {
          hash = name.charCodeAt(i) + ((hash << 5) - hash);
        }
        hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

        // Convert hash to a hexadecimal string and pad with leading zeros
        const colorHex = ("00000" + hash.toString(16)).slice(-6);
        const tintColor = `#${colorHex}65`;

        // Blend with a desaturated base color (e.g., gray)
        const baseColor = "#808080"; // Light gray
        const blendedColor = blendColors(tintColor, baseColor, 0.5);
        return blendedColor;
  }



function getTintFromNameSecondary(name) {
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

  // Convert hash to a hexadecimal string and pad with leading zeros
  const colorHex = ("00000" + hash.toString(16)).slice(-6);
  const tintColor = `#${colorHex}`;

  // Blend with a desaturated base color (e.g., gray)
  const baseColor = "#404040"; // Dark gray
  const blendedColor = blendColors(tintColor, baseColor, 0.5);
  return blendedColor;
}

function blendColors(color1, color2, ratio) {
  const r1 = parseInt(color1.slice(1, 3), 16);
  const g1 = parseInt(color1.slice(3, 5), 16);
  const b1 = parseInt(color1.slice(5, 7), 16);

  const r2 = parseInt(color2.slice(1, 3), 16);
  const g2 = parseInt(color2.slice(3, 5), 16);
  const b2 = parseInt(color2.slice(5, 7), 16);

  const r = Math.round(r1 * ratio + r2 * (1 - ratio));
  const g = Math.round(g1 * ratio + g2 * (1 - ratio));
  const b = Math.round(b1 * ratio + b2 * (1 - ratio));

  const blendedColor = `#${r.toString(16).padStart(2, "0")}${g
    .toString(16)
    .padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
  return blendedColor;
}

%>
    <div class="jobs">
    </div>
    <div id="load-more-container"></div>
    <div id="loading-indicator">
      <div class="spinner-container">
        <div class="spinner"></div>
      </div>
    </div>
    <%- include('partials/footer') %>

  </main>
  <script>
    function formatRelativeDate(dateString) {
      const now = new Date();
      const postedDate = new Date(dateString);
      const diffTime = Math.abs(now - postedDate);
      const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      const diffMonths = Math.floor(diffDays / 30);
      const diffYears = Math.floor(diffDays / 365);

      if (diffYears > 0) {
        return `${diffYears}y`;
      } else if (diffMonths > 0) {
        return `${diffMonths}m`;
      } else if (diffDays > 0) {
        return `${diffDays}d`;
      } else if (diffHours > 0) {
        return `${diffHours}h`;
      } else {
        return 'Just now';
      }
    }



    function formatDateColor(dateString) {
      const now = new Date();
      const postedDate = new Date(dateString);
      // if within 2 weeks, green, if within 2 months, yellow, if older, red
      const diffTime = Math.abs(now - postedDate);
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      if (diffDays <= 14) {
        return 'green';
      } else if (diffDays <= 60) {
        return 'yellow';
      } else {
        return 'red';
      }
    }

    function formatSalary(salary) {
      if (!salary) return "";
      return salary >= 1000 ? (salary / 1000).toFixed(0) + "k" : salary.toString();
    }

    function getFormattedSalary(salary, salaryMax) {
      if (salary && salaryMax) {
        const average = Math.round((salary + salaryMax) / 2);
        return `${formatSalary(average)}`;
      } else if (salary) {
        return formatSalary(salary);
      }
      return "";
    }

    document.addEventListener('DOMContentLoaded', () => {
      const state = {
        filters: {
          skills: new Set([
            "<%= skill %>"
          ])
        }
      };
      let page = 1;
      const pageSize = 15;
      const skillMeta = document.querySelector('meta[name="skill"]');
      const skill = skillMeta ? skillMeta.getAttribute('content') : null;
      const loadMoreContainer = document.getElementById('load-more-container');
      const loadingIndicator = document.getElementById('loading-indicator');
      const jobsContainer = document.querySelector('.jobs');
      getSimilarSkills();

      let isLoading = false;
      let hasMoreJobs = true;

      if (!skill) {
        console.error('Skill meta tag not found');
        return;
      }

      if (!jobsContainer) {
        console.error('Jobs container not found');
        return;
      }

      function createJobElement(job) {
        const jobElement = document.createElement('div');
        jobElement.classList.add('job');
        jobElement.onclick = () => (window.location.href = `/jobs/${job.id}`);

        const tagsArray = job.skills ?
          job.skills.split(',').map(skill => skill.trim().toLowerCase()) : [];

        const sortedTags = tagsArray.sort((a, b) => {
          if (state.filters.skills.has(a.toLowerCase()) && !state.filters.skills.has(b.toLowerCase())) return -1;
          if (!state.filters.skills.has(a.toLowerCase()) && state.filters.skills.has(b.toLowerCase())) return 1;
          return a.localeCompare(b, undefined, {
            sensitivity: 'base'
          });
        });
        const displayedTags = sortedTags.slice(0, 3);

        const skillsArray = Array.from(state.filters.skills).map(skill => skill.trim().toLowerCase());

        const filteredSkills = displayedTags.filter(skill => skillsArray.includes(skill.toLowerCase()));
        const otherSkills = displayedTags.filter(skill => !skillsArray.includes(skill.toLowerCase()));

        const sortedSkills = [...filteredSkills, ...otherSkills];
        let tagsHTML = sortedSkills
          .sort((a, b) => {
            const aExists = state.filters.skills.has(a.toLowerCase());
            const bExists = state.filters.skills.has(b.toLowerCase());
            return bExists - aExists || a.localeCompare(b, undefined, {
              sensitivity: 'base'
            });
          })
          .map((skill) => {
            const skillExists = state.filters.skills.has(skill.toLowerCase());
            return `
                  <span data-name="${skill}" data-type="skills" data-id="${skill}" data-index="${sortedTags.indexOf(skill)}" class="mini-text bold text-tag ${
                    skillExists ? 'green-text-tag' : ''
                  }">${skill.trim()}</span>`;
          })
          .join('');

        const remainingSkillsCount = sortedTags.length - 3;
        if (remainingSkillsCount > 0) {
          tagsHTML += `
                <span class="remaining-tags mini-text" style="cursor: pointer;" onclick="toggleHiddenTags()">
                  +${remainingSkillsCount} more
                </span>
              `;
        }


        jobElement.innerHTML = `
        <div class="job-preview">
          <div class="job-info">
            <div class="flex flex-row gap-03">
            <div class="flex flex-row gap-06">
              ${
            job.company_logo
              ? `<img class="thumbnail thumbnail-regular thumbnail-tiny" src="${job.company_logo}" alt="${job.company_name}" onerror="this.onerror=null;this.src='/img/glyph.png';" />`
              : ''
          }
          <div class="flex flex-col">
            <a href="/jobs/${job.id}"><h3 class="job-title sub-text">${job.title}</h3></a>
            <p class="company-name">${job.company_name}</p>
          </div>
          </div>
          <div class="location-badge">
            üìç ${formatLocation(job.location).trim()}
          </div>
        </div>
        <div class="job-tags margin-06-bottom">
          ${tagsHTML}
        </div>
        <div class="job-details">
          <span class="job-detail applicants">
            <svg class="icon" viewBox="0 0 24 24"><path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/></svg>
            ${job.applicants ? `${job.applicants} applicants` : '0 applicants'}
          </span>
          <span class="job-detail post-date">
            <svg class="icon" viewBox="0 0 24 24"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"/></svg>
            <time>${formatRelativeDate(job.postedDate)}</time>
          </span>
          <span class="job-detail experience-level">
            <svg class="icon" viewBox="0 0 24 24"><path d="M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z"/></svg>
            ${
              job.experienceLevel === 'Mid Level'
                ? 'L3/L4'
                : job.experienceLevel === 'Entry Level'
                  ? 'L1/L2'
                  : job.experienceLevel === 'Senior'
                    ? 'L5/L6'
                    : job.experienceLevel
            }
          </span>
          ${job.salary || job.salary_max ? `
            <span class="job-detail salary">
              <svg class="icon" viewBox="0 0 24 24"><path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/></svg>
              ${formatSalary(job.salary)} - ${formatSalary(job.salary_max)}/yr
            </span>
        ` : ``}
              </div>
            </div>
          </div>
          `;
        return jobElement;
      }

      async function loadMoreJobs() {
        if (isLoading || !hasMoreJobs) return;

        isLoading = true;
        try {
          const response = await fetch(`/api/skills/jobs/${skill}?page=${page}&pageSize=${pageSize}`);
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();

          if (data.jobs && data.jobs.length > 0) {
            loadingIndicator.style.display = 'none';
            data.jobs.forEach(job => {
              jobsContainer.appendChild(createJobElement(job));
            });
            page += 1;
          } else {
            loadingIndicator.style.display = 'none';
            hasMoreJobs = false;
            if (loadMoreContainer) {
              loadMoreContainer.style.display = 'none';
            }
          }
        } catch (err) {
          console.error('Error loading jobs:', err);
        } finally {
          isLoading = false;
        }
      }

      async function getSimilarSkills() {
        try {
          const response = await fetch(`/api/similar-skills/${skill}`);
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();

          const similarTagsContainer = document.querySelector('.similar-tags');
          if (similarTagsContainer) {
            data.forEach(similarSkill => {
              const tagElement = document.createElement('span');
              tagElement.classList.add('text-tag');
              tagElement.classList.add('bold');
              tagElement.textContent = similarSkill.name;
              tagElement.onclick = () => window.location.href = `/skills/${similarSkill.name.trim()}`;
              similarTagsContainer.appendChild(tagElement);
            });
          } else {
            console.error('Similar tags container not found');
          }
        } catch (err) {
          console.error('Error loading similar skills:', err);
        }
      }

      // IntersectionObserver to load more when scrolling to bottom
      if (loadMoreContainer) {
        const observer = new IntersectionObserver((entries) => {
          if (entries[0].isIntersecting && !isLoading) {
            loadingIndicator.style.display = 'block';
            loadMoreJobs();
          }
        }, {
          rootMargin: '100px'
        });

        observer.observe(loadMoreContainer);
      } else {
        console.error('Load more container not found, falling back to initial load only');
        loadMoreJobs();
      }

    });
  </script>

</body>

</html>