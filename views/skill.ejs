<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE - #<%= skill %></title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/tags.css" />
  <link rel="stylesheet" href="/css/company_profile.css" />

  <link rel="shortcut icon" href="/img/core.png" />

  <!-- Meta Tags for SEO and Social Media -->
  <meta name="description" content="Search results for the tag <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta name="keywords" content="<%= skill %>, CORE, tag search, job search, post search">
  <meta name="robots" content="index, follow">
  <meta name="skill" content="<%= skill %>">

  <!-- Open Graph Meta Tags -->
  <meta property="og:title" content="CORE - skill Results for <%= skill %>">
  <meta property="og:description" content="Search results for the skill <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta property="og:image" content="/img/core.png"> <!-- Replace with a suitable image if needed -->
  <meta property="og:url" content="https://getcore.dev/search/<%= skill %>">
  <meta property="og:type" content="website">

  <!-- Twitter Meta Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="CORE - skill Results for <%= skill %>">
  <meta name="twitter:description" content="Search results for the skill <%= skill %> on CORE. Find related jobs, posts, and more.">
  <meta name="twitter:image" content="/img/core.png"> <!-- Replace with a suitable image if needed -->
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="tag-search-menu">
      <div class="tag-search-header margin-06-bottom">
        <h4>Results for <span class="tag active"><%= skill %></span></h4>
      </div>
      <div class="similar-tags sub-text margin-1-bottom secondary-text">
        Similar skills:
      </div>
    </div>
    <%

  

  
  function getTintFromName(name) {
        let hash = 0;
        for (let i = 0; i < name.length; i++) {
          hash = name.charCodeAt(i) + ((hash << 5) - hash);
        }
        hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

        // Convert hash to a hexadecimal string and pad with leading zeros
        const colorHex = ("00000" + hash.toString(16)).slice(-6);
        const tintColor = `#${colorHex}65`;

        // Blend with a desaturated base color (e.g., gray)
        const baseColor = "#808080"; // Light gray
        const blendedColor = blendColors(tintColor, baseColor, 0.5);
        return blendedColor;
  }



function getTintFromNameSecondary(name) {
  let hash = 0;
  for (let i = 0; i < name.length; i++) {
    hash = name.charCodeAt(i) + ((hash << 5) - hash);
  }
  hash = hash & 0x00ffffff; // Ensure hash is within the range of 0x00ffffff

  // Convert hash to a hexadecimal string and pad with leading zeros
  const colorHex = ("00000" + hash.toString(16)).slice(-6);
  const tintColor = `#${colorHex}`;

  // Blend with a desaturated base color (e.g., gray)
  const baseColor = "#404040"; // Dark gray
  const blendedColor = blendColors(tintColor, baseColor, 0.5);
  return blendedColor;
}

function blendColors(color1, color2, ratio) {
  const r1 = parseInt(color1.slice(1, 3), 16);
  const g1 = parseInt(color1.slice(3, 5), 16);
  const b1 = parseInt(color1.slice(5, 7), 16);

  const r2 = parseInt(color2.slice(1, 3), 16);
  const g2 = parseInt(color2.slice(3, 5), 16);
  const b2 = parseInt(color2.slice(5, 7), 16);

  const r = Math.round(r1 * ratio + r2 * (1 - ratio));
  const g = Math.round(g1 * ratio + g2 * (1 - ratio));
  const b = Math.round(b1 * ratio + b2 * (1 - ratio));

  const blendedColor = `#${r.toString(16).padStart(2, "0")}${g
    .toString(16)
    .padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
  return blendedColor;
}

%>
    <div class="jobs">
    </div>
    <div id="load-more-container"></div>
    <% if (posts.length > 0) { %>
    <div class="posts">
      <% posts.forEach((post) => { %>
      <div class="post" onclick="window.location.href='/posts/<%= post.id %>'">
        <div class="post-content">
          <div class="post-header">
            <% 
                    function formatDate(dateString) {
                    const date = new Date(dateString);
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    const year = date.getFullYear();
                    return `${month}/${day}/${year}`;
                  }
                  %>
            <div class="post-header-username">
              <div class="avatar">
                <img src="<%= post.avatar %>" loading="lazy">
              </div>
              <div class="username">
                <a href="/user/<%= post.username %>" class="username-link"><strong><%= post.username %></strong></a>
                <div class="post-date" id="secondary-text">
                  <a style="color: <%= post.community_color %>;" href="/networks/<%= post.communities_id %>" class="community"><%= post.community_name %></a>

                  <%= formatDate(post.created_at) %> â€¢ <%= post.views %> views
                </div>
              </div>
            </div>
            <div class="three-dots">
              <span class="material-symbols-outlined" style="font-weight: 300; font-size: 22px;">more_horiz</span>
            </div>
          </div>
          <div class="title"><%= post.title %></div>
          <div class="link-preview">
            <% if (post.link) { %>
            <div class="link">
              <span class="material-symbols-outlined" style="color: var(--active-indicator-color);">
                link
              </span>
              <%= post.link %>
            </div>
            <% } %>
            <% if (post.post_type !== 'question' && (!post.link || (post.post_type !== 'post' && post.post_type !== 'project'))) { %>
            <div class="description">
              <%- post.content %>
            </div>
            <% } %>
          </div>
          <div class="votes">
            <div class="reaction-interactions <%= post.id %>-reactions" id="reaction-interactions <%= post.id %>-reactions">
              <%= post.totalReactionCount %> reactions
            </div>
            <div class="comments">
              <%= post.commentCount %> comment<%= post.commentCount > 1 ? 's' : '' %>
            </div>
          </div>
        </div>
      </div>
      <% }); %>
    </div>
    <% } else { %>
    <div class="jobs-header">
    </div>
    <% } %>
    <%- include('partials/footer') %>

  </main>
  <script>
    function formatRelativeDate(dateString) {
      const now = new Date();
      const postedDate = new Date(dateString);
      const diffTime = Math.abs(now - postedDate);
      const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      const diffMonths = Math.floor(diffDays / 30);
      const diffYears = Math.floor(diffDays / 365);

      if (diffYears > 0) {
        return `${diffYears}y`;
      } else if (diffMonths > 0) {
        return `${diffMonths}m`;
      } else if (diffDays > 0) {
        return `${diffDays}d`;
      } else if (diffHours > 0) {
        return `${diffHours}h`;
      } else {
        return 'Just now';
      }
    }


    function formatLocation(location) {
      if (!location) return "";

      const parts = location.split(',').map(part => part.trim());

      // Helper function to check if a string is a US state
      const isUSState = (str) => Object.keys(stateMappings).includes(str) || Object.values(stateMappings).includes(str);

      // Helper function to get state abbreviation
      const getStateAbbr = (state) => {
        const fullName = Object.keys(stateMappings).find(key => key.toLowerCase() === state.toLowerCase());
        return fullName ? stateMappings[fullName] : state;
      };

      if (parts.length === 1) {
        return parts[0];
      } else if (parts.length === 2) {
        if (isUSState(parts[1])) {
          return getStateAbbr(parts[1]);
        } else {
          return parts[1]; // Assume it's a non-US country
        }
      } else if (parts.length >= 3) {
        if (parts[2].trim().toLowerCase() === 'united states') {
          return getStateAbbr(parts[1]);
        } else {
          return parts[2]; // Return the country for non-US locations
        }
      }

      return location.trim();
    }

    function formatDateColor(dateString) {
      const now = new Date();
      const postedDate = new Date(dateString);
      // if within 2 weeks, green, if within 2 months, yellow, if older, red
      const diffTime = Math.abs(now - postedDate);
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      if (diffDays <= 14) {
        return 'green';
      } else if (diffDays <= 60) {
        return 'yellow';
      } else {
        return 'red';
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      let page = 1;
      const pageSize = 15;
      const skillMeta = document.querySelector('meta[name="skill"]');
      const skill = skillMeta ? skillMeta.getAttribute('content') : null;
      const loadMoreContainer = document.getElementById('load-more-container');
      const jobsContainer = document.querySelector('.jobs');
      let isLoading = false;
      let hasMoreJobs = true;

      if (!skill) {
        console.error('Skill meta tag not found');
        return;
      }

      if (!jobsContainer) {
        console.error('Jobs container not found');
        return;
      }

      function createJobElement(job) {
        const skillMeta = document.querySelector('meta[name="skill"]');
        const skillName = skillMeta ? skillMeta.getAttribute('content') : null;

        const jobElement = document.createElement('div');
        jobElement.classList.add('job');
        jobElement.onclick = () => window.location.href = `/jobs/${job.id}`;
        jobElement.innerHTML = `
          <div class="job-preview">
            <div class="job-info">
              <div class="company-info">
                <img class="thumbnail thumbnail-micro thumbnail-regular" src="${job.company_logo}" alt="${job.company_name} logo" />
                <p class="company-name secondary-text sub-text">${job.company_name}</p>
              </div>
              <h3 class="job-title margin-03-bottom">
                ${job.title}
              </h3>
      
<div class="job-skills secondary-text margin-06-bottom sub-text">
  Skills:
  ${skillName ? `
    <span class="tag green-tag" onclick="window.location.href='/skills/${skillName}'">
      <p>${skillName}</p>
    </span>
  ` : ''}
  ${job.skills.split(',').map(skill => skill.trim()).map(jobSkill => `
    <span class="tag" onclick="window.location.href='/skills/${jobSkill}'">
      <p>${jobSkill}</p>
    </span>
  `).join('')}
</div>
              <div class="job-title-location secondary-text sub-text">
              <span class="job-post-date ${formatDateColor(job.postedDate)}">${formatRelativeDate(job.postedDate)}</span>
              <span style="font-size:.7rem;">â€¢</span>
                <span style="">
                  ${job.experienceLevel === 'Mid Level'
                    ? 'L3/L4'
                    : job.experienceLevel === 'Entry Level'
                      ? 'L1/L2'
                      : job.experienceLevel === 'Senior'
                        ? 'L5/L6'
                        : job.experienceLevel}
                </span>
                <span style="font-size:.7rem;">â€¢</span>
                <span style="">USD $${Math.floor((job.salary + job.salary_max) / 2 / 1000)}k</span>
                <span style="font-size:.7rem;">â€¢</span>
                <span><span class="material-symbols-outlined">location_on</span>
                  ${formatLocation(job.location)}</span>
                <span style="font-size:.7rem;">â€¢</span>
                <div class="applicants sub-text">
                  <span class="material-symbols-outlined">person</span>
                  <span>${job.applicants}</span>
                </div>
              </div>
            </div>
          </div>
        `;
        return jobElement;
      }

      async function loadMoreJobs() {
        if (isLoading || !hasMoreJobs) return;

        isLoading = true;
        try {
          const response = await fetch(`/api/skills/jobs/${skill}?page=${page}&pageSize=${pageSize}`);
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();

          if (data.jobs && data.jobs.length > 0) {
            data.jobs.forEach(job => {
              jobsContainer.appendChild(createJobElement(job));
            });
            page += 1;
          } else {
            hasMoreJobs = false;
            if (loadMoreContainer) {
              loadMoreContainer.style.display = 'none';
            }
          }
        } catch (err) {
          console.error('Error loading jobs:', err);
        } finally {
          isLoading = false;
        }
      }

      async function getSimilarSkills() {
        try {
          const response = await fetch(`/api/similar-skills/${skill}`);
          if (!response.ok) throw new Error('Network response was not ok');
          const data = await response.json();

          const similarTagsContainer = document.querySelector('.similar-tags');
          if (similarTagsContainer) {
            data.forEach(similarSkill => {
              const tagElement = document.createElement('span');
              tagElement.classList.add('tag');
              tagElement.textContent = similarSkill.name;
              tagElement.onclick = () => window.location.href = `/skills/${similarSkill.name}`;
              similarTagsContainer.appendChild(tagElement);
            });
          } else {
            console.error('Similar tags container not found');
          }
        } catch (err) {
          console.error('Error loading similar skills:', err);
        }
      }

      // IntersectionObserver to load more when scrolling to bottom
      if (loadMoreContainer) {
        const observer = new IntersectionObserver((entries) => {
          if (entries[0].isIntersecting && !isLoading) {
            loadMoreJobs();
          }
        }, {
          rootMargin: '100px'
        });

        observer.observe(loadMoreContainer);
      } else {
        console.error('Load more container not found, falling back to initial load only');
        loadMoreJobs();
      }

      // Initial load of similar skills
      getSimilarSkills();
    });
  </script>

</body>

</html>