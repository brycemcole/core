<!DOCTYPE html>
<html lang="en">

<head>
  <title>CORE - Register</title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="stylesheet" href="css/navbar.css" />
  <link rel="stylesheet" href="css/register.css" />
  <link rel="shortcut icon" href="/img/core.png" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'home' }) %>
  <main>
    <img src="/img/core.png" onclick="window.location.href = '/'" alt="CORE Logo" class="core-logo" />

    <div class="account-stuff">
      <div id="login">
        <div class="user-res">Already a member? <a href="/login">Login</a></div>
      </div>
      <div id="registration">
        <% if (successMessages && successMessages.length > 0) { %>
        <div class="success-messages">
          <% successMessages.forEach(function(msg) { %>
          <p class="success-message"><%= msg %></p>
          <% }); %>
        </div>
        <% } %>
        <% if (errorMessages && errorMessages.length > 0) { %>
        <div class="error-messages">
          <% errorMessages.forEach(function(msg) { %>
          <p class="error-message"><%= msg %></p>
          <% }); %>
        </div>
        <% } %>
        <form action="/register" method="POST">
          <div class="input-container">
            <input type="text" id="firstname" name="firstname" placeholder="First Name" required />
          </div>
          <div class="input-container">
            <input type="text" id="lastname" name="lastname" placeholder="Last Name" required />
          </div>
          <div class="input-container">
            <input type="email" id="email" name="email" placeholder="Email" required value="<%= email %>" />
            <span class="sub-text text-muted-foreground" id="email-validity">Empty</span>
          </div>

          <div class="input-container">
            <input type="text" id="username" name="username" placeholder="Username" required minlength="5" maxlength="30" />
            <span class="sub-text text-muted-foreground" id="username-char-count">0/30</span>
            <span class="sub-text text-muted-foreground" id="username-validity">adsad</span>
          </div>

          <div class="input-container">
            <input type="password" id="password" name="password" placeholder="Password" required />
            <span id="password-strength"></span>
          </div>

          <div class="input-container" id="confirmPasswordContainer" style="display: none;">
            <label for="password2">Confirm Password</label>
            <input type="password" id="password2" placeholder="Confirm your password" name="password2" required />
            <span id="password-match"></span>
          </div>


          <div class="input-container">
            <input type="text" id="zipcode" name="zipcode" required style="display: block" placeholder="Zipcode" />
          </div>
          <a href="/register" id="register-text" class="register-text margin-1-bottom">
            <button type="submit" id="submit-button">
              <span class="material-symbols-outlined">person_add</span>
              Register</button>
          </a>
        </form>
      </div>
    </div>
    <%- include('partials/footer') %>

  </main>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      var password = document.getElementById("password");
      var confirmPassword = document.getElementById("password2");
      var confirmPasswordContainer = document.getElementById("confirmPasswordContainer");
      var passwordStrengthText = document.getElementById("password-strength");
      var passwordMatchText = document.getElementById("password-match");
      var username = document.getElementById("username");
      const usernameInput = document.getElementById('username');
      const charCount = document.getElementById('username-char-count');
      const usernameValidity = document.getElementById('username-validity');

      const emailInput = document.getElementById('email');
      const emailValidity = document.getElementById('email-validity');

      function validateEmail(email) {
        const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
      }

      function updateUsernameValidity() {
        const username = usernameInput.value;
        const invalidCharacters = /[^a-zA-Z0-9_]/;

        if (username.length === 0) {
          usernameValidity.textContent = 'Empty';
          usernameValidity.className = 'sub-text text-muted-foreground';
        } else if (username.length < 5 || username.length > 30 || invalidCharacters.test(username)) {
          usernameValidity.textContent = `'${username}' is invalid`;
          usernameValidity.className = 'invalid sub-text';
        } else {
          usernameValidity.textContent = 'Checking availability...';
          usernameValidity.className = 'sub-text text-muted-foreground';
        }
      }

      function checkUsernameAvailability() {
        const username = usernameInput.value;
        fetch("/api/available-username/" + encodeURIComponent(username))
          .then((response) => response.json())
          .then((data) => {
            if (data.available) {
              usernameValidity.textContent = `'${username}' is valid`;
              usernameValidity.className = 'valid sub-text';
            } else {
              usernameValidity.textContent = `'${username}' is taken`;
              usernameValidity.className = 'invalid sub-text';
            }
          });
      }

      const debouncedCheckAvailability = debounce(checkUsernameAvailability, 300);

      usernameInput.addEventListener('input', function () {
        updateCharCount();
        updateUsernameValidity();
        debouncedCheckAvailability();
      });

      updateCharCount();
      updateUsernameValidity();

      function updateEmailValidity() {
        if (emailInput.value.length === 0) {
          emailValidity.textContent = 'Empty';
          emailValidity.className = 'sub-text text-muted-foreground';
        } else if (validateEmail(emailInput.value)) {
          emailValidity.textContent = 'Valid';
          emailValidity.className = 'valid sub-text';
        } else {
          emailValidity.textContent = 'Invalid';
          emailValidity.className = 'invalid sub-text';
        }
      }

      emailInput.addEventListener('input', updateEmailValidity);
      updateEmailValidity(); // Run immediately to check prefilled text

      function updateCharCount() {
        const currentLength = usernameInput.value.length;
        charCount.textContent = `${currentLength}/30`;

        if (currentLength < 5) {
          charCount.style.color = '#ae4444';
        } else {
          charCount.style.color = '#4b9263';
        }
      }

      usernameInput.addEventListener('input', updateCharCount);

      function checkUserName() {
        const invalidCharacters = /[^a-zA-Z0-9_]/; // Only allow letters, numbers, and underscores

        if (username.value.length < 5 || invalidCharacters.test(username.value) || username.value.length > 15) {
          username.classList.add("invalid");
          username.classList.remove("valid");
          return;
        }

        fetch("/api/available-username/" + encodeURIComponent(username.value))
          .then((response) => response.json())
          .then((data) => {
            if (data.available) {
              username.classList.remove("invalid");
              username.classList.add("valid");
            } else {
              username.classList.add("invalid");
              username.classList.remove("valid");
            }
          });
      }

      function debounce(func, wait, immediate) {
        var timeout;
        return function () {
          var context = this,
            args = arguments;
          var later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) func.apply(context, args);
        };
      }

      function checkPasswordStrength() {
        var strength = 0;
        if (password.value.length > 5) strength += 1;
        if (password.value.match(/(?=.*[0-9])/)) strength += 1;
        if (password.value.match(/(?=.*[!@#$%^&*])/)) strength += 1;
        if (password.value.match(/(?=.*[a-z])/)) strength += 1;
        if (password.value.match(/(?=.*[A-Z])/)) strength += 1;

        switch (strength) {
        case 1:
        case 2:
          passwordStrengthText.textContent = "Weak";
          password.style.borderColor = "red";
          password.classList.add("weak");
          password.classList.remove("medium");
          password.classList.remove("strong");
          break;
        case 3:
        case 4:
          passwordStrengthText.textContent = "Medium";
          password.style.borderColor = "yellow";
          password.classList.add("medium");
          password.classList.remove("weak");
          password.classList.remove("strong");

          break;
        case 5:
          passwordStrengthText.textContent = "Strong";
          password.style.borderColor = "green";
          password.classList.remove("medium");
          password.classList.remove("weak");
          password.classList.add("strong");
          break;
        default:
          passwordStrengthText.textContent = "";
          password.style.borderColor = "";
        }
      }

      function checkPasswordMatch() {
        if (password.value === confirmPassword.value) {
          passwordMatchText.textContent = "Passwords match";
          confirmPassword.style.borderColor = "green";
          confirmPassword.classList.add("match");
          confirmPassword.classList.remove("no-match");
        } else {
          passwordMatchText.textContent = "Passwords do not match";
          confirmPassword.style.borderColor = "red";
          confirmPassword.classList.remove("match");
          confirmPassword.classList.add("no-match");
        }
      }

      password.addEventListener("input", function () {
        checkPasswordStrength();
        if (password.value.length > 0) {
          confirmPasswordContainer.style.display = "block"; // Show Confirm Password field
        } else {
          confirmPasswordContainer.style.display = "none"; // Hide Confirm Password field
        }
        checkPasswordMatch();
      });

      confirmPassword.addEventListener("input", checkPasswordMatch);
      username.addEventListener("input", debounce(checkUserName, 500));

    });
  </script>
</body>

</html>