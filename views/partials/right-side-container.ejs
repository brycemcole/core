       <link rel="stylesheet" href="/css/right-side-container.css" />


       <div class="right-side-container">

         <div class="job-header">
           <h5>Openings</h5>
         </div>
         <div class="jobslist flex-col gap-1">
         </div>

       </div>
       <script>
         function formatRelativeDate(dateString) {
           const date = new Date(dateString);
           const now = new Date();
           const diffInSeconds = Math.floor((now - date) / 1000);
           const diffInDays = Math.floor(diffInSeconds / 86400);
           const diffInWeeks = Math.floor(diffInDays / 7);

           if (diffInSeconds < 60) {
             return "Just now";
           } else if (diffInSeconds < 3600) {
             const minutes = Math.floor(diffInSeconds / 60);
             return `${minutes}m ago`;
           } else if (diffInSeconds < 86400) {
             const hours = Math.floor(diffInSeconds / 3600);
             return `${hours}h ago`;
           } else if (diffInDays < 7) {
             return `${diffInDays}d ago`;
           } else if (diffInWeeks <= 4) {
             return `${diffInWeeks}w ago`;
           } else {
             const month = date.toLocaleString("default", {
               month: "short"
             });
             const day = String(date.getDate());
             const year = date.getFullYear();
             const currentYear = now.getFullYear();

             if (year === currentYear) {
               return `${month} ${day}`;
             } else {
               return `${month} ${day}, ${year}`;
             }
           }
         }



         function formatSalary(salary) {
           if (!salary) return "";
           return salary >= 1000 ? (salary / 1000).toFixed(0) + "k" : salary.toString();
         }

         function getFormattedSalary(salary, salaryMax) {
           if (salary && salaryMax) {
             const average = Math.round((salary + salaryMax) / 2);
             return `${formatSalary(average)}/yr`;
           } else if (salary) {
             return formatSalary(salary);
           }
           return "";
         }

         function fetchJobPreviews() {
           fetch(`/api/recent-viewed-jobs`)
             .then(response => response.json())
             .then(data => {
               const jobs = data.jobPostings;
               const isMobile = window.matchMedia('(max-width: 768px)').matches;
               let jobslistContainer;
               if (isMobile) {
                 jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
               } else {
                 jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
               }
               jobslistContainer.innerHTML = jobs.map(job => `
              <div class="job px-4 py-4 flex flex-col" onclick="window.location.href='/jobs/${job.id}'">
              <div class="flex flex-row gap-06">
                                  ${job.company_logo ? `
                      <img loading="lazy" src="${job.company_logo}" alt="" onerror="this.onerror=null;this.src='/img/glyph.png';" class="thumbnail ${isMobile ? `thumbnail-tiny` : `thumbnail-tiny`} thumbnail-regular" />
                      ` : `<img loading="lazy" src="/img/gylph.png" alt="" class="thumbnail ${isMobile ? `thumbnail-tiny` : `thumbnail-tiny`} thumbnail-regular" />`}
                <div class="job-content">
                  <div class="job-content-header">
                    <div class="company-logo-container">
                                            <div class="job-posting-header">
                        <div class="secondary-text">
                        
                        <a class="mini-text secondary-text" href="/jobs/company/${encodeURIComponent(job.company_name)}">${job.company_name}</a>
                        
                        </div>
                                                                            
                               
                      </div>
                    
                    </div>
                                                              <div class="job-title mini-text bold"><a href="/jobs/${job.id}">${job.title.slice(0, 40)}</a></div>


                  </div>


                  ${!isMobile ? `

                  ` : `
                  `}
                </div>
                </div>
                <div class="job-title-location mini-text text-muted-foreground">
                ${job.salary || job.salary_max ? `
                  <span class="job-salary mini-text">
                    ${getFormattedSalary(job.salary, job.salary_max)}
                  </span>
                  <span style="font-size:.7rem;">•</span>
                ` : ``}

                <div class="location mini-text">
                  <span class="material-symbols-outlined">location_on</span>
                  ${formatLocation(job.location)}
                </div>
                  <span style="font-size:.7rem;">•</span>

                <div class="views mini-text"><span class="material-symbols-outlined" style="padding:0;">visibility</span>
                <span>${job.views ? job.views : '0'}</span></div>
                  <span style="font-size:.7rem;">•</span>

                <div class="job-post-date mini-text">
                  <span class="material-symbols-outlined" style="padding:0;">calendar_month</span>
                  <time>${formatRelativeDate(job.postedDate)}</time>
                </div>

                    </div>
              </div>
            `).join('');
               jobslistContainer.innerHTML += '<div class="see-more"><a href="/jobs"><button class="regular-button">More</button></a></div>';


               const jobElements = jobslistContainer.querySelectorAll('.job');
             })
             .catch(error => {
               console.error('Error fetching job previews:', error);
             });
         }


         function fetchCommunityJobPreviews(communityId) {
           let currentPage = 1;
           const itemsPerPage = 10;
           fetch(`/api/community/${communityId}/jobs?page=${currentPage}&limit=${itemsPerPage}`)
             .then(response => response.json())
             .then(data => {
               const jobs = data.jobPostings;
               const isMobile = window.matchMedia('(max-width: 768px)').matches;
               let jobslistContainer;
               if (isMobile) {
                 jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
               } else {
                 jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
               }

               if (jobslistContainer) {
                 jobslistContainer.innerHTML = jobs.map(job => `
              <div class="job" onclick="window.location.href='/jobs/${job.id}'">
                <div class="job-content">
                  <div class="job-content-header">
                    <div class="company-logo-container">
                    ${job.company_logo ? `
                      <img loading="lazy" src="${job.company_logo}" alt="" onerror="this.onerror=null;this.src='/img/glyph.png';" class="thumbnail ${isMobile ? `thumbnail-micro` : `thumbnail-tiny`} thumbnail-regular" />
                      ` : `<img loading="lazy" src="/img/gylph.png" alt="" class="thumbnail ${isMobile ? `thumbnail-tiny` : `thumbnail-tiny`} thumbnail-regular" />`}
                                            <div class="job-posting-header">
                        <div class="job-company-name sub-text secondary-text">
                        
                        <a class="secondary-text" href="/jobs/company/${encodeURIComponent(job.company_name)}">${job.company_name}</a>
                        
                        </div>
                                                                            
                               
                      </div>
                    
                    </div>
                                                              <div class="job-title mini-text bold"><a href="/jobs/${job.id}">${job.title.slice(0, 40)}</a></div>

                    <div class="job-title-location text-muted-foreground">
                ${job.salary || job.salary_max ? `
                  <span class="job-salary mini-text">
                    ${getFormattedSalary(job.salary, job.salary_max)}
                  </span>
                  <span style="font-size:.7rem;">•</span>
                ` : ``}

                <div class="location mini-text">
                  <span class="material-symbols-outlined">location_on</span>
                  ${formatLocation(job.location)}
                </div>
                  <span style="font-size:.7rem;">•</span>

                <div class="applicants mini-text"><span class="material-symbols-outlined">person</span>${job.applicants ? job.applicants : '0'}</div>
                  <span style="font-size:.7rem;">•</span>

                <div class="job-post-date mini-text">
                  <span class="material-symbols-outlined">calendar_month</span>
                  <time>${formatRelativeDate(job.postedDate)}</time>
                </div>

                    </div>

                  </div>


                  ${!isMobile ? `

                  ` : `
                  `}
                </div>
              </div>
            `).join('');
                 jobslistContainer.innerHTML += '<div class="see-more"><a href="/jobs"><button class="regular-button">More Jobs</button></a></div>';


                 const jobElements = jobslistContainer.querySelectorAll('.job');
                 jobElements.forEach(jobElement => {
                   const locationFlair = jobElement.querySelector('#location-flair');
                   const location = locationFlair.dataset.location;
                 });
               }

             })
             .catch(error => {
               console.error('Error fetching job previews:', error);
             });
         }

         document.addEventListener("DOMContentLoaded", () => {
           const isMobile = window.matchMedia('(max-width: 768px)').matches;
           let jobslistContainer;
           if (isMobile) {
             jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
           } else {
             jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
           }
           const postsContainer = document.getElementById('posts-container');
           if (!postsContainer) {
             if (jobslistContainer)
               try {
                 fetchJobPreviews();
               } catch (error) {
                 console.error('Error fetching job previews:', error);
               }
             return;
           }
           const communityId = postsContainer.dataset.communityId || null;

           if (communityId) {
             if (jobslistContainer) {
               fetchCommunityJobPreviews(communityId);
             }
           } else {
             if (jobslistContainer) {
               try {
                 fetchJobPreviews();
               } catch (error) {
                 console.error('Error fetching job previews:', error);
               }
             }
           }
         });
       </script>