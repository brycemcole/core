       <link rel="stylesheet" href="/css/right-side-container.css" />


       <div class="right-side-container">

         <div class="job-header">
           <h5>Openings</h5>
         </div>
         <div class="jobslist flex-col gap-1">
         </div>

       </div>
       <script>
         const stateMappings = {
           Alabama: 'AL',
           Alaska: 'AK',
           Arizona: 'AZ',
           Arkansas: 'AR',
           California: 'CA',
           Colorado: 'CO',
           Connecticut: 'CT',
           Delaware: 'DE',
           Florida: 'FL',
           Georgia: 'GA',
           Hawaii: 'HI',
           Idaho: 'ID',
           Illinois: 'IL',
           Indiana: 'IN',
           Iowa: 'IA',
           Kansas: 'KS',
           Kentucky: 'KY',
           Louisiana: 'LA',
           Maine: 'ME',
           Maryland: 'MD',
           Massachusetts: 'MA',
           Michigan: 'MI',
           Minnesota: 'MN',
           Mississippi: 'MS',
           Missouri: 'MO',
           Montana: 'MT',
           Nebraska: 'NE',
           Nevada: 'NV',
           'New Hampshire': 'NH',
           'New Jersey': 'NJ',
           'New Mexico': 'NM',
           'New York': 'NY',
           'North Carolina': 'NC',
           'North Dakota': 'ND',
           Ohio: 'OH',
           Oklahoma: 'OK',
           Oregon: 'OR',
           Pennsylvania: 'PA',
           'Rhode Island': 'RI',
           'South Carolina': 'SC',
           'South Dakota': 'SD',
           Tennessee: 'TN',
           Texas: 'TX',
           Utah: 'UT',
           Vermont: 'VT',
           Virginia: 'VA',
           Washington: 'WA',
           'West Virginia': 'WV',
           Wisconsin: 'WI',
           Wyoming: 'WY',
           'United States': 'US',
         };

         const countryMappings = {
           'United States': 'USA',
           'United Kingdom': 'UK',
           'Canada': 'CAN',
           'Australia': 'AUS',
           'Germany': 'DEU',
           'France': 'FRA',
           'Japan': 'JPN',
           'China': 'CHN',
           'India': 'IND',
           'Brazil': 'BRA',
           'Russia': 'RUS',
           'South Korea': 'KOR',
           'Italy': 'ITA',
           'Spain': 'ESP',
           'Mexico': 'MEX',
           'Netherlands': 'NLD',
           'Saudi Arabia': 'SAU',
           'Turkey': 'TUR',
           'Switzerland': 'CHE',
           'Argentina': 'ARG',
           'South Africa': 'ZAF',
           'Sweden': 'SWE',
           'Belgium': 'BEL',
           'Norway': 'NOR',
           'Austria': 'AUT',
           'Denmark': 'DNK',
           'Finland': 'FIN',
           'Greece': 'GRC',
           'Ireland': 'IRL',
           'Portugal': 'PRT',
           'Poland': 'POL',
           'Czech Republic': 'CZE',
           'Hungary': 'HUN',
           'New Zealand': 'NZL',
           'Singapore': 'SGP',
           'Malaysia': 'MYS',
           'Philippines': 'PHL',
           'Thailand': 'THA',
           'Indonesia': 'IDN',
           'Vietnam': 'VNM',
           'Israel': 'ISR',
           'United Arab Emirates': 'ARE',
           'Chile': 'CHL',
           'Colombia': 'COL',
           'Peru': 'PER',
           'Pakistan': 'PAK',
           'Bangladesh': 'BGD',
           'Nigeria': 'NGA',
           'Egypt': 'EGY',
           'Ukraine': 'UKR',
           'Romania': 'ROU',
           'Kazakhstan': 'KAZ',
           'Qatar': 'QAT',
           'Kuwait': 'KWT',
           'Bulgaria': 'BGR',
           'Croatia': 'HRV',
           'Lithuania': 'LTU',
           'Slovakia': 'SVK',
           'Slovenia': 'SVN',
           'Latvia': 'LVA',
           'Estonia': 'EST',
           'Luxembourg': 'LUX',
           'Iceland': 'ISL',
           'Malta': 'MLT',
           'Cyprus': 'CYP',
           'Serbia': 'SRB',
           'Montenegro': 'MNE',
           'North Macedonia': 'MKD',
           'Bosnia and Herzegovina': 'BIH',
           'Albania': 'ALB',
           'Georgia': 'GEO',
           'Armenia': 'ARM',
           'Azerbaijan': 'AZE',
           'Belarus': 'BLR',
           'Moldova': 'MDA',
           'Uzbekistan': 'UZB',
           'Turkmenistan': 'TKM',
           'Kyrgyzstan': 'KGZ',
           'Tajikistan': 'TJK',
           'Morocco': 'MAR',
           'Tunisia': 'TUN',
           'Algeria': 'DZA',
           'Libya': 'LBY',
           'Sudan': 'SDN',
           'Ethiopia': 'ETH',
           'Kenya': 'KEN',
           'Uganda': 'UGA',
           'Tanzania': 'TZA',
           'Ghana': 'GHA',
           'Ivory Coast': 'CIV',
           'Cameroon': 'CMR',
           'Senegal': 'SEN',
           'Zimbabwe': 'ZWE',
           'Zambia': 'ZMB',
           'Angola': 'AGO',
           'Mozambique': 'MOZ',
           'Namibia': 'NAM',
           'Botswana': 'BWA',
           'Malawi': 'MWI',
           'Rwanda': 'RWA',
           'Burundi': 'BDI',
           'Mauritius': 'MUS',
           'Madagascar': 'MDG',
           'Seychelles': 'SYC',
           'Lesotho': 'LSO',
           'Eswatini': 'SWZ',
           'Comoros': 'COM',
           'Djibouti': 'DJI',
           'Eritrea': 'ERI',
           'Somalia': 'SOM',
           'Gabon': 'GAB',
           'Equatorial Guinea': 'GNQ',
           'Central African Republic': 'CAF',
           'Chad': 'TCD',
           'Niger': 'NER',
           'Mali': 'MLI',
           'Burkina Faso': 'BFA',
           'Benin': 'BEN',
           'Togo': 'TGO',
           'Sierra Leone': 'SLE',
           'Liberia': 'LBR',
           'Guinea': 'GIN',
           'Guinea-Bissau': 'GNB',
           'Gambia': 'GMB',
           'Cape Verde': 'CPV',
           'Mauritania': 'MRT',
           'Western Sahara': 'ESH',
           'Palestine': 'PSE',
           'Lebanon': 'LBN',
           'Jordan': 'JOR',
           'Syria': 'SYR',
           'Iraq': 'IRQ',
           'Yemen': 'YEM',
           'Oman': 'OMN',
           'Bahrain': 'BHR',
           'Sri Lanka': 'LKA',
           'Nepal': 'NPL',
           'Bhutan': 'BTN',
           'Maldives': 'MDV',
           'Myanmar': 'MMR',
           'Laos': 'LAO',
           'Cambodia': 'KHM',
           'Brunei': 'BRN',
           'East Timor': 'TLS',
           'Papua New Guinea': 'PNG',
           'Fiji': 'FJI',
           'Samoa': 'WSM',
           'Tonga': 'TON',
           'Vanuatu': 'VUT',
           'Solomon Islands': 'SLB',
           'Micronesia': 'FSM',
           'Marshall Islands': 'MHL',
           'Palau': 'PLW',
           'Kiribati': 'KIR',
           'Nauru': 'NRU',
           'Tuvalu': 'TUV',
           // Add more countries as needed
         };

         function formatRelativeDate(dateString) {
           const now = new Date();
           const postedDate = new Date(dateString);
           const diffTime = Math.abs(now - postedDate);
           const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
           const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
           const diffMonths = Math.floor(diffDays / 30);
           const diffYears = Math.floor(diffDays / 365);

           if (diffYears > 0) {
             return `${diffYears}y`;
           } else if (diffMonths > 0) {
             return `${diffMonths}m`;
           } else if (diffDays > 0) {
             return `${diffDays}d`;
           } else if (diffHours > 0) {
             return `${diffHours}h`;
           } else {
             return 'Just now';
           }
         }

         function formatLocation(location) {
           if (!location) return "";

           const parts = location.split(',').map(part => part.trim());

           // Helper function to check if a string is a US state
           const isUSState = (str) => Object.keys(stateMappings).includes(str) || Object.values(stateMappings).includes(str);

           // Helper function to get state abbreviation
           const getStateAbbr = (state) => {
             const fullName = Object.keys(stateMappings).find(key => key.toLowerCase() === state.toLowerCase());
             return fullName ? stateMappings[fullName] : state;
           };

           // Helper function to get country abbreviation
           const getCountryAbbr = (country) => {
             const fullName = Object.keys(countryMappings).find(key => key.toLowerCase() === country.toLowerCase());
             return fullName ? countryMappings[fullName] : country;
           };

           if (parts.length === 1) {
             return getCountryAbbr(parts[0]);
           } else if (parts.length === 2) {
             if (isUSState(parts[1])) {
               return getStateAbbr(parts[1]);
             } else {
               return getCountryAbbr(parts[1]);
             }
           } else if (parts.length >= 3) {
             if (parts[2].trim().toLowerCase() === 'united states') {
               return getStateAbbr(parts[1]);
             } else {
               return getCountryAbbr(parts[2]);
             }
           }

           return location.trim();
         }

         function formatSalary(salary) {
           if (!salary) return "";
           return salary >= 1000 ? (salary / 1000).toFixed(0) + "k" : salary.toString();
         }

         function getFormattedSalary(salary, salaryMax) {
           if (salary && salaryMax) {
             const average = Math.round((salary + salaryMax) / 2);
             return `${formatSalary(average)}/yr`;
           } else if (salary) {
             return formatSalary(salary);
           }
           return "";
         }

         function fetchJobPreviews() {
           fetch(`/api/randomJobs`)
             .then(response => response.json())
             .then(data => {
               const jobs = data.jobPostings;
               const isMobile = window.matchMedia('(max-width: 768px)').matches;
               let jobslistContainer;
               if (isMobile) {
                 jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
               } else {
                 jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
               }
               jobslistContainer.innerHTML = jobs.map(job => `
              <div class="job" onclick="window.location.href='/jobs/${job.id}'">
                <div class="job-content">
                  <div class="job-content-header">
                    <div class="company-logo-container">
                    ${job.company_logo ? `
                      <img loading="lazy" src="${job.company_logo}" alt="" class="thumbnail ${isMobile ? `thumbnail-micro` : `thumbnail-tiny`} thumbnail-regular" />
                      ` : ``}
                                            <div class="job-posting-header">
                        <div class="job-company-name sub-text secondary-text">
                        
                        <a class="secondary-text" href="/jobs/company/${encodeURIComponent(job.company_name)}">${job.company_name}</a>
                        
                        </div>
                                                                            
                               
                      </div>
                    
                    </div>
                                                              <div class="job-title main-text"><a href="/jobs/${job.id}">${job.title.slice(0, 40)}</a></div>

                    <div class="job-title-location secondary-text">
                ${job.salary || job.salary_max ? `
                  <span class="job-salary sub-text">
                    ${getFormattedSalary(job.salary, job.salary_max)}
                  </span>
                  <span style="font-size:.7rem;">•</span>
                ` : ``}

                <div class="location sub-text">
                  <span class="material-symbols-outlined">location_on</span>
                  ${formatLocation(job.location)}
                </div>
                  <span style="font-size:.7rem;">•</span>

                <div class="applicants sub-text"><span class="material-symbols-outlined">person</span>${job.applicants ? job.applicants : '0'}</div>
                  <span style="font-size:.7rem;">•</span>

                <div class="job-post-date sub-text">
                  <span class="material-symbols-outlined">calendar_month</span>
                  ${formatRelativeDate(job.postedDate)}
                </div>

                    </div>

                  </div>


                  ${!isMobile ? `

                  ` : `
                  `}
                </div>
              </div>
            `).join('');
               jobslistContainer.innerHTML += '<div class="see-more regular-button-normal"><a href="/jobs">See More</a></div>';


               const jobElements = jobslistContainer.querySelectorAll('.job');
             })
             .catch(error => {
               console.error('Error fetching job previews:', error);
             });
         }


         function fetchCommunityJobPreviews(communityId) {
           let currentPage = 1;
           const itemsPerPage = 10;
           fetch(`/api/community/${communityId}/jobs?page=${currentPage}&limit=${itemsPerPage}`)
             .then(response => response.json())
             .then(data => {
               const jobs = data.jobPostings;
               const isMobile = window.matchMedia('(max-width: 768px)').matches;
               let jobslistContainer;
               if (isMobile) {
                 jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
               } else {
                 jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
               }

               if (jobslistContainer) {
                 jobslistContainer.innerHTML = jobs.map(job => `
              <div class="job" onclick="window.location.href='/jobs/${job.id}'">
                <div class="job-content">
                  <div class="job-content-header">
                    <div class="company-logo-container">
                    ${job.company_logo ? `
                      <img loading="lazy" src="${job.company_logo}" alt="" class="thumbnail ${isMobile ? `thumbnail-tiny` : `thumbnail-tiny`} thumbnail-regular" />
                      ` : ``}
                                            <div class="job-posting-header">
                        <div class="job-company-name sub-text secondary-text">
                        
                        <a class="secondary-text" href="/jobs/company/${encodeURIComponent(job.company_name)}">${job.company_name}</a>
                        
                        </div>
                                                                            
                               
                      </div>
                    
                    </div>
                                                              <div class="job-title main-text"><a href="/jobs/${job.id}">${job.title.slice(0, 40)}</a></div>

                    <div class="job-title-location secondary-text">
                ${job.salary || job.salary_max ? `
                  <span class="job-salary sub-text">
                    ${getFormattedSalary(job.salary, job.salary_max)}
                  </span>
                  <span style="font-size:.7rem;">•</span>
                ` : ``}

                <div class="location sub-text">
                  <span class="material-symbols-outlined">location_on</span>
                  ${formatLocation(job.location)}
                </div>
                  <span style="font-size:.7rem;">•</span>

                <div class="applicants sub-text"><span class="material-symbols-outlined">person</span>${job.applicants ? job.applicants : '0'}</div>
                  <span style="font-size:.7rem;">•</span>

                <div class="job-post-date sub-text">
                  <span class="material-symbols-outlined">calendar_month</span>
                  ${formatRelativeDate(job.postedDate)}
                </div>

                    </div>

                  </div>


                  ${!isMobile ? `

                  ` : `
                  `}
                </div>
              </div>
            `).join('');
                 jobslistContainer.innerHTML += '<div class="see-more regular-button-normal"><a href="/jobs">See More</a></div>';


                 const jobElements = jobslistContainer.querySelectorAll('.job');
                 jobElements.forEach(jobElement => {
                   const locationFlair = jobElement.querySelector('#location-flair');
                   const location = locationFlair.dataset.location;
                 });
               }

             })
             .catch(error => {
               console.error('Error fetching job previews:', error);
             });
         }

         document.addEventListener("DOMContentLoaded", () => {
           const isMobile = window.matchMedia('(max-width: 768px)').matches;
           let jobslistContainer;
           if (isMobile) {
             jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
           } else {
             jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
           }
           const postsContainer = document.getElementById('posts-container');
           if (!postsContainer) {
             if (jobslistContainer)
               try {
                 fetchJobPreviews();
               } catch (error) {
                 console.error('Error fetching job previews:', error);
               }
             return;
           }
           const communityId = postsContainer.dataset.communityId || null;

           if (communityId) {
             if (jobslistContainer) {
               fetchCommunityJobPreviews(communityId);
             }
           } else {
             if (jobslistContainer) {
               try {
                 fetchJobPreviews();
               } catch (error) {
                 console.error('Error fetching job previews:', error);
               }
             }
           }
         });
       </script>