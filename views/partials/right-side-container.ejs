       <link rel="stylesheet" href="/css/right-side-container.css" />


       <div class="right-side-container">
         <div class="job-header">
           <h5>Openings</h5>
         </div>
         <div class="jobslist flex-col gap-1">

         </div>
       </div>
       <script>
         const stateMappings = {
           Alabama: 'AL',
           Alaska: 'AK',
           Arizona: 'AZ',
           Arkansas: 'AR',
           California: 'CA',
           Colorado: 'CO',
           Connecticut: 'CT',
           Delaware: 'DE',
           Florida: 'FL',
           Georgia: 'GA',
           Hawaii: 'HI',
           Idaho: 'ID',
           Illinois: 'IL',
           Indiana: 'IN',
           Iowa: 'IA',
           Kansas: 'KS',
           Kentucky: 'KY',
           Louisiana: 'LA',
           Maine: 'ME',
           Maryland: 'MD',
           Massachusetts: 'MA',
           Michigan: 'MI',
           Minnesota: 'MN',
           Mississippi: 'MS',
           Missouri: 'MO',
           Montana: 'MT',
           Nebraska: 'NE',
           Nevada: 'NV',
           'New Hampshire': 'NH',
           'New Jersey': 'NJ',
           'New Mexico': 'NM',
           'New York': 'NY',
           'North Carolina': 'NC',
           'North Dakota': 'ND',
           Ohio: 'OH',
           Oklahoma: 'OK',
           Oregon: 'OR',
           Pennsylvania: 'PA',
           'Rhode Island': 'RI',
           'South Carolina': 'SC',
           'South Dakota': 'SD',
           Tennessee: 'TN',
           Texas: 'TX',
           Utah: 'UT',
           Vermont: 'VT',
           Virginia: 'VA',
           Washington: 'WA',
           'West Virginia': 'WV',
           Wisconsin: 'WI',
           Wyoming: 'WY',
           'United States': 'US',
         };

         function formatRelativeDate(dateString) {
           const now = new Date();
           const postedDate = new Date(dateString);
           const diffTime = Math.abs(now - postedDate);
           const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
           const diffMonths = Math.floor(diffDays / 30);
           const diffYears = Math.floor(diffDays / 365);

           if (diffYears > 0) {
             return `${diffYears}y`;
           } else if (diffMonths > 0) {
             return `${diffMonths}m`;
           } else if (diffDays > 0) {
             return `${diffDays}d`;
           } else {
             return 'Today';
           }
         }

         function formatLocation(location) {
           if (!location) return "";

           const parts = location.split(',').map(part => part.trim());

           // Helper function to check if a string is a US state
           const isUSState = (str) => Object.keys(stateMappings).includes(str) || Object.values(stateMappings).includes(str);

           // Helper function to get state abbreviation
           const getStateAbbr = (state) => {
             const fullName = Object.keys(stateMappings).find(key => key.toLowerCase() === state.toLowerCase());
             return fullName ? stateMappings[fullName] : state;
           };

           if (parts.length === 1) {
             return parts[0];
           } else if (parts.length === 2) {
             if (isUSState(parts[1])) {
               return getStateAbbr(parts[1]);
             } else {
               return parts[1]; // Assume it's a non-US country
             }
           } else if (parts.length >= 3) {
             if (parts[2].trim().toLowerCase() === 'united states') {
               return getStateAbbr(parts[1]);
             } else {
               return parts[2]; // Return the country for non-US locations
             }
           }

           return location.trim();
         }

         function formatSalary(salary) {
           if (!salary) return "";
           return salary >= 1000 ? (salary / 1000).toFixed(0) + "k" : salary.toString();
         }

         function getFormattedSalary(salary, salaryMax) {
           if (salary && salaryMax) {
             const average = Math.round((salary + salaryMax) / 2);
             return `${formatSalary(average)}`;
           } else if (salary) {
             return formatSalary(salary);
           }
           return "";
         }

         function fetchJobPreviews() {
           fetch(`/api/randomJobs`)
             .then(response => response.json())
             .then(data => {
               const jobs = data.jobPostings;
               const isMobile = window.matchMedia('(max-width: 768px)').matches;
               let jobslistContainer;
               if (isMobile) {
                 jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
               } else {
                 jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
               }
               jobslistContainer.innerHTML = jobs.map(job => `
              <div class="job" onclick="window.location.href='/jobs/${job.id}'">
                <div class="job-content">
                  <div class="job-content-header">
                    <div class="company-logo-container">
                    ${job.company_logo ? `
                      <img loading="lazy" src="${job.company_logo}" alt="" class="thumbnail ${isMobile ? `thumbnail-tiny` : `thumbnail-tiny`} thumbnail-regular" />
                      ` : ``}
                                            <div class="job-posting-header">
                        <div class="job-company-name sub-text secondary-text">
                        
                        <a class="secondary-text" href="/jobs/company/${encodeURIComponent(job.company_name)}">${job.company_name}</a>
                        
                        </div>
                        
                                          <div class="job-title main-text"><a href="/jobs/${job.id}">${job.title.slice(0, 40)}</a></div>
                                                    
                               
                      </div>
                    
                    </div>
                    <div class="job-title-location secondary-text">
${job.salary || job.salary_max ? `
  <span class="job-salary sub-text">
    <span class="material-symbols-outlined">attach_money</span>
    ${getFormattedSalary(job.salary, job.salary_max)}
  </span>
` : ``}

<div class="location sub-text">
  <span class="material-symbols-outlined">location_on</span>
  ${formatLocation(job.location)}
</div>
                      <div class="applicants sub-text"><span class="material-symbols-outlined">person</span>${job.applicants ? job.applicants : '0'}</div>
<div class="job-post-date sub-text">
  <span class="material-symbols-outlined">calendar_month</span>
  ${formatRelativeDate(job.postedDate)}
</div>
                    </div>

                  </div>


                  ${!isMobile ? `
                    <div class="job-description">
                      <p>${job.description}</p>
                    </div>
                  ` : `
                  `}
                </div>
              </div>
            `).join('');
               jobslistContainer.innerHTML += '<div class="see-more regular-button-normal"><a href="/jobs">See More</a></div>';


               const jobElements = jobslistContainer.querySelectorAll('.job');
             })
             .catch(error => {
               console.error('Error fetching job previews:', error);
             });
         }


         function fetchCommunityJobPreviews(communityId) {
           let currentPage = 1;
           const itemsPerPage = 10;
           fetch(`/api/community/${communityId}/jobs?page=${currentPage}&limit=${itemsPerPage}`)
             .then(response => response.json())
             .then(data => {
               const jobs = data.jobPostings;
               const isMobile = window.matchMedia('(max-width: 768px)').matches;
               let jobslistContainer;
               if (isMobile) {
                 jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
               } else {
                 jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
               }

               if (jobslistContainer) {
                 jobslistContainer.innerHTML = jobs.map(job => `
              <div class="job" onclick="window.location.href='/jobs/${job.id}'">
                <div class="job-content">
                  <div class="job-content-header">
                    <div class="company-logo-container">
                      ${job.company_logo ? `
                      <img loading="lazy" src="${job.company_logo}" alt="" class="job-company-logo" />
                      ` : ``}
                    </div>
                    <div class="job-title-location">
                      <div class="job-posting-header">
                        <div class="job-company-name">${job.company_name}</div>
                      </div>
                    </div>
                    <div class="job-flairs">
                      <span class="job-flair" id="pay-flair">$${Math.floor((job.salary) /  1000)}k+</span>
                  </div>
                  </div>
                  <div class="job-title"><a>${job.title.slice(0, 40)}</a></div>

                  ${!isMobile ? `
                    <div class="job-description">
                      <p>${job.description}</p>
                    </div>
                  ` : `
                  `}
                </div>
              </div>
            `).join('');
                 jobslistContainer.innerHTML += '<div class="see-more regular-button-normal"><a href="/jobs">See More</a></div>';


                 const jobElements = jobslistContainer.querySelectorAll('.job');
                 jobElements.forEach(jobElement => {
                   const locationFlair = jobElement.querySelector('#location-flair');
                   const location = locationFlair.dataset.location;
                 });
               }

             })
             .catch(error => {
               console.error('Error fetching job previews:', error);
             });
         }

         document.addEventListener("DOMContentLoaded", () => {
           const isMobile = window.matchMedia('(max-width: 768px)').matches;
           let jobslistContainer;
           if (isMobile) {
             jobslistContainer = document.querySelector('div.mobile-jobs-container > div.jobslist');
           } else {
             jobslistContainer = document.querySelector('.right-side-container > div.jobslist');
           }
           const postsContainer = document.getElementById('posts-container');
           if (!postsContainer) {
             if (jobslistContainer)
               try {
                 fetchJobPreviews();
               } catch (error) {
                 console.error('Error fetching job previews:', error);
               }
             return;
           }
           const communityId = postsContainer.dataset.communityId || null;

           if (communityId) {
             if (jobslistContainer) {
               fetchCommunityJobPreviews(communityId);
             }
           } else {
             if (jobslistContainer) {
               try {
                 fetchJobPreviews();
               } catch (error) {
                 console.error('Error fetching job previews:', error);
               }
             }
           }
         });
       </script>