<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&display=swap" rel="stylesheet">
<nav class="navbar">
  <%
    const isActive = (path) => {
      return currentPath === path || currentPath.startsWith(`${path}/`);
    };
    %>
  <div class="nav-bar">
    <div class="logo">
      <div class="logo-img">
        <a href="/"> <img class="core-header-img" src="/img/core.png" alt="CORE" /> </a>
      </div>
      <div class="nav-text-and-user-btns">
        <div class="nav-text-container">
          <% function getTintFromName(name) {
              let hash = 0;
              for (let i = 0; i < name.length; i++) {
                hash = name.charCodeAt(i) + ((hash << 18) - hash);
              }
              const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
              const tintColor = `#${color}95`; 
              return tintColor;
            }
            let navText = 'â€Ž ';
            let user = locals.user; 
            let communityId = locals.communityId;
            let postUser = locals.post && locals.post.user && locals.post.user.username ? locals.post.user.username : null;
            let otherUser = locals.otheruser;
            let navbarTint = '';

            if (locals.community) {
              navbarTint = locals.community.community_color;
            }%>
          CORE
        </div>

        <div class="nav-btns">
          <ul class="nav-links">
            <li>
              <a href="/" class="navbar-button <%= currentPath === '/' ? 'active' : '' %>">
                <span class="material-symbols-outlined">
                  home
                </span>
                Home
              </a>
            </li>
            <li>
              <a href="/networks" class="navbar-button <%= currentPath === '/networks' ? 'active' : '' %>">
                <span class="material-symbols-outlined">
                  hub
                </span>
                Networks
              </a>
            </li>
            <li>
              <a href="/jobs" class="navbar-button <%= currentPath === '/jobs' ? 'active' : '' %>">
                <span class="material-symbols-outlined">
                  work
                </span>
                Openings</a>
            </li>

          </ul>
        </div>
      </div>

    </div>
    <div class="top-bar">
      <div class="hamburger-menu">

        <div class="menu-wrapper">
          <button id="menu-button" class="menu-button">
            <div class="menu-bar top-bar"></div>
            <div class="menu-bar middle-bar"></div>
            <div class="menu-bar bottom-bar"></div>
          </button>
        </div>
        <button id="expandSearch" class="search-button">
        </button>
        <div class="menu-content" id="menu-content">
          <a href="/" class="<%= isActive('/') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                home
              </span>
              Home
            </div>
          </a>

          <a href="/jobs" class="<%= isActive('/jobs') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                work
              </span>
              Openings
            </div>
          </a>
          <a href="/networks" class="<%= isActive('/networks') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                workspaces
              </span>
              Networks

            </div>
          </a>
          <a href="/updates" class="<%= isActive('/updates') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                update
              </span>
              Updates

            </div>
          </a>


          <% if (user) { %>
          <form id="logoutForm" action="/logout?_method=DELETE" method="POST" style="display: none"></form>
          <a href="/favorites" class="<%= isActive('/favorites') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                favorite
              </span>
              Favorites
            </div>
          </a>
          <a href="/settings" class="<%= isActive('/settings') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                settings
              </span>
              Settings
            </div>
          </a>
          <a href="/feedback" class="<%= isActive('/feedback') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                feedback
              </span>
              Feedback

            </div>
          </a>
          <% } %>
          <a href="/about" class="<%= isActive('/about') ? 'active' : '' %>">
            <div class="menu-item main-text secondary-text">
              <span class="material-symbols-outlined" id="menu-community-icon">
                info
              </span>
              About

            </div>
          </a>

          <div class="mobile-menu-header sub-text">
            <h4 class="secondary-text">Trending Posts</h4>
          </div>
          <div class="mobile-trending-posts">
          </div>
        </div>

        <div id="overlay"></div>
      </div>
      <div id="mobileSearchResults" class="search-results-container"></div>

      <div class="user-btns">
        <ul class="user-links">
          <li class="navigation-button" id="search-toggle-button">
            <span id="secondary-text" class="material-symbols-outlined">
              search
            </span>
          </li>
          <li>
            <% if (user && user.avatar) { %>
            <div class="nav-avatar">
              <img src="<%= user.avatar %>" alt="Avatar" class="user-avatar" id="user-avatar">
              <div class="avatar-online-status" style="background: <% if (user.profile_border_color) { %>#5fb968<% } else { %>#5fb968<% } %>;height: 7px;width: 7px;z-index: 10;border-radius: 6px;position: absolute;bottom: 0;right: 0;"> </div>
              <div class="avatar-dropdown">
                <a href="#" onclick="document.getElementById('logoutForm').submit()">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined secondary-text" id="nb-icon">
                      logout
                    </span>
                  </div>
                </a>

                <a href="/feedback">
                  <div class="avatar-dropdown-item">

                    <span class="material-symbols-outlined secondary-text" id="nb-icon">feedback</span>
                  </div>

                </a>
                <a href="/user/<%= user.username %>">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined secondary-text" id="nb-icon">
                      person
                    </span>
                  </div>
                </a>
                <a href="/favorites">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined secondary-text" id="nb-icon">
                      favorite
                    </span>
                  </div>
                </a>
                <a href="/notifications">
                  <div class="avatar-dropdown-item">
                    <span class="material-symbols-outlined secondary-text" id="nb-icon">
                      notifications
                    </span>
                    <span id="unreadCount" class="count-bubble"></span>
                  </div>
                </a>
              </div>
            </div>
            <% } else if (user && !user.avatar) { %>
            <div class="nav-avatar">
              <a href="/user/<%= user.username %>" class="inbox-button">
                <span class="material-symbols-outlined" id="nb-icon">
                  account_circle
                </span>
              </a>
            </div>
            <% } else if (!user) { %>
            <div class="nav-avatar">
              <div class="border-background">
                <a href="/login" class="inbox-button" id="login-btn">
                  Sign in
                </a>
              </div>
            </div>
            <% } %>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
  <div class="second-nav-bar">
    <div class="second-nav-btns">
      <ul class="second-nav-links">
        <li class="dropdown">
          <% 
    const pathTitles = {
      '/': 'Home',
      '/jobs': 'Openings',
      '/updates': 'Updates',
      '/c': 'Communities',
      '/favorites': 'Favorites',
      '/create': 'Create',
      '/notifications': 'Notifications',
      '/posts': 'Community',
      '/login': 'Login',
      '/register': 'Register',
      '/edit-experience': 'Edit Experience',
      '/about': 'About',
      '/privacy': 'Privacy Policy',
      '/search': 'Search',
      '/settings': "Settings"
    };

    const getTitle = (path) => {
      if (path === '/' && typeof post !== 'undefined') {
        return `Community / ${post.community.shortname}`;
          } else if (path.startsWith('/about')) {
        return 'About';
      } else if (path.startsWith('/privacy')) {
        return 'Privacy Policy';
      } else if (path.startsWith('/user/') && typeof otheruser !== 'undefined') {
        if (path.includes('followers') || path.includes('following')) {
          return `@${otheruser.username} / ${path.includes('followers') ? 'Followers' : 'Following'}`;
        } else {
          return `@${otheruser.username} / ${otheruser.firstname} ${otheruser.lastname}`;
        }
      }  else if (path.startsWith('/search') && typeof searchTerm !== 'undefined') {
        return `Search / ${searchTerm}`;
      }
      else if (path.startsWith('/networks/') && typeof community !== 'undefined') {
        return `/${community.shortname}`;
      } else if (path.startsWith('/jobs/') && typeof job !== 'undefined') {
        return `Openings / ${job.title}`;
      } else if (path.startsWith('/posts/') && path.includes('edit') && typeof post !== 'undefined') {
        return `Edit / ${post.title}`;
      } else if (path.startsWith('/posts/') && typeof post !== 'undefined') {
        return `${post.community.shortname} / ${post.username}`;
      } else if (path.startsWith('/tags/') && typeof tag !== 'undefined') {
        return `${tag}`;
      } else if (path.startsWith('/edit-experience')) {
        return 'Edit Experience';
      } else {
        return pathTitles[path] || 'Navigation';
      }
    };

    %>

          <a href="/" class="navbar-button <%= isActive('/') ? 'active' : '' %>" style="display: flex;">
            <span class="material-symbols-outlined">
              home
            </span>
            Home
          </a>
        </li>
        <li class="dropdown">
          <% if (isActive('/posts') && typeof post !== 'undefined') { %>
          <span class="community-preview" style="color: <%= post.community.community_color%>">
            <span class="material-symbols-outlined" style="color:<%= community.community_color %>;">
              <%= post.community ? post.community.mini_icon : '' %>
            </span>
          </span>
          <% } %>

          <% if (isActive('/networks') && typeof community !== 'undefined') { %>
          <span class="community-preview" style="color: <%= community.community_color%>">
            <span class="material-symbols-outlined" style="color:<%= community.community_color %>;">
              <%= community.mini_icon %>
            </span>
          </span>
          <% } %>

          <a href="/networks/" class="navbar-button <%= (isActive('/networks') || (isActive('/posts') && typeof post !== 'undefined')) ? 'active' : '' %>" style="border-color:<%= isActive('/posts') && typeof post !== 'undefined' ? post.community.community_color : (isActive('/networks') && typeof community !== 'undefined' ? community.community_color : '') %>; display: flex;"> <% if ((isActive('/networks') && typeof community !== 'undefined') || isActive('/posts')) { %>
            <span class="material-symbols-outlined hidden">
              workspaces
            </span>
            <% } else { %>
            <span class="material-symbols-outlined">
              workspaces
            </span>
            <% } %>
            Networks
          </a>
        </li>
        <li class="dropdown">
          <% if (isActive('/jobs') && (typeof job !== 'undefined' || typeof company !== 'undefined')) { %>
          <span class="community-preview secondary-text">
            <img src="<%= typeof job !== 'undefined' ? job.company_logo : company.logo %>" style="height: 16px;">
          </span>

          <% } %>
          <a href="/jobs" class="navbar-button <%= isActive('/jobs') ? 'active' : '' %>" style="display: flex;">
            <span class="material-symbols-outlined">
              work
            </span>
            Openings
          </a>
        </li>
      </ul>
    </div>
  </div>

  <div class="latest-commit-banner" id="latestCommitBanner" style="display: none;">
    <div class="latest-commit-info">
      <div class="latest-commit-main">
        <span class="latest-commit-message"></span>
      </div>
      <button id="closeCommitBanner">
        <span class="material-symbols-outlined">close</span>
      </button>
    </div>
  </div>
</nav>
<div class="search-bar adaptive-main adaptive-border-bottom" id="search-bar-div">
  <div class="search-bar-container">
    <form action="/search" method="GET">
      <input type="text" name="searchTerm" id="search-bar" placeholder="Search" />
      <button class="submit-button-normal" id="search-button" type="submit">
        Search
      </button>
    </form>
  </div>
</div>
<div class="overlay" id="search-overlay"></div>
<style>
  .search-bar {
    display: none;
  }

  .overlay {
    display: none;
  }

  <% if (navbarTint) {
    %>.navbar {
      border-color: <%=navbarTint %>;
    }

    #community-header-text {
      color: <%=navbarTint %> !important;
    }

    #community-header-text:hover {
      color: <%=navbarTint %> !important;
    }


    .comm-short-title {
      color: <%=navbarTint %> !important;
    }


    #community-header-text:hover {
      color: <%=navbarTint %> !important;
    }

    .nested-comment>.comment {
      border-color: <%=navbarTint %>4d !important;
    }

    <%
  }

  %>
</style>


<script>
  function checkFollowing(userId) {
    fetch(`/users/${userId}/is-following`)
      .then(response => response.json())
      .then(data => {
        const followButton = document.querySelector(`button[onclick="followUser('${userId}')"]`);
        if (followButton) {
          if (data.isFollowing) {
            followButton.innerHTML = '<span class="material-symbols-outlined">close</span><p class="bold">Unfollow</p>';
            followButton.classList.remove('submit-button-normal');
            followButton.classList.add('cancel-button-normal');
          } else {
            followButton.innerHTML = '<span class="material-symbols-outlined">person_add</span><p class="bold">Follow</p>';
            followButton.classList.remove('cancel-button-normal');
            followButton.classList.add('submit-button-normal');
          }
        }
      })
      .catch(error => {
        console.error('Error checking follow status:', error);
      });
  }

  function followUser(username) {
    fetch(`/users/${username}/follow`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      .then(response => response.json())
      .then(data => {
        if (data) {
          const followButton = document.querySelector(`button[onclick="followUser('${username}')"]`);
          if (data.following === true) {
            showBannerNotification('User followed successfully');
            followButton.innerHTML = '<span class="material-symbols-outlined">close</span>Unfollow';
          } else {
            showBannerNotification('User unfollowed successfully');
            followButton.innerHTML = '<span class="material-symbols-outlined">person_add</span>Follow';

          }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showBannerNotification('An error occurred while following user');
      });
  }

  async function share(title, text, url, type = null, id = null) {
    const shareData = {
      title,
      text,
      url
    };

    try {
      if (type && id) {
        const response = await fetch(`/api/${type}/${id}/share`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
        });
        if (!response.ok) throw new Error('Failed to increment share count');
        const data = await response.json();
        console.log(`${type.charAt(0).toUpperCase() + type.slice(1)} share count updated:`, data.newShareCount);
      }

      if (navigator.share) {
        await navigator.share(shareData);
        console.log('Content shared successfully');
      } else if (navigator.clipboard && navigator.clipboard.writeText) {
        await navigator.clipboard.writeText(url);
        alert('Content URL copied to clipboard!');
      } else {
        const textArea = document.createElement('textarea');
        textArea.value = url;
        textArea.style.cssText = 'position:fixed;opacity:0;';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        if (!successful) throw new Error('Failed to copy');
        alert('Content URL copied to clipboard!');
      }
    } catch (error) {
      console.error('Error sharing content:', error);
      alert('Failed to share content. Please try again.');
    }
  }

  let bannerTimeout;

  function showBannerNotification(message, duration = 7000) {
    const banner = document.getElementById("latestCommitBanner");
    const messageElement = banner.querySelector(".latest-commit-message");

    messageElement.textContent = message;
    banner.style.display = "block"; // Show the banner

    // Clear any existing timeout
    if (bannerTimeout) {
      clearTimeout(bannerTimeout);
    }

    // Set up auto-hide if duration is provided
    if (duration > 0) {
      bannerTimeout = setTimeout(() => {
        hideBanner();
      }, duration);
    }

    // Add click event listener to the banner itself for manual dismissal
    banner.onclick = hideBanner;
  }

  function hideBanner() {
    const banner = document.getElementById("latestCommitBanner");
    banner.style.display = "none";

    // Remove the click event listener from the banner
    banner.onclick = null;

    // Clear the timeout if it exists
    if (bannerTimeout) {
      clearTimeout(bannerTimeout);
    }
  }

  function getTrendingPosts() {

    const isMobile = window.matchMedia("only screen and (max-width: 768px)").matches;
    let trendingPostsContainer;
    if (!isMobile) {
      trendingPostsContainer = document.querySelector('.desktop-trending-posts');
    } else {
      trendingPostsContainer = document.querySelector('.mobile-trending-posts');
    }

    // Check if the container already has content
    if (trendingPostsContainer.children.length > 0) {
      return;
    }



    fetch('/api/trending-posts') // Adjust this to your server's endpoint
      .then(response => response.json())
      .then(posts => {
        const isMobile = window.matchMedia("only screen and (max-width: 768px)").matches;
        let trendingPostsContainer;
        if (!isMobile) {
          trendingPostsContainer = document.querySelector('.desktop-trending-posts');
        } else {
          trendingPostsContainer = document.querySelector('.mobile-trending-posts');
        }
        trendingPostsContainer.innerHTML = ''; // Clear existing posts

        posts.forEach(trending_post => {
          const postElement = document.createElement('div');
          postElement.className = 'trending-post';
          postElement.onclick = () => {
            window.location.href = `/posts/${trending_post.id}`;
          };

          // Add content to postElement here. Example:
          postElement.innerHTML = `
                <div class="trending-info sub-text">
                  ${trending_post.views}
                <span class="material-symbols-outlined" style="color: var(--active-indicator-color);">
      visibility
      </span> 
      </div>
                <div class="trending-post-content">
                  <div class="trending-post-user-info main-text">
                    <p class="main-text"><strong>${(trending_post.firstname && trending_post.lastname) ? `${trending_post.firstname.charAt(0).toUpperCase() + trending_post.firstname.slice(1).toLowerCase()} ${trending_post.lastname.charAt(0).toUpperCase() + trending_post.lastname.slice(1).toLowerCase()}` : `@${trending_post.username}`}</strong> <span class="sub-text" style="color:${trending_post.community_color}">/${trending_post.community_name}</span></p>
                    </div>
                                        <div class="secondary-text sub-text"><p>${trending_post.title} </p> </div>

                </div>

            `;

          trendingPostsContainer.appendChild(postElement);
        });
      })
      .catch(error => console.error('Error fetching trending posts:', error));
  }

  const stateMappings = {
    Alabama: 'AL',
    Alaska: 'AK',
    Arizona: 'AZ',
    Arkansas: 'AR',
    California: 'CA',
    Colorado: 'CO',
    Connecticut: 'CT',
    Delaware: 'DE',
    Florida: 'FL',
    Georgia: 'GA',
    Hawaii: 'HI',
    Idaho: 'ID',
    Illinois: 'IL',
    Indiana: 'IN',
    Iowa: 'IA',
    Kansas: 'KS',
    Kentucky: 'KY',
    Louisiana: 'LA',
    Maine: 'ME',
    Maryland: 'MD',
    Massachusetts: 'MA',
    Michigan: 'MI',
    Minnesota: 'MN',
    Mississippi: 'MS',
    Missouri: 'MO',
    Montana: 'MT',
    Nebraska: 'NE',
    Nevada: 'NV',
    'New Hampshire': 'NH',
    'New Jersey': 'NJ',
    'New Mexico': 'NM',
    'New York': 'NY',
    'North Carolina': 'NC',
    'North Dakota': 'ND',
    Ohio: 'OH',
    Oklahoma: 'OK',
    Oregon: 'OR',
    Pennsylvania: 'PA',
    'Rhode Island': 'RI',
    'South Carolina': 'SC',
    'South Dakota': 'SD',
    Tennessee: 'TN',
    Texas: 'TX',
    Utah: 'UT',
    Vermont: 'VT',
    Virginia: 'VA',
    Washington: 'WA',
    'West Virginia': 'WV',
    Wisconsin: 'WI',
    Wyoming: 'WY',
    'United States': 'US',
  };

  const countryMappings = {
    'United States': 'USA',
    'United Kingdom': 'UK',
    'Canada': 'CAN',
    'Australia': 'AUS',
    'Germany': 'DEU',
    'France': 'FRA',
    'Japan': 'JPN',
    'China': 'CHN',
    'India': 'IND',
    'Brazil': 'BRA',
    'Russia': 'RUS',
    'South Korea': 'KOR',
    'Italy': 'ITA',
    'Spain': 'ESP',
    'Mexico': 'MEX',
    'Netherlands': 'NLD',
    'Saudi Arabia': 'SAU',
    'Turkey': 'TUR',
    'Switzerland': 'CHE',
    'Argentina': 'ARG',
    'South Africa': 'ZAF',
    'Sweden': 'SWE',
    'Belgium': 'BEL',
    'Norway': 'NOR',
    'Austria': 'AUT',
    'Denmark': 'DNK',
    'Finland': 'FIN',
    'Greece': 'GRC',
    'Ireland': 'IRL',
    'Portugal': 'PRT',
    'Poland': 'POL',
    'Czech Republic': 'CZE',
    'Hungary': 'HUN',
    'New Zealand': 'NZL',
    'Singapore': 'SGP',
    'Malaysia': 'MYS',
    'Philippines': 'PHL',
    'Thailand': 'THA',
    'Indonesia': 'IDN',
    'Vietnam': 'VNM',
    'Israel': 'ISR',
    'United Arab Emirates': 'ARE',
    'Chile': 'CHL',
    'Colombia': 'COL',
    'Peru': 'PER',
    'Pakistan': 'PAK',
    'Bangladesh': 'BGD',
    'Nigeria': 'NGA',
    'Egypt': 'EGY',
    'Ukraine': 'UKR',
    'Romania': 'ROU',
    'Kazakhstan': 'KAZ',
    'Qatar': 'QAT',
    'Kuwait': 'KWT',
    'Bulgaria': 'BGR',
    'Croatia': 'HRV',
    'Lithuania': 'LTU',
    'Slovakia': 'SVK',
    'Slovenia': 'SVN',
    'Latvia': 'LVA',
    'Estonia': 'EST',
    'Luxembourg': 'LUX',
    'Iceland': 'ISL',
    'Malta': 'MLT',
    'Cyprus': 'CYP',
    'Serbia': 'SRB',
    'Montenegro': 'MNE',
    'North Macedonia': 'MKD',
    'Bosnia and Herzegovina': 'BIH',
    'Albania': 'ALB',
    'Georgia': 'GEO',
    'Armenia': 'ARM',
    'Azerbaijan': 'AZE',
    'Belarus': 'BLR',
    'Moldova': 'MDA',
    'Uzbekistan': 'UZB',
    'Turkmenistan': 'TKM',
    'Kyrgyzstan': 'KGZ',
    'Tajikistan': 'TJK',
    'Morocco': 'MAR',
    'Tunisia': 'TUN',
    'Algeria': 'DZA',
    'Libya': 'LBY',
    'Sudan': 'SDN',
    'Ethiopia': 'ETH',
    'Kenya': 'KEN',
    'Uganda': 'UGA',
    'Tanzania': 'TZA',
    'Ghana': 'GHA',
    'Ivory Coast': 'CIV',
    'Cameroon': 'CMR',
    'Senegal': 'SEN',
    'Zimbabwe': 'ZWE',
    'Zambia': 'ZMB',
    'Angola': 'AGO',
    'Mozambique': 'MOZ',
    'Namibia': 'NAM',
    'Botswana': 'BWA',
    'Malawi': 'MWI',
    'Rwanda': 'RWA',
    'Burundi': 'BDI',
    'Mauritius': 'MUS',
    'Madagascar': 'MDG',
    'Seychelles': 'SYC',
    'Lesotho': 'LSO',
    'Eswatini': 'SWZ',
    'Comoros': 'COM',
    'Djibouti': 'DJI',
    'Eritrea': 'ERI',
    'Somalia': 'SOM',
    'Hong Kong': 'HK',
    'Guatemala': 'GTM',
    'Gabon': 'GAB',
    'Equatorial Guinea': 'GNQ',
    'Central African Republic': 'CAF',
    'Chad': 'TCD',
    'Niger': 'NER',
    'Mali': 'MLI',
    'Burkina Faso': 'BFA',
    'Benin': 'BEN',
    'Togo': 'TGO',
    'Sierra Leone': 'SLE',
    'Liberia': 'LBR',
    'Guinea': 'GIN',
    'Guinea-Bissau': 'GNB',
    'Gambia': 'GMB',
    'Cape Verde': 'CPV',
    'Mauritania': 'MRT',
    'Western Sahara': 'ESH',
    'Palestine': 'PSE',
    'Lebanon': 'LBN',
    'Jordan': 'JOR',
    'Syria': 'SYR',
    'Iraq': 'IRQ',
    'Yemen': 'YEM',
    'Oman': 'OMN',
    'Bahrain': 'BHR',
    'Sri Lanka': 'LKA',
    'Nepal': 'NPL',
    'Bhutan': 'BTN',
    'Maldives': 'MDV',
    'Myanmar': 'MMR',
    'Laos': 'LAO',
    'Cambodia': 'KHM',
    'Brunei': 'BRN',
    'East Timor': 'TLS',
    'Papua New Guinea': 'PNG',
    'Fiji': 'FJI',
    'Samoa': 'WSM',
    'Tonga': 'TON',
    'Vanuatu': 'VUT',
    'Solomon Islands': 'SLB',
    'Micronesia': 'FSM',
    'Marshall Islands': 'MHL',
    'Palau': 'PLW',
    'Kiribati': 'KIR',
    'Nauru': 'NRU',
    'Tuvalu': 'TUV',
    // Add more countries as needed
  };

  function formatLocation(location) {
    if (!location) return "";

    const parts = location.split(',').map(part => part.trim());

    // Helper function to check if a string is a US state
    const isUSState = (str) => Object.keys(stateMappings).includes(str) || Object.values(stateMappings).includes(str);

    // Helper function to get state abbreviation
    const getStateAbbr = (state) => {
      const fullName = Object.keys(stateMappings).find(key => key.toLowerCase() === state.toLowerCase());
      return fullName ? stateMappings[fullName] : state;
    };

    // Helper function to get country abbreviation
    const getCountryAbbr = (country) => {
      const fullName = Object.keys(countryMappings).find(key => key.toLowerCase() === country.toLowerCase());
      return fullName ? countryMappings[fullName] : country;
    };

    if (parts.length === 1) {
      return getCountryAbbr(parts[0]);
    } else if (parts.length === 2) {
      if (isUSState(parts[1])) {
        return getStateAbbr(parts[1]);
      } else {
        return getCountryAbbr(parts[1]);
      }
    } else if (parts.length >= 3) {
      if (parts[2].trim().toLowerCase() === 'united states') {
        return getStateAbbr(parts[1]);
      } else {
        return getCountryAbbr(parts[2]);
      }
    }

    return location.trim();
  }

  function getAllCommunities() {
    fetch('/api/communities') // Adjust this to your server's endpoint
      .then(response => response.json())
      .then(communities => {
        console.log(communities);
        // Use window.matchMedia to check for mobile devices
        const isMobile = window.matchMedia("only screen and (max-width: 768px)").matches;
        // Select the container based on whether or not it is a mobile device
        const containerClassName = '.communities-container';
        const communitiesContainer = document.querySelector(containerClassName);

        if (communitiesContainer) {
          communitiesContainer.innerHTML = ''; // Clear existing communities
          communities.forEach(community => {
            if (community.is_member) {

              const communityElement = document.createElement('div');
              communityElement.className = 'communities active';
              communityElement.onclick = () => {
                window.location.href = `/networks/${community.shortname}`;
              };


              const tint = community.community_color;

              communityElement.innerHTML = `
                <span class="material-symbols-outlined" style="color:${community.community_color};">
                  ${community.mini_icon}
                </span>
                <div class="community-name">
                  <p class="community-text" style="color: inherit;">${isMobile ? community.shortname : community.name}</p>
                </div>
              `;

              communityElement.style.setProperty('--tint-color', tint);

              communitiesContainer.appendChild(communityElement);
            }
          });
          communities.forEach(community => {
            if (!community.is_member) {

              const communityElement = document.createElement('div');
              communityElement.className = 'communities';
              communityElement.onclick = () => {
                window.location.href = `/networks/${community.shortname}`;
              };

              const tint = community.community_color;

              communityElement.innerHTML = `
                <span class="material-symbols-outlined" style="color: ${community.community_color};">
                  ${community.mini_icon}
                </span>
                <div class="community-name">
                  <p class="community-text" style="color: inherit;">${isMobile ? community.shortname : community.name}</p>
                </div>
              `;

              communityElement.style.setProperty('--tint-color', tint);

              communitiesContainer.appendChild(communityElement);
            }
          });
        }
      })
      .catch(error => console.error('Error fetching communities:', error));
  }

  function getTintFromName(name) {
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
      hash = name.charCodeAt(i) + ((hash << 18) - hash);
    }
    const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
    const tintColor = `#${color}95`;
    return tintColor;
  }

  // if the user is not on mobile, get all communities

  document.addEventListener('DOMContentLoaded', function () {
    const searchButton = document.getElementById('search-toggle-button');
    const banner = document.getElementById('latestCommitBanner');
    const closeButton = document.getElementById('closeCommitBanner');
    const searchBar = document.getElementById('search-bar-div');
    const searchBarForm = document.getElementById('search-bar');
    const searchOverlay = document.getElementById('search-overlay');
    const navBar = document.querySelector('.navbar');

    searchButton.addEventListener('click', () => {
      navBar.style.display = 'none';
      searchBar.style.display = 'block';
      searchBarForm.focus();
      document.body.style.overflow = 'hidden';
      window.scrollTo(0, 0);
      searchOverlay.style.display = 'block';
    });

    searchOverlay.addEventListener('click', () => {
      navBar.style.display = 'flex';
      document.body.style.overflow = '';
      searchBar.style.display = 'none';
      searchOverlay.style.display = 'none';
    });

    if (!window.matchMedia("only screen and (max-width: 768px)").matches) {
      getAllCommunities();
      getTrendingPosts();
    }

    function createHashFromString(string) {
      var hash = 0,
        i, chr;
      if (string.length === 0) return hash;
      for (i = 0; i < string.length; i++) {
        chr = string.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
      }
      return hash;
    }

    function fetchLatestCommit() {
      fetch('/api/get-latest-commit')
        .then(response => response.json())
        .then(data => {
          const commitMessage = data.message;
          const commitHash = createHashFromString(commitMessage);
          const storedHash = localStorage.getItem('commitBannerClosed');

          // Check if the user is logged in and the banner is not closed
          <% if (user) { %>
          if (storedHash !== String(commitHash)) {
            document.querySelector('.latest-commit-message').innerHTML = `Website was just updated.`;
            banner.style.display = 'block';
          } else {
            banner.style.display = 'none';
          }
          <% } else { %>
          banner.style.display = 'none';
          <% } %>
        })
        .catch(error => {
          console.error('Error fetching latest commit:', error);
        });
    }


    const dropdownToggle = document.querySelector('.navbar-button.dropdown-toggle');
    const dropdownMenu = document.querySelector('.dropdown-menu');

    if (dropdownToggle && dropdownMenu) {
      dropdownToggle.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent the default link behavior
        dropdownMenu.classList.toggle('show');
      });

      document.addEventListener('click', (event) => {
        if (!dropdownToggle.contains(event.target) && !dropdownMenu.contains(event.target)) {
          dropdownMenu.classList.remove('show');
        }
      });
    }

    // Function to close the banner and store the state in localStorage
    function closeBanner() {
      banner.style.display = 'none';
      const commitMessage = document.querySelector('.latest-commit-message').textContent;
      const commitHash = createHashFromString(commitMessage.split(' by ')[0]);
      localStorage.setItem('commitBannerClosed', String(commitHash));
    }

    // Event listener for the close button
    closeButton.addEventListener('click', closeBanner);

    // Check if the banner is not closed before fetching the latest commit
    const storedHash = localStorage.getItem('commitBannerClosed');
    const shouldFetchCommit = storedHash === null;

    // Fetch the latest commit only if the user is logged in and the banner is not closed
    <% if (user) { %>
    if (shouldFetchCommit) {
      fetchLatestCommit();
    } else {
      banner.style.display = 'none';
    }
    <% } %>
  });

  document.addEventListener('DOMContentLoaded', async () => {
    var menuButton = document.getElementById("menu-button");
    if (menuButton) {
      getTrendingPosts();
    }
    <% if (user) { %>
    const userId = '<%- user.id %>';
    const response = await fetch(`/notifications/${userId}/unread-count`);
    const data = await response.json();
    const unreadCount = data.count;

    const unreadCountElement = document.getElementById('unreadCount');
    if (unreadCount > 0) {
      unreadCountElement.textContent = unreadCount;
      unreadCountElement.style.display = 'inline-block';
    } else {
      unreadCountElement.style.display = 'none';
    }
    <% } %>
  });

  function redirectToLink(linkUrl) {
    window.location.href = `/redirect?url=${encodeURIComponent(linkUrl)}`;
  }



  <% if (user) { %>

  const userAvatar = document.getElementById('user-avatar');
  const avatarDropdown = document.querySelector('.avatar-dropdown');
  const userLinks = document.querySelector('.user-links');
  const navigationButtons = document.querySelectorAll('.navigation-button');
  const userText = document.querySelector('.nav-text-container');

  userAvatar.addEventListener('click', () => {
    navigationButtons.forEach(button => {
      button.classList.toggle('hidden');
    });
    avatarDropdown.classList.toggle('open');
    userLinks.classList.toggle('slide-left');
    userText.classList.toggle('hidden');
  });

  <% } %>

  document.addEventListener('click', function (event) {
    var content = document.getElementById("menu-content");
    var overlay = document.getElementById("overlay");
    var menuButton = document.getElementById("menu-button");
    var menuIcon = document.getElementById("menu-icon");

    if (!content.contains(event.target) && event.target !== menuIcon && !menuButton.contains(event.target)) {
      if (content.classList.contains("sidebar-open")) {
        content.classList.remove("sidebar-open");
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.style.pointerEvents = 'none'; // Block clicks when the overlay is fully transparent
        }, 500);
        if (menuButton.classList.contains('active')) { // Check if menu is active then toggle
          menuButton.classList.toggle('active');
        }
        document.body.style.overflow = ""; // Re-enable scrolling
      }
    } else if (event.target === menuButton || menuButton.contains(event.target)) { // If clicking on the menuButton
      menuButton.classList.toggle('active');
      content.classList.toggle("sidebar-open");
      if (content.classList.contains("sidebar-open")) {
        overlay.style.opacity = '1';
        overlay.style.pointerEvents = 'auto';
        document.body.style.overflow = "hidden"; // Disable scrolling when sidebar is open
      } else {
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.style.pointerEvents = 'none';
        }, 500);
        document.body.style.overflow = ""; // Re-enable scrolling when sidebar is closed
      }
    }
  });
</script>