<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE/</title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/edit-experience.css" />
  <link rel="shortcut icon" href="/img/core.png" />
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'edit-experience' }) %>
  <div class="edit-form-container">
    <div class="edit-form-header">
      <h4>Edit Experience</h4>
    </div>
    <form id="jobExperienceForm">
      <div id="jobExperienceContainer"></div>
      <span class="flex flex-col gap-06">
        <button type="button" class="regular-button" id="addJobExperience">Add Job Experience</button>
        <button type="submit" id="submit-button">Save Changes</button>
      </span>
    </form>

    <template id="jobExperienceTemplate">
      <div class="jobExperience">
        <input type="hidden" name="id">
        <label for="title">Title:</label>
        <input type="text" name="title" required>

        <label for="employmentType">Employment Type:</label>
        <input type="text" name="employmentType" required>

        <label for="companyName">Company Name:</label>
        <input type="text" name="companyName" required>

        <label for="location">Location:</label>
        <input type="text" name="location" required>

        <label for="startDate">Start Date:</label>
        <input type="date" name="startDate" required>

        <label for="isCurrent">Current Job</label>
        <input type="checkbox" name="isCurrent">

        <label for="endDate">End Date:</label>
        <input type="date" name="endDate">

        <label for="description">Description:</label>
        <textarea name="description" required></textarea>

        <label for="tags">Tags:</label>
        <input name="tags" required></textarea>

        <button type="button" class="removeJobExperience cancel-button">Remove</button>
      </div>
    </template>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const jobExperienceContainer = document.getElementById('jobExperienceContainer');
      const addJobExperienceButton = document.getElementById('addJobExperience');
      const jobExperienceTemplate = document.getElementById('jobExperienceTemplate');
      const jobExperienceForm = document.getElementById('jobExperienceForm');

      function addExperience(experienceData = {}) {
        const newExperience = jobExperienceTemplate.content.cloneNode(true);
        const experienceFields = newExperience.querySelectorAll('input, textarea');
        experienceFields.forEach(field => {
          let value = experienceData[field.name] || '';
          if (field.type === 'date' && value) {
            value = new Date(value).toISOString().split('T')[0];
          }
          if (field.type === 'checkbox') {
            field.checked = !!experienceData[field.name];
          } else {
            field.value = value;
          }
        });

        const removeButton = newExperience.querySelector('.removeJobExperience');
        removeButton.addEventListener('click', function () {
          newExperience.remove();
        });

        jobExperienceContainer.appendChild(newExperience);
      }

      function formatDate(date) {
        let postDate = new Date(date);
        let today = new Date();
        let diff = today - postDate;
        let formattedDate = '';

        // Convert time difference to different units
        let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
        let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
        let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day

        // Decide the format based on the time difference
        if (diff < 86400000) { // Less than 24 hours
          if (hours < 1) {
            formattedDate = minutes + 'm';
          } else {
            formattedDate = hours + 'h';
          }
        } else {
          // Format date with month spelled out, e.g., "July 19, 2024"
          let options = {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          };
          formattedDate = postDate.toLocaleDateString('en-US', options);
        }

        return formattedDate;
      }

      function createExperienceElement(experienceData = {}) {
        const div = createElement('div', 'jobExperience');
        div.innerHTML = `
    <p name="companyName" class="bold sub-text">${experienceData.companyName}</p>
    <div class="flex flex-row space-between w-100 v-center">
      <p name="title" class="title main-text bold">${experienceData.title}</p>
      <div class="flex flex-row">
        <p name="startDate" class="startDate bold mini-text third-text">${experienceData.startDate ? formatDate(experienceData.startDate) : 'Present'}</p>
        <span>-</span>
        <p name="endDate" class="endDate bold mini-text third-text">${experienceData.endDate ? formatDate(experienceData.endDate) : 'Present'}</p>
      </div>
    </div>
    <p name="employmentType" class="employmentType sub-text">${experienceData.employmentType}</p>
    <p name="location" class="location">${experienceData.location ? experienceData.location : ''}</p>
    <p name="description" class="description sub-text secondary-text">${experienceData.description}</p>
    <p name="tags" class="tags">${experienceData.tags}</p>
  `;

        const buttonContainer = createElement('div', 'button-container flex flex-row w-100 gap-06');
        div.appendChild(buttonContainer);

        const editButton = createButton('Edit', 'editJobExperience regular-button-normal w-100', () => {
          div.remove();
          addExperience(experienceData);
        });

        const removeButton = createButton('Remove', 'removeJobExperience cancel-button-normal w-100', () => {
          div.remove();
        });

        buttonContainer.appendChild(editButton);
        buttonContainer.appendChild(removeButton);

        jobExperienceContainer.appendChild(div);
      }


      function createElement(tag, className) {
        const element = document.createElement(tag);
        element.className = className;
        return element;
      }

      function createButton(text, className, onClick) {
        const button = createElement('button', className);
        button.textContent = text;
        button.type = 'button';
        button.addEventListener('click', onClick);
        return button;
      }

      function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }

      addJobExperienceButton.addEventListener('click', function () {
        addExperience(); // Add new experience in editable form
      });

      const userID = '<%= user.id %>';
      fetch(`/api/job-experience/${userID}`)
        .then(response => response.json())
        .then(data => {
          data.forEach(experience => {
            createExperienceElement(experience);
          });
        })
        .catch(error => {
          console.error('Error fetching job experience data:', error);
        });

      jobExperienceForm.addEventListener('submit', function (event) {
        event.preventDefault();

        const experiences = [];

        jobExperienceContainer.querySelectorAll('.jobExperience').forEach(div => {
          const experience = {};
          const inputs = div.querySelectorAll('input, textarea');

          if (inputs.length > 0) {
            inputs.forEach(field => {
              if (field.type === 'checkbox') {
                experience[field.name] = field.checked;
              } else {
                experience[field.name] = field.value;
              }
            });
          } else {
            div.querySelectorAll('p').forEach(p => {

              const field = p.getAttribute('name');
              if (field) {
                experience[field] = p.textContent.trim();
              }
            });
          }

          if (Object.values(experience).filter(value => value !== '').length > 0) {
            experiences.push(experience);
          }
        });

        fetch('/jobs/update-experiences', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              experiences
            })
          })
          .then(response => {
            if (response.ok) {
              return response.json();
            }
            throw new Error('Network response was not ok.');
          })
          .then(data => {
            console.log('Success:', data);
          })
          .catch(error => {
            console.error('Error:', error);
          });
      });
    });
  </script>
</body>

</html>