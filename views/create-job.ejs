<!DOCTYPE html>
<html>

<head>
  <title>CORE - Create Job Post</title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="shortcut icon" href="/img/core.png" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/create-post.css" />
  <link rel="stylesheet" href="/css/create-job.css" />
  <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'jobs' }) %>
  <main>
    <div class="page-header">
      <h5 id="post-header-title">Create a job listing</h5>
      <div class="toggle-container">
        <span class="toggle-label">URL</span>
        <label class="toggle-switch">
          <input type="checkbox" id="form-toggle">
          <span class="slider"></span>
        </label>
        <span class="toggle-label">Manual</span>
      </div>
    </div>
    <div class="progress-container">
      <div class="progress-bar" id="progress-bar"></div>
    </div>
    <div class="progress-text" id="progress-text">0% complete</div>
    <div class="main-container">
      <form id="jobPostForm">
        <div class="form-group">
          <label for="job-link">Job URL</label>
          <div class="input-group">
            <input type="text" id="job-link" name="link" />
            <button type="button" class="null-button null-button-bordered" id="paste-button">Paste</button>
          </div>
        </div>
        <button id="submit-button" type="submit">Extract Job Details</button>
      </form>
      <form id="editJobPostForm" style="display: none;">
        <div class="form-group">
          <label for="link">Application Link:</label>
          <input type="text" id="link" name="link" />
        </div>
        <div class="form-group">
          <label for="company">Company Name:</label>
          <input type="text" id="company" name="company" placeholder="Job Company Name" required />
        </div>
        <div class="form-group">
          <label for="title">Job Title:</label>
          <input type="text" id="title" name="title" placeholder="Job Title" required />
        </div>
        <div class="form-group">
          <label for="description">Job Description:</label>
          <textarea id="description" name="description" placeholder="Job Description" required></textarea>
        </div>
        <div class="form-group">
          <label for="preferred-qualifications">Preferred Qualifications:</label>
          <textarea id="preferred-qualifications" name="preferred-qualifications" placeholder="Preferred Qualifications"></textarea>
        </div>
        <div class="form-group">
          <label for="minimum-qualifications">Minimum Qualifications:</label>
          <textarea id="minimum-qualifications" name="minimum-qualifications" placeholder="Minimum Qualifications"></textarea>
        </div>
        <div class="form-group">
          <label for="responsibilities">Responsibilities:</label>
          <textarea id="responsibilities" name="responsibilities" placeholder="Responsibilities"></textarea>
        </div>
        <div class="form-group">
          <label for="requirements">Requirements:</label>
          <textarea id="requirements" name="requirements" placeholder="Requirements"></textarea>
        </div>
        <div class="form-group">
          <label for="nice-to-have">Nice to Have:</label>
          <textarea id="nice-to-have" name="nice-to-have" placeholder="Nice to Have"></textarea>
        </div>
        <div class="form-group">
          <label for="schedule">Schedule:</label>
          <input type="text" id="schedule" name="schedule" placeholder="Schedule" />
        </div>
        <div class="form-group">
          <label for="hours-per-week">Hours per Week:</label>
          <input type="number" id="hours-per-week" name="hours-per-week" placeholder="Hours per Week" />
        </div>
        <div class="form-group">
          <label for="h1b-visa-sponsorship">H1B Visa Sponsorship:</label>
          <select id="h1b-visa-sponsorship" name="h1b-visa-sponsorship">
            <option value="true">Yes</option>
            <option value="false" selected>No</option>
          </select>
        </div>
        <div class="form-group">
          <label for="is-remote">Remote:</label>
          <select id="is-remote" name="is-remote">
            <option value="true">Yes</option>
            <option value="false" selected>No</option>
          </select>
        </div>
        <div class="form-group">
          <label for="equal-opportunity-employer-info">Equal Opportunity Employer Info:</label>
          <textarea id="equal-opportunity-employer-info" name="equal-opportunity-employer-info" placeholder="Equal Opportunity Employer Info"></textarea>
        </div>
        <div class="form-group">
          <label for="relocation">Relocation Assistance:</label>
          <select id="relocation" name="relocation">
            <option value="true">Yes</option>
            <option value="false" selected>No</option>
          </select>
        </div>
        <div class="form-group">
          <label for="benefits">Job Benefits:</label>
          <textarea id="benefits" name="benefits" placeholder="Job Benefits"></textarea>
        </div>
        <div class="form-group">
          <label for="additional-info">Additional Information:</label>
          <textarea id="additional-information" name="additional-information" placeholder="Additional Information"></textarea>
        </div>
        <div class="form-group">
          <label for="location">Location:</label>
          <input type="text" id="location" name="location" placeholder="City, State, Country" required />
        </div>
        <div class="form-group">
          <label for="salary">Salary:</label>
          <input type="number" id="salary" name="salary" placeholder="Annual Salary" value="0" oninput="if(this.value==='')this.value='0'" />
        </div>
        <div class="form-group">
          <label for="salary_max">Salary Max:</label>
          <input type="number" id="salary_max" name="salary_max" placeholder="Max Annual Salary (optional)" value="0" oninput="if(this.value==='')this.value='0'" />
        </div>
        <div class="form-group"> <label for="experienceLevel">Experience Level:</label> <select id="experienceLevel" name="experienceLevel" required>
            <option value="">Select Experience Level</option>
            <option value="internship">Internship</option>
            <option value="Entry Level">Entry Level</option>
            <option value="Junior">Junior</option>
            <option value="Mid Level">Mid Level</option>
            <option value="Senior">Senior</option>
            <option value="Lead">Lead</option>
            <option value="Manager">Manager</option>

          </select> </div>

        <div class="form-group">
          <label for="skills">Skills:</label>
          <input type="text" id="skills" name="skills" placeholder="Skills (comma separated)" />
        </div>
        <div class="form-group">
          <label for="tags">Tags:</label>
          <input type="text" id="tags" name="tags" placeholder="Tags (comma separated" />
        </div>
        <button id="submit-button" type="submit">Submit Job Post</button>
      </form>
    </div>
  </main>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const pasteButton = document.getElementById('paste-button');
      const jobLinkInput = document.getElementById('job-link');
      const jobPostForm = document.getElementById('jobPostForm');
      const editJobPostForm = document.getElementById('editJobPostForm');
      const formToggle = document.getElementById('form-toggle');
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');

      // Paste button functionality
      pasteButton.addEventListener('click', async () => {
        try {
          if (navigator.clipboard && navigator.clipboard.readText) {
            const text = await navigator.clipboard.readText();
            jobLinkInput.value = text;
          } else {
            const textArea = document.createElement('textarea');
            textArea.style.position = 'fixed';
            textArea.style.opacity = '0';
            document.body.appendChild(textArea);
            textArea.focus();
            document.execCommand('paste');
            jobLinkInput.value = textArea.value;
            document.body.removeChild(textArea);
          }
        } catch (err) {
          console.error('Failed to read clipboard contents: ', err);
          alert('Unable to paste. Please paste manually.');
        }
      });

      // Form toggle functionality
      formToggle.addEventListener('change', function () {
        if (this.checked) {
          jobPostForm.style.display = 'none';
          editJobPostForm.style.display = 'block';
        } else {
          jobPostForm.style.display = 'block';
          editJobPostForm.style.display = 'none';
        }
      });

      // Progress bar update function
      function updateProgress(percent, message = '') {
        progressBar.style.width = `${percent}%`;
        progressText.textContent = message || `${percent}% complete`;
      }

      // Job Post Form submission (for extracting job details)
      jobPostForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const jobLink = jobLinkInput.value;
        updateProgress(0, 'Starting job extraction...');

        const eventSource = new EventSource(`/api/extract-job-details?link=${encodeURIComponent(jobLink)}`);

        eventSource.onmessage = function (event) {
          const data = JSON.parse(event.data);
          if (data.progress) {
            updateProgress(data.progress, data.message);
          }
          if (data.complete) {
            eventSource.close();
            const response = data.data;
            populateEditForm(response);
            jobPostForm.style.display = 'none';
            editJobPostForm.style.display = 'block';
            formToggle.checked = true;
          }
        };

        eventSource.onerror = function () {
          eventSource.close();
          alert('An error occurred while extracting job details.');
          updateProgress(0, 'Error occurred. Please try again.');
        };
      });

      // Function to populate the edit form with extracted data
      function populateEditForm(data) {
        document.getElementById('title').value = data.title || '';
        document.getElementById('company').value = data.company_name || '';
        document.getElementById('location').value = data.location || '';
        document.getElementById('salary').value = data.salary || '';
        document.getElementById('salary_max').value = data.salary_max || '';
        document.getElementById('experienceLevel').value = data.experience_level || '';
        document.getElementById('skills').value = data.skills || '';
        document.getElementById('tags').value = data.tags || '';
        document.getElementById('description').value = data.description || '';
        document.getElementById('benefits').value = data.benefits || '';
        document.getElementById('additional-information').value = data.additional_information || '';
        document.getElementById('link').value = data.link || '';
        document.getElementById('preferred-qualifications').value = data.PreferredQualifications || '';
        document.getElementById('minimum-qualifications').value = data.MinimumQualifications || '';
        document.getElementById('responsibilities').value = data.Responsibilities || '';
        document.getElementById('requirements').value = data.Requirements || '';
        document.getElementById('nice-to-have').value = data.NiceToHave || '';
        document.getElementById('schedule').value = data.Schedule || '';
        document.getElementById('hours-per-week').value = data.HoursPerWeek || '';
        document.getElementById('h1b-visa-sponsorship').value = data.H1BVisaSponsorship ? 'true' : 'false';
        document.getElementById('is-remote').value = data.IsRemote ? 'true' : 'false';
        document.getElementById('equal-opportunity-employer-info').value = data.EqualOpportunityEmployerInfo || '';
        document.getElementById('relocation').value = data.relocation ? 'true' : 'false';
      }

      // Edit Job Post Form submission
      editJobPostForm.addEventListener('submit', function (e) {
        e.preventDefault();
        updateProgress(90, 'Submitting job posting...');

        const formData = new FormData(this);
        fetch('/api/job-postings', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            if (data.jobPostingId) {
              showBannerNotification('Job posting created successfully!');
              updateProgress(100, 'Job posting created!');
              setTimeout(() => {
                updateProgress(0, '');
                jobPostForm.reset();
                editJobPostForm.reset();
                jobPostForm.style.display = 'block';
                editJobPostForm.style.display = 'none';
                formToggle.checked = false;
              }, 2000);
            } else {
              throw new Error('Job posting creation failed');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showBannerNotification('An error occurred while creating the job posting.');
            updateProgress(0, 'Error occurred. Please try again.');
          });
      });


      // Optional: Add event listeners to form fields to update progress as user fills out the form
      const formFields = editJobPostForm.querySelectorAll('input, textarea, select');
      formFields.forEach(field => {
        field.addEventListener('change', updateFormProgress);
      });

      function updateFormProgress() {
        const totalFields = formFields.length;
        const filledFields = Array.from(formFields).filter(field => field.value.trim() !== '').length;
        const progressPercent = Math.round((filledFields / totalFields) * 100);
        updateProgress(progressPercent, `Form ${progressPercent}% complete`);
      }
    });
  </script>
</body>

</html>