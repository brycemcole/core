<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <!-- SEO Meta Tags -->
  <meta name="description" content="Discover core jobs, SWE jobs, and remote jobs at CORE. Connect with top employers and find your next career opportunity in tech.">
  <meta name="keywords" content="core jobs, SWE jobs, remote jobs, tech careers, software engineering, job search, CORE platform, core, data analyst, software engineer">
  <meta name="author" content="CORE">

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://getcore.dev/">
  <meta property="og:title" content="CORE - Find Core Jobs, SWE Jobs, and Remote Jobs">
  <meta property="og:description" content="Discover core jobs, SWE jobs, and remote jobs at CORE. Connect with top employers and find your next career opportunity in tech.">
  <meta property="og:image" content="https://getcore.dev/img/core.png">

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content="https://getcore.dev/">
  <meta name="twitter:title" content="CORE - Find Core Jobs, SWE Jobs, and Remote Jobs">
  <meta name="twitter:description" content="Discover core jobs, SWE jobs, and remote jobs at CORE. Connect with top employers and find your next career opportunity in tech.">
  <meta name="twitter:image" content="https://getcore.dev/img/core.png">

  <!-- Favicons -->
  <link rel="shortcut icon" href="/img/core.png" />

  <!-- Stylesheets -->
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/comments.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />

  <!-- Fonts -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

  <!-- Title -->
  <title>CORE - Find SWE Jobs, and Remote Jobs | <%= communityId ? '/' + community.shortname : 'Home' %></title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: '', user: user}) %>
  <main>
    <div class="container">

      <%- include('partials/com-btn-container', { }) %>


      <div id="posts-container" data-community-id="<%= communityId || '' %>">
        <% if (communityId != null) { %>
        <div class="community">
          <div class="community-content">
            <div class="community-info">
              <div class="community-title">
                <span class="material-symbols-outlined" style="font-size: 1.5rem; color: <%= community.community_color%>;"><%= community.mini_icon%></span>
                <span class="comm-title main-text">
                  <h3 class="main-text" style="font-weight: 500"><%= community.name%></h2>
                </span>
                <span class="comm-short-title sub-text">/<%= community.shortname %></span>
              </div>
              <div class="comm-description sub-text secondary-text">
                <%= community.description || 'No description available' %>
              </div>
              <div class="comm-flairs margin-1-bottom">
              </div>
              <div class="community-buttons margin-1-bottom">
                <button class="submit-button-normal join-btn grow-button" id="communityActionBtn" data-action="join"><span class="material-symbols-outlined">
                    person_add
                  </span>Join

                  <div class="counter" style="margin-left: .4rem">
                    <%= community.MemberCount%>
                  </div>
                </button>


                <button class="mod-btn regular-button-normal" id="communityActionBtn" style="display: none;pointer-events: none;" onclick="window.location.href='/networks/<%= community.shortname %>/admin'">
                  <span class="material-symbols-outlined">
                    admin_panel_settings
                  </span>
                  Admin Tools</button>
                <button class="mod-btn null-button-normal null-button-bordered" style="margin-left:auto" id="communityActionBtn" onclick="share('<%= community.name %>','','https://getcore.dev/networks/<%= community.shortname %>')">
                  <span class="material-symbols-outlined share-glyph">
                    share
                  </span></button>
              </div>
              <div class="community-picture">
              </div>
            </div>
          </div>
          <ul class="second-nav-links">
            <li class="dropdown active">
              <a class="navbar-button company-navbar-button active no-bg no-border" data-id="jobs" id="company-updates-selector">
                <span class="material-symbols-outlined">
                  description
                </span>Posts
                <div class="jobs-count">

                </div>
              </a>


            </li>
            <li class="dropdown">
              <a class="navbar-button company-navbar-button no-bg no-border" data-id="company-comments" id="company-updates-selector"><span class="material-symbols-outlined">
                  info
                </span>Wiki
                <div class="comments-count">
                </div>
              </a>
            </li>

          </ul>
        </div>
        <% } %>
        <% if (!communityId) { %>
        <div class="mobile-jobs-container">

          <div class="jobslist">

          </div>
        </div>
        <% if (errorMessages && errorMessages.length > 0) { %>
        <div class="error-messages">
          <div class="error-message-glyph">
            <span class="material-symbols-outlined">
              warning
            </span>
          </div>
          <div class="error-message-text">
            <% errorMessages.forEach(function(msg) { %>
            <p class="error-message"><%= msg %></p>
            <% }); %>
          </div>
        </div>
        <% } %>
        <% if (successMessages && successMessages.length > 0) { %>
        <div class="success-messages">
          <% successMessages.forEach(function(msg) { %>
          <p class="success-message"><%= msg %></p>
          <% }); %>
        </div>
        <% } %>
      </div>
      <% } %>
      <% if (!communityId) { %>
      <%- include('partials/right-side-container') %>
      <%- include('partials/footer') %>
      <% } %>

    </div>
    <% if (communityId) { %>
    <%- include('partials/right-side-container') %>
    <% } %>

  </main>

  <script>
    window.user = '<%- JSON.stringify(user) %>' || null;
  </script>
  <script defer>
    function interactWithPost(postId, user, action) {
      if (!user) {
        window.location.href = '/login';
        return;
      }

      fetch(`/posts/${postId}/react`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            action: action
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.userReaction !== undefined && data.reactionsMap !== undefined) {
            updateReactionUI(postId, data.userReaction, data.reactionsMap);
          } else {
            console.error('Server response does not contain expected data');
          }
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }

    function updateReactionUI(postId, userReaction, reactionsMap) {
      const mainButton = document.querySelector(`.mainReactionButton[data-id="${postId}"]`);
      const popup = document.getElementById(`reactionPopup-post-${postId}`);
      const totalCountSpan = mainButton.querySelector('.reaction-button-right');

      const reactionIcons = {
        "LOVE": "‚ù§Ô∏è",
        "LIKE": "üëç",
        "CURIOUS": "ü§î",
        "DISLIKE": "üëé",
      };

      // Update main button
      if (userReaction && reactionIcons[userReaction]) {
        mainButton.innerHTML = `<span class="reaction-button-left">${reactionIcons[userReaction]}</span><span class="reaction-button-right">${reactionsMap[userReaction] || 0}</span>`;
        mainButton.classList.add('active');
      } else {
        mainButton.innerHTML = `<span class="reaction-button-left"><span class="material-symbols-outlined">thumb_up</span></span><span class="reaction-button-right">${reactionsMap[userReaction] || 0}</span>`;
        mainButton.classList.remove('active');

      }

      // Update reaction buttons in popup
      const buttons = popup.querySelectorAll('.reaction-button-popup');
      buttons.forEach(button => {
        const reaction = button.dataset.reaction;
        button.classList.toggle('active', reaction === userReaction);
        const reactionCountSpan = button.querySelector('.reaction-count');
        reactionCountSpan.textContent = reactionsMap[reaction] || 0;
      });

      // Update total reaction count
      const totalReactions = Object.values(reactionsMap).reduce((a, b) => a + b, 0);
      totalCountSpan.textContent = `${totalReactions} reaction${totalReactions !== 1 ? 's' : ''}`;
    }

    document.addEventListener("DOMContentLoaded", function () {
      const hiddenTags = document.querySelectorAll('.community-tags .hidden-tag');
      hiddenTags.forEach(tag => {
        tag.style.display = 'none';
      });
    });

    function toggleTags() {
      const hiddenTags = document.querySelectorAll('.community-tags .hidden-tag');
      const hiddenTagsCount = hiddenTags.length;
      hiddenTags.forEach(tag => {
        if (tag.style.display === 'none') {
          tag.style.display = 'inline-block';
        } else {
          tag.style.display = 'none';
        }
      });
      const button = document.querySelector('.see-more');
      button.textContent = button.textContent === 'show tags' ? 'hide tags' : 'show tags';
    }



    function getTintFromName(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}65`;
      return tintColor;
    }

    function getTintFromNameSecondary(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}`;
      return tintColor;
    }




    function formatSalary(salary) {
      if (salary >= 1000000) {
        return '$' + (salary / 1000000).toFixed(1) + 'M';
      } else if (salary >= 1000) {
        return '$' + (salary / 1000).toFixed(0) + 'k';
      } else {
        return '$' + salary;
      }
    }

    function showLoader() {
      document.getElementById('loadingAnimation').style.display = 'block';
    }

    function hideLoader() {
      document.getElementById('loadingAnimation').style.display = 'none';
    }

    function toggleFilterMenu() {
      const filterMenu = document.getElementById('filterMenu');
      const filterButton = document.getElementById('filter-button');
      filterMenu.classList.toggle('show');

      document.addEventListener('click', (event) => {
        if (!filterMenu.contains(event.target) && !filterButton.contains(event.target)) {
          filterMenu.classList.remove('show');
        }
      });
    }


    function fetchAndDisplayPosts(communityId = null, sortBy = 'trending', page = 1) {
      const loggedIn = typeof user !== 'undefined' && user !== null;
      let apiUrl;

      if (loggedIn) {
        apiUrl = communityId ? `/api/communities/${communityId}/posts?sortBy=${sortBy}&userId=${user.id}&page=${page}` : `/api/posts?sortBy=${sortBy}&userId=${user.id}&page=${page}`;
      } else {
        apiUrl = communityId ? `/api/communities/${communityId}/posts?sortBy=${sortBy}&page=${page}` : `/api/posts?sortBy=${sortBy}&page=${page}`;
      }

      const postsContainer = document.getElementById('posts-container');


      if (page === 1) {
        // Remove the existing header element
        const existingHeader = postsContainer.querySelector('.community-header');
        if (existingHeader) {
          existingHeader.remove();
        }

        const communityHeader = document.createElement('div');
        communityHeader.className = 'community-header posting-header';
        communityHeader.innerHTML = `

              <div class=post-header-buttons style="position:relative;">
              <span class="filter-button-container" style="display: flex; flex-direction: row; gap: .4rem;">
                 <a class="link" onclick="filterPosts('trending')">
                  <span>Trending</span>
                </a>
                <a class="link" onclick="filterPosts('new')">
                  <span >New</span>
                </a>
                <a class="link" onclick="filterPosts('top')">
                  <span>Top</span>
                </a>
                <a class="link" onclick="filterPosts('explore')">
                  <span>Explore</span>
                </a>
              </span>
              
<% if (user) { %>
  <button class="submit-button-normal" id="post-button" onclick="window.location.href='<%= communityId ? `/networks/${community.shortname}/create` : '/create' %>'">
    Post <span class="material-symbols-outlined">
add
</span>
  </button>
<% } %>
            </div>
     `;

        postsContainer.appendChild(communityHeader);
      }
      const existingLoadMoreButton = postsContainer.querySelector('.load-more-button');
      if (existingLoadMoreButton) {
        existingLoadMoreButton.remove();
      }

      fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
          const fetchPromises = [];
          const posts = data.posts;
          const totalPages = data.totalPages;
          posts.forEach(post => {
            // Main post div
            const postCommentsDiv = document.createElement('div');
            postCommentsDiv.className = 'post-comments';
            const postDiv = document.createElement('div');
            if (post.isGlobalPinned) {
              postDiv.className = 'post pinned';
            } else {

              postDiv.className = 'post';
            }
            postDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postCommentsDiv.appendChild(postDiv);

            // Post content div
            const postContentDiv = document.createElement('div');
            postContentDiv.className = 'post-content';

            // Post header div
            const postHeaderDiv = document.createElement('div');
            postHeaderDiv.className = 'post-header margin-03-bottom';


            const postHeaderUsernameDiv = document.createElement('div');
            postHeaderUsernameDiv.className = 'post-header-username';

            /* 
            // avatar div
            const avatarDiv = document.createElement('div');
                        avatarDiv.className = 'avatar';
                        const avatarImg = document.createElement('img');
                        avatarImg.onclick = () => window.location.href = '/user/' + post.username;
                        avatarImg.src = post.avatar;
                        avatarImg.className = 'thumbnail thumbnail-regular thumbnail-tiny'
                        avatarImg.loading = "lazy";
                        avatarDiv.appendChild(avatarImg);
                        postDiv.appendChild(avatarDiv);
                        */


            // Username, community and current job div
            const usernameDiv = document.createElement('div');
            usernameDiv.className = 'username';
            const usernameLink = document.createElement('div');
            usernameLink.className = 'post-quick-info secondary-text';
            usernameLink.href = '/user/' + post.username;

            usernameLink.innerHTML = `
              <span>
              <p>
              
                <a id="post-username" style="color: ${post.user_color !== '#000000' ? `${post.user_color}` : 'var(--active-indicator-color)'}" class="bold link secondary-text" href="/user/${post.username}">${post.firstname && post.lastname ? `${post.firstname} ${post.lastname}` : post.username}</a>

                ${post.verified ? '<span class="material-symbols-outlined" style="padding:0;font-size: .85rem;color:#16a86b;font-weight: 600;">verified</span>' : ''}
                ${post.isModerator ? '<span class="material-symbols-outlined" style="font-size:.85rem;color:#169da8;">admin_panel_settings</span>' : ''}
                ${post.isGlobalPinned ? '<span class="material-symbols-outlined" style="padding:0;color:#113ae2;">push_pin</span>' : ''}

              </p> 
              
              </span>
              <span>
              <p>          
              </span>
              <p>

                          </p>
            `;
            usernameDiv.appendChild(usernameLink);



            postHeaderUsernameDiv.appendChild(usernameDiv);
            // follow button div
            /* 
            const followButtonDiv = document.createElement('div');
            followButtonDiv.className = 'follow-button';
            const followButton = document.createElement('button');
            followButton.className = 'follow-button no-bg no-border link';
            followButton.textContent = 'Follow';
            followButton.onclick = (event) => {
              event.stopPropagation();
              console.log(post)
              followUser(post.user_id);
            };
            followButtonDiv.appendChild(followButton);
            postHeaderUsernameDiv.appendChild(followButtonDiv);
            */

            // three dots div
            const threeDotsDiv = document.createElement('div');
            threeDotsDiv.className = 'three-dots';
            const threeDotsButton = document.createElement('button');
            threeDotsButton.className = 'three-dots-button';
            threeDotsButton.innerHTML = '<span class="material-symbols-outlined">more_horiz</span>';
            threeDotsButton.onclick = (event) => {
              event.stopPropagation();
            };
            threeDotsDiv.appendChild(threeDotsButton);

            postContentDiv.appendChild(postHeaderDiv);

            // Title div
            const titleDiv = document.createElement('div');
            titleDiv.className = 'title main-text';
            const titleLink = document.createElement('a');
            titleLink.href = '/posts/' + post.id;
            titleLink.innerHTML = `${post.title} <span class="post-timestamp mini-text" id="third-text"><time>${formatDate(post.created_at)}</time></span>`;
            titleDiv.appendChild(titleLink);
            titleDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postContentDiv.appendChild(titleDiv);
            titleDiv.appendChild(threeDotsDiv);

            const linkPreviewDiv = document.createElement('div');
            if (post.post_tags) {
              linkPreviewDiv.className = 'link-preview';
            } else {
              linkPreviewDiv.className = 'link-preview';
            }
            linkPreviewDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postContentDiv.appendChild(linkPreviewDiv);

            if (post.link) {
              const linkDiv = document.createElement('div');
              linkDiv.className = 'link';
              linkDiv.innerHTML = '<div class="placeholder-link-preview">Loading link preview...</div>'; // Placeholder
              linkPreviewDiv.appendChild(linkDiv);
              fetchPromises.push(fetchLinkPreview(post.link, linkDiv));

            }
            try {
              const imageUrlMatch = post.content.match(/!\[.*?\]\((.*?)\)/);
              if (imageUrlMatch && imageUrlMatch[1]) {
                linkPreviewDiv.style.background = 'none';
                linkPreviewDiv.style.display = 'flex';
                linkPreviewDiv.style.gap = '1.2rem';
                linkPreviewDiv.style.alignItems = 'center';
                const imageUrl = imageUrlMatch[1];
                const thumbnailDiv = document.createElement('div');
                thumbnailDiv.className = 'post-thumbnail';
                const thumbnailImg = document.createElement('img');
                thumbnailImg.src = imageUrl;
                thumbnailImg.alt = 'Post Thumbnail';
                // make the thumbnail image larger on click
                thumbnailImg.onclick = (event) => {
                  event.stopPropagation();
                  if (thumbnailImg.style.width === 'auto' && thumbnailImg.style.height === '300px') {
                    linkPreviewDiv.style.flexDirection = 'row';
                    thumbnailImg.style.width = '';
                    thumbnailImg.style.height = '';
                  } else {
                    linkPreviewDiv.style.flexDirection = 'column';
                    thumbnailImg.style.height = '300px';
                    thumbnailImg.style.width = 'auto';
                  }
                };
                thumbnailImg.className = 'thumbnail-image';
                thumbnailImg.loading = "lazy";
                thumbnailDiv.appendChild(thumbnailImg);
                linkPreviewDiv.appendChild(thumbnailDiv);
              }
            } catch (error) {
              console.error('Error displaying image for post:', post.id);
            }



            linkPreviewDiv.style.background = "none";
            linkPreviewDiv.style.border = "none";
            const descriptionDiv = document.createElement('div');
            descriptionDiv.className = 'description third-text sub-text';

            if (post.content) {
              let contentWithoutMarkdown = post.content
                .replace(/^#{1,6}\s+/gm, '')
                .replace(/(?:\r\n|\r|\n)/g, ' ')
                .replace(/```[\s\S]*?```/g, '')
                .replace(/`([^`]+)`/g, '$1')
                .replace(/\*\*(.*?)\*\*/g, '$1')
                .replace(/\*(.*?)\*/g, '$1')
                .replace(/_(.*?)_/g, '$1')
                .replace(/\[([^\]]+)\]\([^\)]+\)/g, '$1')
                .replace(/!\[([^\]]+)\]\([^\)]+\)/g, '')
                .replace(/<[^>]*>/g, '')
                // Trim leading/trailing whitespace
                .trim();

              descriptionDiv.append(contentWithoutMarkdown);
            }



            linkPreviewDiv.appendChild(descriptionDiv);


            // Reaction buttons
            const reactionTypes = [{
                type: "LOVE",
                icon: "‚ù§Ô∏è"
              },
              {
                type: "LIKE",
                icon: "üëç"
              },
              {
                type: "CURIOUS",
                icon: "ü§î"
              },
              {
                type: "DISLIKE",
                icon: "üëé"
              }
            ];

            let totalReactions = 0;
            reactionTypes.forEach(reaction => {
              totalReactions += post[reaction.type.toLowerCase() + 'Count'];
            });

            // reaction menu

            // buttons div
            const buttonsDiv = document.createElement('div');
            buttonsDiv.className = 'buttons third-text mini-text';

            const reactionPopup = document.createElement('div');
            reactionPopup.id = `reactionPopup-post-${post.id}`;
            reactionPopup.className = 'reaction-popup';
            reactionPopup.style.display = 'none';

            const reactionPopupContent = document.createElement('div');
            reactionPopupContent.className = 'reaction-popup-content';

            reactionTypes.forEach(reaction => {
              const reactionButton = document.createElement('button');
              reactionButton.className = `reaction-button-popup${post.userReaction === reaction.type ? ' active' : ''}`;
              reactionButton.setAttribute('data-type', 'post');
              reactionButton.setAttribute('data-id', post.id);
              reactionButton.setAttribute('data-reaction', reaction.type);
              reactionButton.onclick = (event) => {
                event.stopPropagation();
                interactWithPost(post.id, '<%= user %>', reaction.type);
              };

              reactionButton.innerHTML = `
    ${reaction.icon}
    <span class="reaction-count">${post[reaction.type.toLowerCase() + 'Count']}</span>
  `;

              reactionPopupContent.appendChild(reactionButton);
            });

            reactionPopup.appendChild(reactionPopupContent);
            buttonsDiv.appendChild(reactionPopup);

            buttonsDiv.appendChild(postHeaderUsernameDiv);

            // reaction button
            const reactionButton = document.createElement('p');
            reactionButton.id = 'reaction-button';
            reactionButton.setAttribute('data-type', 'post');
            reactionButton.setAttribute('data-id', post.id);
            reactionButton.className = `mainReactionButton reaction-button${post.userReaction ? ' active' : ''}`;

            reactionButton.innerHTML = `${totalReactions > 0 ? `${totalReactions}` : "0"} reacts`;

            reactionButton.onclick = (event) => {
              event.stopPropagation();
              const popup = document.getElementById(`reactionPopup-post-${post.id}`);
              popup.style.display = popup.style.display === 'none' ? 'flex' : 'none';
            };

            buttonsDiv.appendChild(reactionButton);

            // comment button 
            const commentButton = document.createElement('p');
            commentButton.id = 'share-button';
            commentButton.innerHTML = `${post.comment_count} comments`;
            commentButton.onclick = (event) => {
              event.stopPropagation();
              window.location.href = '/posts/' + post.id;
            };
            buttonsDiv.appendChild(commentButton);

            // community button 
            const communityButton = document.createElement('p');
            communityButton.id = 'share-button';
            communityButton.innerHTML = `<span style="font-size:1rem;color:${post.community_color};" class="material-symbols-outlined">${post.community_icon}</span> ${post.community_shortname}`;
            communityButton.onclick = (event) => {
              event.stopPropagation();
              window.location.href = `/networks/${post.community_shortname}`

            };
            buttonsDiv.appendChild(communityButton);

            // share button 
            const shareButton = document.createElement('p');
            shareButton.id = 'share-button';
            shareButton.innerHTML = `${post.share_count ? post.share_count : 0} shares`;
            shareButton.onclick = (event) => {
              event.stopPropagation();
              share(post.title, "", `https://getcore.dev/posts/${post.id}`, 'post', post.id);
            };
            buttonsDiv.appendChild(shareButton);



            // tags div 
            if (post.post_tags) {
              const tagsDiv = document.createElement('div');
              tagsDiv.className = 'tags margin-06-bottom secondary-text';
              post.post_tags.split(',').forEach(tag => {
                const tagDiv = document.createElement('div');
                tagDiv.className = 'tag';
                tagDiv.innerHTML = tag;
                tagsDiv.appendChild(tagDiv);
              });

              postContentDiv.appendChild(tagsDiv);
            }

            postContentDiv.appendChild(buttonsDiv);


            const commentsDiv = document.createElement('div');
            commentsDiv.className = 'comments';
            commentsDiv.id = `comments-${post.id}`;
            commentsDiv.style.display = 'none';
            postCommentsDiv.appendChild(commentsDiv);




            postDiv.appendChild(postContentDiv);
            postsContainer.appendChild(postCommentsDiv);

            // if user not logged in show a join the website section
            if (Math.random() < 0.04 &&
              '<%= user %>' == '') {
              const joinWebsiteDiv = document.createElement('div');
              joinWebsiteDiv.className = 'join-website adaptive-border-bottom';
              joinWebsiteDiv.onclick = () => window.location.href = '/login';
              joinWebsiteDiv.innerHTML = ` 
              <div class="join-website-header">
              <div class="icon"><span class="material-symbols-outlined">person_add</span></div>
              <div class="title"><a>Join CORE</a></div>
              </div>
              <div class="join-website-body">
              <p class="description">Join CORE to stay updated on the latest posts and discussions.</p>
              </div>
              `;
              postCommentsDiv.appendChild(joinWebsiteDiv);
            }

            // percent chance to show a join community section below post 
            if (Math.random() < 0.06 && '<%= communityId %>' == '') {
              const joinCommunityDiv = document.createElement('div');
              joinCommunityDiv.onclick = () => window.location.href = `/networks/${post.community_shortname}`;
              joinCommunityDiv.className = 'join-community';
              joinCommunityDiv.innerHTML = ` 
              <div class="join-community-header">
              <div class="icon"><span style="color:${post.community_color};" class="material-symbols-outlined">${post.community_icon}</span></div>
              <div class="title"><a>/${post.community_shortname}</a></div>
              </div>
              <div class="join-community-body sub-text secondary-text">
              <p class="description">Join the community to stay updated on the latest posts and discussions.</p>
              </div>
              `;
              postCommentsDiv.appendChild(joinCommunityDiv);
            }
          });
          Promise.all(fetchPromises)
            .then(() => {
              if (posts.length > 0 && page < totalPages) {
                const loadMoreDiv = document.createElement('div');
                loadMoreDiv.className = 'load-more';
                const loadMoreButton = document.createElement('button');
                loadMoreButton.className = 'load-more-button';
                loadMoreButton.id = 'regular-button';
                loadMoreButton.innerText = 'Load More';
                loadMoreButton.onclick = () => {
                  const nextPage = page + 1;
                  fetchAndDisplayPosts(communityId, sortBy, nextPage);
                };
                loadMoreDiv.appendChild(loadMoreButton);
                postsContainer.appendChild(loadMoreDiv);
              }

              // Infinite scroll
              const loadMoreButton = document.querySelector('.load-more-button');
              const loadMoreDiv = document.querySelector('.load-more');
              const observer = new IntersectionObserver((entries) => {
                if (entries[0].isIntersecting && posts.length > 0) {
                  const nextPage = page + 1;
                  fetchAndDisplayPosts(communityId, sortBy, nextPage);
                }
              });

              if (loadMoreDiv && posts.length > 0) {
                observer.observe(loadMoreDiv);
              }

              if (posts.length === 0 && page === 1) {
                const noPostsDiv = document.createElement('div');
                noPostsDiv.className = 'no-posts secondary-text';
                noPostsDiv.innerText = 'No posts to show';
                postsContainer.appendChild(noPostsDiv);
              }
            });


        })
        .catch(error => console.error('Error fetching posts:', error));
    }

    <% if (communityId) {%>
    document.addEventListener("DOMContentLoaded", function () {
      const communityActionBtn = document.getElementsByClassName("join-btn")[0];
      const memberCountElement = document.querySelector('.community-member-count');
      const modBtn = document.getElementsByClassName("mod-btn")[0];

      function updateMemberCount(isJoining) {
        let memberCount = parseInt(memberCountElement.textContent.split(' ')[0]);
        if (isJoining) {
          memberCountElement.textContent = `${memberCount + 1} members`; // Increment on join
        } else {
          memberCountElement.textContent = `${Math.max(0, memberCount - 1)} members`; // Decrement on leave, prevent negative numbers
        }
      }

      function toggleCommunityMembership() {
        const action = communityActionBtn.dataset.action; // "join" or "leave"
        const url = `/networks/<%= community.shortname %>/${action}`;

        fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              // Authorization header if needed
            },
          })
          .then(response => {
            if (response.ok) {
              return response.json(); // Adjust based on actual response
            }
            throw new Error('Failed to perform action');
          })
          .then(data => {
            // Toggle button state
            if (action === "join") {
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">close</span>Leave';
              communityActionBtn.dataset.action = "leave";
              showBannerNotification("You have successfully joined the community!");

            } else {
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">add</span>Join';
              communityActionBtn.dataset.action = "join";

              showBannerNotification("You have successfully left the community!");

            }
          })
          .catch(error => {
            console.error('Error:', error);
            showBannerNotification("Error performing action.");
          });
      }
      if ("<%= user %>" !== "") {
        communityActionBtn.addEventListener("click", toggleCommunityMembership);
      } else {
        communityActionBtn.addEventListener("click", () => {
          window.location.href = "/login";
        });
      }

      // Function to check membership and update button
      function checkMembershipAndUpdateButton() {
        fetch(`/networks/<%= community.shortname %>/isMember`)
          .then(response => response.json())
          .then(data => {
            if (data.isMember) {
              communityActionBtn.className = "cancel-button-normal join-btn grow-button";
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">close</span>Leave';
              communityActionBtn.dataset.action = "leave";
            } else {
              communityActionBtn.className = "submit-button-normal join-btn grow-button";
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">add</span>Join';
              communityActionBtn.dataset.action = "join";
            }

            if (data.isModerator) {
              modBtn.style.display = "flex";
              modBtn.style.pointerEvents = "auto";
            }

          })
          .catch(error => console.error('Error checking membership:', error));
      }

      // check if user is logged in first 
      if ("<%=
        user %>" !== "") {
        checkMembershipAndUpdateButton();
      }
    });
    <% }%>


    document.addEventListener("DOMContentLoaded", function () {
      var deadlineElements = document.querySelectorAll('#job-posting-deadline');
      var currentDate = new Date();
      var deadlineDate = new Date(currentDate.getTime() + (24 * 60 * 60 * 1000)); // Adds one day

      var month = deadlineDate.getMonth() + 1; // getMonth() returns 0-11
      var day = deadlineDate.getDate(); // getDate() returns 1-31

      // Ensure month and day are always two digits
      var formattedMonth = month < 10 ? '0' + month : month;
      var formattedDay = day < 10 ? '0' + day : day;

      var formattedDeadline = formattedMonth + '/' + formattedDay;

      deadlineElements.forEach(function (elem) {
        elem.textContent = 'Exp: ' + formattedDeadline;
      });
    });

    function renderComments(comments, user, level = 0) {
      console.log(comments);
      console.log(user);
      console.log(level);
      let html = '';
      const sortedComments = comments.sort((a, b) => b.isPinned - a.isPinned);

      sortedComments.forEach(comment => {
        html += `
      <div class="comment-with-replies ${level === 0 ? 'top-level' : ''}">
        <div class="comment level-${level}">
          <div class="comment-avatar">
            <img src="${comment.user.avatar || '/img/default-avatar.png'}" alt="Avatar" class="avatar" onclick="window.location.href = '/user/${comment.user.username}'" />
          </div>
          <div class="comment-main">
            <div class="comment-content">
              <div class="comment-header">
                <a class="comment-user-info" href="/user/${comment.user.username}">
                  <div class="repliers-info">
                    <span>${comment.user.username}</span>
                  </div>
                </a>
                <span class="comment-timestamp" id="secondary-text">${formatTimestamp(comment.created_at)}</span>
                ${comment.isPinned ? '<span class="tag comment-tag pinned-comment"><span class="material-symbols-outlined" id="secondary-text" style="color:#113ae2;">push_pin</span></span>' : ''}
                ${comment.user.isAdmin ? '<span class="tag admin-tag comment-tag">Admin</span>' : ''}
              </div>
              ${user ? renderCommentActions(comment, user) : ''}
            </div>
            <div class="comment-body">
              <p>${linkify(comment.comment)}</p>
            </div>
          </div>
        </div>

        ${renderUserActions(comment, user)}

        ${user ? renderReplyForm(comment, user) : ''}

        ${renderNestedComments(comment, user, level)}
      </div>
    `;
      });

      return html;
    }

    function renderUserActions(comment, user) {
      const reactionTypes = [{
          type: "LOVE",
          icon: "‚ù§Ô∏è"
        },
        {
          type: "LIKE",
          icon: "üëç"
        },
        {
          type: "CURIOUS",
          icon: "ü§î"
        },
        {
          type: "DISLIKE",
          icon: "üëé"
        }
      ];

      const totalReactions = reactionTypes.reduce((sum, reaction) => sum + (comment[reaction.type.toLowerCase() + 'Count'] || 0), 0);
      const totalReplies = countAllReplies(comment.replies);

      return `
    <div class="user-actions">
          <div class="replies">
        ${user ? `<a href="#" id="reply-button-${comment.id}" onclick="showReplyForm('${comment.id}', event)">Add Reply</a>` : ''}
      </div>
      <div class="comment-user-interactions ${comment.id}" data-type="comment" data-id="${comment.id}">
        ${user ? renderReactionButton(comment, user, reactionTypes) : ''}
        <span id="secondary-text" class="total-reactions-count-comment-${comment.id}">${totalReactions} reaction${totalReactions !== 1 ? 's' : ''}</span>
        <span id="secondary-text" class="total-reactions-count">${totalReplies} repl${totalReplies !== 1 ? 'ies' : 'y'}</span>
      </div>

    </div>
  `;
    }

    function renderReactionButton(comment, user, reactionTypes) {
      const userReaction = comment.userReaction === "B" ? "BOOST" : comment.userReaction;
      const activeReaction = reactionTypes.find(reaction => reaction.type === userReaction);

      return `
    <button class="commentMainReactionButton null-button-normal reaction-button ${userReaction ? 'active' : ''}" data-type="comment" data-id="${comment.id}">
      ${activeReaction ? activeReaction.icon : '<span class="material-symbols-outlined">thumb_up</span>'}
    </button>
    <div id="reactionPopup-comment-${comment.id}" class="reaction-popup" style="display:none; position: absolute;left: 0; bottom: 37px;">
      <div class="reaction-popup-content">
        ${reactionTypes.map(reaction => `
          <button class="reaction-button-popup${userReaction === reaction.type ? ' active' : ''}" 
                  data-type="comment" data-id="${comment.id}" data-reaction="${reaction.type}" 
                  onclick="interactWithComment('${comment.post_id}', '${comment.id}', '${user.id}', '${reaction.type}')">
            ${reaction.icon}
            <span class="reaction-count">${comment[reaction.type.toLowerCase() + 'Count'] || 0}</span>
          </button>
        `).join('')}
      </div>
    </div>
  `;
    }

    document.addEventListener("click", function (event) {
      const reactionPopups = document.querySelectorAll(".reaction-popup");
      reactionPopups.forEach(popup => {
        if (popup.style.display === "flex" && !popup.contains(event.target)) {
          popup.style.display = "none";
          event.stopPropagation();
        }
      });
    });

    function formatTimestamp(timestamp) {
      const commentDate = new Date(timestamp);
      const currentDate = new Date();
      const timeDifference = currentDate - commentDate;
      const minutes = Math.floor(timeDifference / 60000);
      const hours = Math.floor(minutes / 60);
      const days = Math.floor(hours / 24);

      if (days > 0) return `${days}d`;
      if (hours > 0) return `${hours}h`;
      if (minutes > 0) return `${minutes}m`;
      return 'Just now';
    }

    function renderCommentActions(comment, user) {
      if (!user) return '';

      return `
    <div class="dropdown-${comment.id}" style="position: relative; display: inline-block;">
      <button class="dropbtn" onclick="showDropdown(event)" style="z-index:0;">
        <span class="material-symbols-outlined" style="z-index:0;">more_horiz</span>
      </button>
      <div class="dropdown-content" style="display: none;">
        ${renderDropdownItems(comment, user)}
      </div>
    </div>
  `;
    }

    function renderDropdownItems(comment, user) {
      let items = '';

      if (user && user.username === comment.user.username) {
        items += `
      <span>
        <form id="delete-comment-form-${comment.id}" class="reactionButton" action="/comment/${comment.id}?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
          <input type="hidden" name="_method" value="DELETE" />
          <button type="submit" class="delete-comment-button-${comment.id}">
            <span style="color: red" class="material-symbols-outlined">delete</span>
            <strong style="color: red">Delete</strong>
          </button>
        </form>
      </span>
    `;
      }

      if (user && user.isAdmin) {
        items += `
      <span>
        <form id="admin-delete-comment-form-${comment.id}" class="reactionButton" action="/admin/comment/${comment.id}?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
          <input type="hidden" name="_method" value="DELETE" />
          <button type="submit" class="admin-delete-comment-button-${comment.id}">
            <span style="color: red" class="material-symbols-outlined">gavel</span>
            <strong class="admin-option caution">Remove</strong>
          </button>
        </form>
      </span>
    `;
      }

      return items;
    }

    function renderUserActions(comment, user) {
      const reactionTypes = [{
          type: "LOVE",
          icon: "‚ù§Ô∏è"
        },
        {
          type: "LIKE",
          icon: "üëç"
        },
        {
          type: "CURIOUS",
          icon: "ü§î"
        },
        {
          type: "DISLIKE",
          icon: "üëé"
        }
      ];

      const totalReactions = reactionTypes.reduce((sum, reaction) => sum + (comment[reaction.type.toLowerCase() + 'Count'] || 0), 0);
      const totalReplies = countAllReplies(comment.replies);

      return `
    <div class="user-actions">
      <div class="sub-text secondary-text comment-user-interactions ${comment.id}" data-type="comment" data-id="${comment.id}">
        ${renderReactionButton(comment, user, reactionTypes)}
        <span id="secondary-text" class="total-reactions-count-comment-${comment.id}">${totalReactions} reactions</span>
        <span id="secondary-text" class="total-reactions-count">${totalReplies} replies</span>
      </div>
      <div class="replies">
        ${user ? `<a href="#" id="reply-button-${comment.id}" onclick="showReplyForm('${comment.id}', event)">Add Reply</a>` : ''}
      </div>
    </div>
  `;
    }

    function renderReactionButton(comment, user, reactionTypes) {
      if (!user) return '';

      const userReaction = comment.userReaction === "B" ? "BOOST" : comment.userReaction;
      const activeReaction = reactionTypes.find(reaction => reaction.type === userReaction);

      return `
    <button class="mainReactionButton null-button-normal reaction-button ${userReaction ? 'active' : ''}" data-type="comment" data-id="${comment.id}">
      ${activeReaction ? activeReaction.icon : '<span class="material-symbols-outlined">thumb_up</span>'}
    </button>
    <div id="reactionPopup-comment-${comment.id}" class="reaction-popup" style="display:none; position: absolute;left: 0; bottom: 37px;">
      <div class="reaction-popup-content">
        ${reactionTypes.map(reaction => `
          <button class="reaction-button-popup${userReaction === reaction.type ? ' active' : ''}" 
                  data-type="comment" data-id="${comment.id}" data-reaction="${reaction.type}" 
                  onclick="interactWithComment('${comment.post_id}', '${comment.id}', '${user.id}', '${reaction.type}')">
            ${reaction.icon}
            <span class="reaction-count">${comment[reaction.type.toLowerCase() + 'Count'] || 0}</span>
          </button>
        `).join('')}
      </div>
    </div>
  `;
    }

    function linkify(text) {
      const urlRegex =
        /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi;
      return text.replace(urlRegex, (url) => {
        return `<a href="
        ${url}" target="_blank" class="comment-url">${url}</a>`;
      });
    }

    function renderReplyForm(comment, user) {
      if (!user) return '';

      return `
    <div class="reply-form">
      <form id="reply-form-${comment.id}" action="/comments/${comment.id}/replies" method="POST" style="display: none">
        <div class="input-container">
          <textarea id="comment-${comment.id}" name="comment" rows="1" required 
                    onclick="autoExpandTextarea(event); showReplyButtons('${comment.id}')" 
                    maxlength="500" placeholder="Reply to ${comment.user.username}"></textarea>
          <div class="reply-buttons" id="reply-buttons-${comment.id}" style="display: none;">
            <button id="cancel-button-normal" type="button" class="fab" onclick="showReplyForm('${comment.id}', event)">Cancel</button>
            <button id="submit-button-normal" type="submit" class="fab">Submit</button>
          </div>
        </div>
      </form>
    </div>
  `;
    }

    function renderNestedComments(comment, user, level) {
      if (!comment.replies || comment.replies.length === 0) return '';

      const nestedLevel = level + 1;
      const maxDisplayLevel = 3;

      let html = `
    <div class="nested-comments level-${Math.min(nestedLevel, 6)}" id="nested-comments-${comment.id}" 
         style="display: ${nestedLevel <= maxDisplayLevel ? 'block' : 'none'};">
      ${renderComments(comment.replies, user, nestedLevel)}
    </div>
  `;

      if (nestedLevel > maxDisplayLevel) {
        html += `
      <button class="show-more-replies null-button-normal" onclick="toggleNestedComments('${comment.id}')">
        Show more replies
      </button>
    `;
      }

      return html;
    }

    function countAllReplies(replies) {
      if (!replies || replies.length === 0) return 0;
      return replies.reduce((total, reply) => total + 1 + countAllReplies(reply.replies), 0);
    }

    async function fetchPreviewComments(postId) {
      try {
        const response = await fetch(`/api/preview-comments/${postId}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const comments = await response.json();
        const commentsDiv = document.getElementById(`comments-${postId}`);
        commentsDiv.innerHTML = renderComments(comments.comments, window.user); // Assume user is available globally
        commentsDiv.style.display = 'block'; // Show the comments
      } catch (error) {
        console.error('Error fetching preview comments:', error);
      }
    }

    function fetchLinkPreview(link, container) {
      return fetch(`/api/link-preview/${encodeURIComponent(encodeURIComponent(link))}`)
        .then(response => response.json())
        .then(linkPreview => {
          if (linkPreview) {
            let imageUrl = linkPreview.image || linkPreview.favicon;
            let htmlContent = `
        <div class="mini-link">
            <div class="mini-link-image">
                ${imageUrl ? `<img loading="lazy" src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
            </div>
            <div class="mini-link-body">
                <div class="mini-link-body-header">
                  <div class="mini-link-favicon">
                    <img src="${linkPreview.favicon}" alt="" class="favicon" />
                  </div>
                  <div class="mini-link-url" id="main-text"><a>${new URL(linkPreview.url || '').hostname || ''}</a></div>
                </div>
                <div class="mini-link-title">${linkPreview.title || ''}</div>
                <div class="mini-link-description">${linkPreview.description || ''}</div>
            </div>
        </div>`;
            container.innerHTML = htmlContent;
          }
        });
    }



    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + 'm';
      } else if (hours < 24) {
        formattedDate = hours + 'h';
      } else if (days < 365) {
        formattedDate = days + 'd';
      } else {
        formattedDate = years + 'y';
      }
      return formattedDate;
    }

    function toggleReactionPopup(type, id) {
      const popup = document.getElementById(`reactionPopup-${type}-${id}`);
      popup.style.display = popup.style.display === 'none' ? 'flex' : 'none';
    }

    function shortenContent(content) {
      if (content.length > 130) {
        return content.substring(0, 130) + '-...';
      } else {
        return content;
      }
    }

    function filterPosts(filter) {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      const posts = postsContainer.getElementsByClassName('post');
      const joinComs = postsContainer.getElementsByClassName('join-community');
      const joinSite = postsContainer.getElementsByClassName('join-website');

      // Remove all posts
      while (posts.length > 0) {
        posts[0].parentNode.removeChild(posts[0]);
      }

      // Remove all join community elements
      while (joinComs.length > 0) {
        joinComs[0].parentNode.removeChild(joinComs[0]);
      }

      // Remove all join site elements
      while (joinSite.length > 0) {
        joinSite[0].parentNode.removeChild(joinSite[0]);
      }

      // Fetch and display posts based on the selected filter
      fetchAndDisplayPosts(communityId, filter.toLowerCase());

      // Update the filter links to make the current filter bold
      const filterLinks = document.querySelectorAll('.link');
      filterLinks.forEach(link => {
        if (link.getAttribute('onclick').includes(filter)) {
          link.classList.add('bold');
          link.style.color = 'inherit';

        } else {
          link.classList.remove('bold');
        }
      });
    }
    document.addEventListener("DOMContentLoaded", () => {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      fetchAndDisplayPosts(communityId);

    });
  </script>

</body>


</html>