<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <!-- SEO Meta Tags -->
  <meta name="description" content="Discover core jobs, SWE jobs, and remote jobs at CORE. Connect with top employers and find your next career opportunity in tech.">
  <meta name="keywords" content="core jobs, SWE jobs, remote jobs, tech careers, software engineering, job search, CORE platform, core, data analyst, software engineer">
  <meta name="author" content="CORE">

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://getcore.dev/">
  <meta property="og:title" content="core - discover stem jobs and connect with others">
  <meta property="og:description" content="Discover core jobs, SWE jobs, and remote jobs at CORE. Connect with top employers and find your next career opportunity in tech.">
  <meta property="og:image" content="https://getcore.dev/img/core.png">

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:url" content="https://getcore.dev/">
  <meta name="twitter:title" content="core - discover stem jobs and connect with others">
  <meta name="twitter:description" content="Discover core jobs, SWE jobs, and remote jobs at CORE. Connect with top employers and find your next career opportunity in tech.">
  <meta name="twitter:image" content="https://getcore.dev/img/core.png">

  <!-- Favicons -->
  <link rel="shortcut icon" href="/img/core.png" />

  <!-- Stylesheets -->
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/comments.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />

  <!-- Fonts -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

  <!-- Title -->
  <title>core - discover stem jobs and connect with others | <%= communityId ? '/' + community.shortname : 'Home' %></title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: '', user: user}) %>
  <main>
    <div class="container">

      <%- include('partials/com-btn-container', { }) %>


      <div id="posts-container" class="p-4" data-community-id="<%= communityId || '' %>">
        <% if (communityId != null) { %>
        <div class="community">
          <div class="community-content">
            <div class="community-info">
              <div class="community-title">
                <span class="material-symbols-outlined" style="font-size: 1.5rem; color: <%= community.community_color%>;"><%= community.mini_icon%></span>
                <span class="comm-title main-text">
                  <h3 class="main-text" style="font-weight: 500"><%= community.name%></h2>
                </span>
                <span class="comm-short-title sub-text">/<%= community.shortname %></span>
              </div>
              <div class="comm-description sub-text">
                <%= community.description || 'No description available' %>
              </div>
              <div class="comm-flairs margin-1-bottom">
              </div>
              <div class="community-buttons margin-1-bottom">
                <button class="main-button-normal join-btn grow-button" id="communityActionBtn" data-action="join"><span class="material-symbols-outlined">
                    person_add
                  </span>Join

                  <div class="counter" style="margin-left: .4rem">
                    <%= community.MemberCount%>
                  </div>
                </button>


                <button class="mod-btn regular-button-normal" id="communityActionBtn" style="display: none;pointer-events: none;" onclick="window.location.href='/networks/<%= community.shortname %>/admin'">
                  <span class="material-symbols-outlined">
                    admin_panel_settings
                  </span>
                  Admin Tools</button>
                <button class="mod-btn null-button-normal null-button-bordered" style="margin-left:auto" id="communityActionBtn" onclick="share('<%= community.name %>','','https://getcore.dev/networks/<%= community.shortname %>')">
                  <span class="material-symbols-outlined share-glyph">
                    share
                  </span></button>
              </div>
              <div class="community-picture">
              </div>
            </div>
          </div>
        </div>
        <% } %>
        <% if (!communityId) { %>
        <div class="mobile-jobs-container">

          <div class="jobslist">

          </div>
        </div>
        <% if (errorMessages && errorMessages.length > 0) { %>
        <div class="error-messages">
          <div class="error-message-glyph">
            <span class="material-symbols-outlined">
              warning
            </span>
          </div>
          <div class="error-message-text">
            <% errorMessages.forEach(function(msg) { %>
            <p class="error-message"><%= msg %></p>
            <% }); %>
          </div>
        </div>
        <% } %>
        <% if (successMessages && successMessages.length > 0) { %>
        <div class="success-messages">
          <% successMessages.forEach(function(msg) { %>
          <p class="success-message"><%= msg %></p>
          <% }); %>
        </div>
        <% } %>
      </div>
      <% } %>
      <% if (!communityId) { %>
      <%- include('partials/right-side-container') %>
      <%- include('partials/footer') %>
      <% } %>

    </div>
    <% if (communityId) { %>
    <%- include('partials/right-side-container') %>
    <% } %>

  </main>

  <script>
    window.user = '<%- JSON.stringify(user) %>' || null;
  </script>
  <script defer>
    const user = <%- user ? JSON.stringify(user) : 'null' %>;

    function interactWithPost(postId, user, action) {
      if (!user) {
        window.location.href = '/login';
        return;
      }

      fetch(`/posts/${postId}/react`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            action: action
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.userReaction !== undefined && data.reactionsMap !== undefined) {
            updateReactionUI(postId, data.userReaction, data.reactionsMap);
          } else {
            console.error('Server response does not contain expected data');
          }
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }

    function updateReactionUI(postId, userReaction, reactionsMap) {
      const mainButton = document.querySelector(`.mainReactionButton[data-id="${postId}"]`);
      const popup = document.getElementById(`reactionPopup-post-${postId}`);
      const totalCountSpan = mainButton.querySelector('.reaction-button-right');

      const reactionIcons = {
        "LOVE": "‚ù§Ô∏è",
        "LIKE": "üëç",
        "CURIOUS": "ü§î",
        "DISLIKE": "üëé",
      };

      // Update main button
      if (userReaction && reactionIcons[userReaction]) {
        mainButton.innerHTML = `<span class="reaction-button-left">${reactionIcons[userReaction]}</span><span class="reaction-button-right">${reactionsMap[userReaction] || 0}</span>`;
        mainButton.classList.add('active');
      } else {
        mainButton.innerHTML = `<span class="reaction-button-left"><span class="material-symbols-outlined">thumb_up</span></span><span class="reaction-button-right">${reactionsMap[userReaction] || 0}</span>`;
        mainButton.classList.remove('active');

      }

      // Update reaction buttons in popup
      const buttons = popup.querySelectorAll('.reaction-button-popup');
      buttons.forEach(button => {
        const reaction = button.dataset.reaction;
        button.classList.toggle('active', reaction === userReaction);
        const reactionCountSpan = button.querySelector('.reaction-count');
        reactionCountSpan.textContent = reactionsMap[reaction] || 0;
      });

      // Update total reaction count
      const totalReactions = Object.values(reactionsMap).reduce((a, b) => a + b, 0);
      totalCountSpan.textContent = `${totalReactions} reaction${totalReactions !== 1 ? 's' : ''}`;
    }

    document.addEventListener("DOMContentLoaded", function () {
      const hiddenTags = document.querySelectorAll('.community-tags .hidden-tag');
      hiddenTags.forEach(tag => {
        tag.style.display = 'none';
      });
    });

    function toggleTags() {
      const hiddenTags = document.querySelectorAll('.community-tags .hidden-tag');
      const hiddenTagsCount = hiddenTags.length;
      hiddenTags.forEach(tag => {
        if (tag.style.display === 'none') {
          tag.style.display = 'inline-block';
        } else {
          tag.style.display = 'none';
        }
      });
      const button = document.querySelector('.see-more');
      button.textContent = button.textContent === 'show tags' ? 'hide tags' : 'show tags';
    }



    function getTintFromName(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}65`;
      return tintColor;
    }

    function getTintFromNameSecondary(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}`;
      return tintColor;
    }




    function formatSalary(salary) {
      if (salary >= 1000000) {
        return '$' + (salary / 1000000).toFixed(1) + 'M';
      } else if (salary >= 1000) {
        return '$' + (salary / 1000).toFixed(0) + 'k';
      } else {
        return '$' + salary;
      }
    }

    function showLoader() {
      document.getElementById('loadingAnimation').style.display = 'block';
    }

    function hideLoader() {
      document.getElementById('loadingAnimation').style.display = 'none';
    }

    function toggleFilterMenu() {
      const filterMenu = document.getElementById('filterMenu');
      const filterButton = document.getElementById('filter-button');
      filterMenu.classList.toggle('show');

      document.addEventListener('click', (event) => {
        if (!filterMenu.contains(event.target) && !filterButton.contains(event.target)) {
          filterMenu.classList.remove('show');
        }
      });
    }


    function fetchAndDisplayPosts(communityId = null, sortBy = 'trending', page = 1) {
      const loggedIn = typeof user !== 'undefined' && user !== null;
      const community = <%- JSON.stringify(community) %>;
      let apiUrl;

      if (loggedIn) {
        apiUrl = communityId ?
          `/api/communities/${communityId}/posts?sortBy=${sortBy}&userId=${user.id}&page=${page}` :
          `/api/posts?sortBy=${sortBy}&userId=${user.id}&page=${page}`;
      } else {
        apiUrl = communityId ?
          `/api/communities/${communityId}/posts?sortBy=${sortBy}&page=${page}` :
          `/api/posts?sortBy=${sortBy}&page=${page}`;
      }

      const postsContainer = document.getElementById('posts-container');

      if (page === 1) {
        // Remove the existing header element
        const existingHeader = postsContainer.querySelector('.community-header');
        if (existingHeader) {
          existingHeader.remove();
        }

        const communityHeader = document.createElement('div');
        communityHeader.className = 'posting-header flex flex-row w-100';
        communityHeader.innerHTML = `
      <div class="flex flex-row wrap w-100 gap-06 space-between margin-1-bottom" style="position:relative;">

<!-- Dropdown Menu Container -->
<div class="dropdown" tabindex="0">
  <!-- Dropdown Button -->
  <button class="dropdown-button px-4 py-2 mini-text secondary-text" aria-haspopup="true" aria-expanded="false">
    Trending
    <span class="arrow"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 opacity-50" aria-hidden="true"><path d="M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg></span> <!-- Down Arrow Indicator -->
  </button>
  
  <!-- Dropdown Content -->
  <div class="dropdown-content">
    <a href="#" onclick="filterPosts('trending')">Trending</a>
    <a href="#" onclick="filterPosts('new')">New</a>
    <a href="#" onclick="filterPosts('top')">Top</a>
    <a href="#" onclick="filterPosts('explore')">Explore</a>
  </div>
</div>



        ${loggedIn ? `
          <button class="main-button-normal mini-button" id="post-button" onclick="window.location.href='${communityId ? `/networks/${community.shortname}/create` : '/create'}'">
            <span class="material-symbols-outlined">add</span> Create Post
          </button>
        ` : ''}
      </div>
      `;

        postsContainer.appendChild(communityHeader);
      }

      const existingLoadMoreButton = postsContainer.querySelector('.load-more-button');
      if (existingLoadMoreButton) {
        existingLoadMoreButton.remove();
      }

      function createCard(name, timestamp, title, description, clickable = false, link = null, image = null, tags = null) {
        console.log(tags);
        const card = document.createElement('div');
        card.className = 'post-card';
        let tagsHtml = '';
        if (tags) {
          tagsHtml = tags.map(tag => `
      <div class="inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80 text-balance ${tag.class}">
        ${tag.text}
      </div>
    `).join('');
        }

        const cardContent = `
<div class="flex flex-col items-start gap-2 rounded-lg border p-3 text-left mb-4 text-sm transition-all hover:bg-accent" ${clickable ? `onclick="window.location.href='${link}'"` : ''}>
  <div class="flex w-full flex-col gap-1">
    <div class="flex items-center">
      <div class="flex items-center gap-2 wrap">

      ${image ? `
              <span class="relative flex shrink-0 overflow-hidden rounded-full mr-2 h-5 w-5">
        <img class="aspect-square h-full w-full" src="${image || '/img/glyph.png'}" onerror="this.onerror=null; this.src='/img/glyph.png';" />
      </span>
      ` : ''
}
        <div class="font-semibold">${name}</div>
      </div>
      <div class="ml-auto text-xs text-foreground">${timestamp}</div>
    </div>
            <div class="text-base font-medium text-balance max-w-lg leading-relaxed">
            <a href="${link}" class="hover:text-accent">${title}</a>
    </div>
      </div>
  <div class="line-clamp-2 text-sm text-muted-foreground w-full">
    ${description}
  </div>
  <div class="flex items-center gap-2 wrap">
    ${tagsHtml}
  </div>
</div>
    `;

        card.innerHTML = cardContent;
        return card;
      }


      fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
          data.posts.forEach(post => {
            const card = createCard(post.username, formatTimestamp(post.created_at), post.title, post.content, true, `/posts/${post.id}`, post.image, []);
            postsContainer.appendChild(card);
          });
        })
        .catch(error => console.error('Error fetching posts:', error));
    }


    function truncateContent(content, maxLength) {
      if (content.length <= maxLength) return content;
      return content.substr(0, maxLength) + '...';
    }

    function toggleFollow(authorId, button) {
      const action = button.innerText === '+' ? 'follow' : 'unfollow';
      fetch(`/users/${authorId}/${action}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          // Include CSRF token if needed
        })
        .then(response => response.json())
        .then(data => {
          button.innerText = data.following ? '-' : '+';
        })
        .catch(err => console.error('Error toggling follow status:', err));
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays < 1) return 'Today';
      if (diffDays === 1) return 'Yesterday';
      if (diffDays < 7) return `${diffDays} days ago`;
      if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;
      if (diffDays < 365) return `${Math.ceil(diffDays / 30)} months ago`;
      return `${Math.ceil(diffDays / 365)} years ago`;
    }

    <% if (communityId) {%>
    document.addEventListener("DOMContentLoaded", function () {
      const communityActionBtn = document.getElementsByClassName("join-btn")[0];
      const memberCountElement = document.querySelector('.community-member-count');
      const modBtn = document.getElementsByClassName("mod-btn")[0];

      function updateMemberCount(isJoining) {
        let memberCount = parseInt(memberCountElement.textContent.split(' ')[0]);
        if (isJoining) {
          memberCountElement.textContent = `${memberCount + 1} members`; // Increment on join
        } else {
          memberCountElement.textContent = `${Math.max(0, memberCount - 1)} members`; // Decrement on leave, prevent negative numbers
        }
      }

      function toggleCommunityMembership() {
        const action = communityActionBtn.dataset.action; // "join" or "leave"
        const url = `/networks/<%= community.shortname %>/${action}`;

        fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              // Authorization header if needed
            },
          })
          .then(response => {
            if (response.ok) {
              return response.json(); // Adjust based on actual response
            }
            throw new Error('Failed to perform action');
          })
          .then(data => {
            // Toggle button state
            if (action === "join") {
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">close</span>Leave';
              communityActionBtn.dataset.action = "leave";
              showBannerNotification("You have successfully joined the community!");

            } else {
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">add</span>Join';
              communityActionBtn.dataset.action = "join";

              showBannerNotification("You have successfully left the community!");

            }
          })
          .catch(error => {
            console.error('Error:', error);
            showBannerNotification("Error performing action.");
          });
      }
      if ("<%= user %>" !== "") {
        communityActionBtn.addEventListener("click", toggleCommunityMembership);
      } else {
        communityActionBtn.addEventListener("click", () => {
          window.location.href = "/login";
        });
      }

      // Function to check membership and update button
      function checkMembershipAndUpdateButton() {
        fetch(`/networks/<%= community.shortname %>/isMember`)
          .then(response => response.json())
          .then(data => {
            if (data.isMember) {
              communityActionBtn.className = "cancel-button-normal join-btn grow-button";
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">person_remove</span>Leave <div class="counter" style="margin-left: .4rem"><%= community.MemberCount%></div>';
              communityActionBtn.dataset.action = "leave";
            } else {
              communityActionBtn.className = "main-button-normal join-btn grow-button";
              communityActionBtn.innerHTML = '<span class="material-symbols-outlined">person_add</span>Join <div class="counter" style="margin-left: .4rem"><%= community.MemberCount%></div>';
              communityActionBtn.dataset.action = "join";
            }

            if (data.isModerator) {
              modBtn.style.display = "flex";
              modBtn.style.pointerEvents = "auto";
            }

          })
          .catch(error => console.error('Error checking membership:', error));
      }

      // check if user is logged in first 
      if ("<%=
        user %>" !== "") {
        checkMembershipAndUpdateButton();
      }
    });
    <% }%>


    document.addEventListener("DOMContentLoaded", function () {
      var deadlineElements = document.querySelectorAll('#job-posting-deadline');
      var currentDate = new Date();
      var deadlineDate = new Date(currentDate.getTime() + (24 * 60 * 60 * 1000)); // Adds one day

      var month = deadlineDate.getMonth() + 1; // getMonth() returns 0-11
      var day = deadlineDate.getDate(); // getDate() returns 1-31

      // Ensure month and day are always two digits
      var formattedMonth = month < 10 ? '0' + month : month;
      var formattedDay = day < 10 ? '0' + day : day;

      var formattedDeadline = formattedMonth + '/' + formattedDay;

      deadlineElements.forEach(function (elem) {
        elem.textContent = 'Exp: ' + formattedDeadline;
      });
    });

    function renderComments(comments, user, level = 0) {
      console.log(comments);
      console.log(user);
      console.log(level);
      let html = '';
      const sortedComments = comments.sort((a, b) => b.isPinned - a.isPinned);

      sortedComments.forEach(comment => {
        html += `
      <div class="comment-with-replies ${level === 0 ? 'top-level' : ''}">
        <div class="comment level-${level}">
          <div class="comment-avatar">
            <img src="${comment.user.avatar || '/img/default-avatar.png'}" alt="Avatar" class="avatar" onclick="window.location.href = '/user/${comment.user.username}'" />
          </div>
          <div class="comment-main">
            <div class="comment-content">
              <div class="comment-header">
                <a class="comment-user-info" href="/user/${comment.user.username}">
                  <div class="repliers-info">
                    <span>${comment.user.username}</span>
                  </div>
                </a>
                <span class="comment-timestamp" id="secondary-text">${formatTimestamp(comment.created_at)}</span>
                ${comment.isPinned ? '<span class="tag comment-tag pinned-comment"><span class="material-symbols-outlined" id="secondary-text" style="color:#113ae2;">push_pin</span></span>' : ''}
                ${comment.user.isAdmin ? '<span class="tag admin-tag comment-tag">Admin</span>' : ''}
              </div>
              ${user ? renderCommentActions(comment, user) : ''}
            </div>
            <div class="comment-body">
              <p>${linkify(comment.comment)}</p>
            </div>
          </div>
        </div>

        ${renderUserActions(comment, user)}

        ${user ? renderReplyForm(comment, user) : ''}

        ${renderNestedComments(comment, user, level)}
      </div>
    `;
      });

      return html;
    }

    function renderUserActions(comment, user) {
      const reactionTypes = [{
          type: "LOVE",
          icon: "‚ù§Ô∏è"
        },
        {
          type: "LIKE",
          icon: "üëç"
        },
        {
          type: "CURIOUS",
          icon: "ü§î"
        },
        {
          type: "DISLIKE",
          icon: "üëé"
        }
      ];

      const totalReactions = reactionTypes.reduce((sum, reaction) => sum + (comment[reaction.type.toLowerCase() + 'Count'] || 0), 0);
      const totalReplies = countAllReplies(comment.replies);

      return `
    <div class="user-actions">
          <div class="replies">
        ${user ? `<a href="#" id="reply-button-${comment.id}" onclick="showReplyForm('${comment.id}', event)">Add Reply</a>` : ''}
      </div>
      <div class="comment-user-interactions ${comment.id}" data-type="comment" data-id="${comment.id}">
        ${user ? renderReactionButton(comment, user, reactionTypes) : ''}
        <span id="secondary-text" class="total-reactions-count-comment-${comment.id}">${totalReactions} reaction${totalReactions !== 1 ? 's' : ''}</span>
        <span id="secondary-text" class="total-reactions-count">${totalReplies} repl${totalReplies !== 1 ? 'ies' : 'y'}</span>
      </div>

    </div>
  `;
    }

    function renderReactionButton(comment, user, reactionTypes) {
      const userReaction = comment.userReaction === "B" ? "BOOST" : comment.userReaction;
      const activeReaction = reactionTypes.find(reaction => reaction.type === userReaction);

      return `
    <button class="commentMainReactionButton null-button-normal reaction-button ${userReaction ? 'active' : ''}" data-type="comment" data-id="${comment.id}">
      ${activeReaction ? activeReaction.icon : '<span class="material-symbols-outlined">thumb_up</span>'}
    </button>
    <div id="reactionPopup-comment-${comment.id}" class="reaction-popup" style="display:none; position: absolute;left: 0; bottom: 37px;">
      <div class="reaction-popup-content">
        ${reactionTypes.map(reaction => `
          <button class="reaction-button-popup${userReaction === reaction.type ? ' active' : ''}" 
                  data-type="comment" data-id="${comment.id}" data-reaction="${reaction.type}" 
                  onclick="interactWithComment('${comment.post_id}', '${comment.id}', '${user.id}', '${reaction.type}')">
            ${reaction.icon}
            <span class="reaction-count">${comment[reaction.type.toLowerCase() + 'Count'] || 0}</span>
          </button>
        `).join('')}
      </div>
    </div>
  `;
    }

    document.addEventListener("click", function (event) {
      const reactionPopups = document.querySelectorAll(".reaction-popup");
      reactionPopups.forEach(popup => {
        if (popup.style.display === "flex" && !popup.contains(event.target)) {
          popup.style.display = "none";
          event.stopPropagation();
        }
      });
    });

    function formatTimestamp(timestamp) {
      const commentDate = new Date(timestamp);
      const currentDate = new Date();
      const timeDifference = currentDate - commentDate;
      const minutes = Math.floor(timeDifference / 60000);
      const hours = Math.floor(minutes / 60);
      const days = Math.floor(hours / 24);

      if (days > 0) return `${days}d`;
      if (hours > 0) return `${hours}h`;
      if (minutes > 0) return `${minutes}m`;
      return 'Just now';
    }

    function renderCommentActions(comment, user) {
      if (!user) return '';

      return `
    <div class="dropdown-${comment.id}" style="position: relative; display: inline-block;">
      <button class="dropbtn" onclick="showDropdown(event)" style="z-index:0;">
        <span class="material-symbols-outlined" style="z-index:0;">more_horiz</span>
      </button>
      <div class="dropdown-content" style="display: none;">
        ${renderDropdownItems(comment, user)}
      </div>
    </div>
  `;
    }

    function renderDropdownItems(comment, user) {
      let items = '';

      if (user && user.username === comment.user.username) {
        items += `
      <span>
        <form id="delete-comment-form-${comment.id}" class="reactionButton" action="/comment/${comment.id}?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
          <input type="hidden" name="_method" value="DELETE" />
          <button type="submit" class="delete-comment-button-${comment.id}">
            <span style="color: red" class="material-symbols-outlined">delete</span>
            <strong style="color: red">Delete</strong>
          </button>
        </form>
      </span>
    `;
      }

      if (user && user.isAdmin) {
        items += `
      <span>
        <form id="admin-delete-comment-form-${comment.id}" class="reactionButton" action="/admin/comment/${comment.id}?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this comment?');">
          <input type="hidden" name="_method" value="DELETE" />
          <button type="submit" class="admin-delete-comment-button-${comment.id}">
            <span style="color: red" class="material-symbols-outlined">gavel</span>
            <strong class="admin-option caution">Remove</strong>
          </button>
        </form>
      </span>
    `;
      }

      return items;
    }

    function renderUserActions(comment, user) {
      const reactionTypes = [{
          type: "LOVE",
          icon: "‚ù§Ô∏è"
        },
        {
          type: "LIKE",
          icon: "üëç"
        },
        {
          type: "CURIOUS",
          icon: "ü§î"
        },
        {
          type: "DISLIKE",
          icon: "üëé"
        }
      ];

      const totalReactions = reactionTypes.reduce((sum, reaction) => sum + (comment[reaction.type.toLowerCase() + 'Count'] || 0), 0);
      const totalReplies = countAllReplies(comment.replies);

      return `
    <div class="user-actions">
      <div class="sub-text secondary-text comment-user-interactions ${comment.id}" data-type="comment" data-id="${comment.id}">
        ${renderReactionButton(comment, user, reactionTypes)}
        <span id="secondary-text" class="total-reactions-count-comment-${comment.id}">${totalReactions} reactions</span>
        <span id="secondary-text" class="total-reactions-count">${totalReplies} replies</span>
      </div>
      <div class="replies">
        ${user ? `<a href="#" id="reply-button-${comment.id}" onclick="showReplyForm('${comment.id}', event)">Add Reply</a>` : ''}
      </div>
    </div>
  `;
    }

    function renderReactionButton(comment, user, reactionTypes) {
      if (!user) return '';

      const userReaction = comment.userReaction === "B" ? "BOOST" : comment.userReaction;
      const activeReaction = reactionTypes.find(reaction => reaction.type === userReaction);

      return `
    <button class="mainReactionButton null-button-normal reaction-button ${userReaction ? 'active' : ''}" data-type="comment" data-id="${comment.id}">
      ${activeReaction ? activeReaction.icon : '<span class="material-symbols-outlined">thumb_up</span>'}
    </button>
    <div id="reactionPopup-comment-${comment.id}" class="reaction-popup" style="display:none; position: absolute;left: 0; bottom: 37px;">
      <div class="reaction-popup-content">
        ${reactionTypes.map(reaction => `
          <button class="reaction-button-popup${userReaction === reaction.type ? ' active' : ''}" 
                  data-type="comment" data-id="${comment.id}" data-reaction="${reaction.type}" 
                  onclick="interactWithComment('${comment.post_id}', '${comment.id}', '${user.id}', '${reaction.type}')">
            ${reaction.icon}
            <span class="reaction-count">${comment[reaction.type.toLowerCase() + 'Count'] || 0}</span>
          </button>
        `).join('')}
      </div>
    </div>
  `;
    }

    function linkify(text) {
      const urlRegex =
        /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi;
      return text.replace(urlRegex, (url) => {
        return `<a href="
        ${url}" target="_blank" class="comment-url">${url}</a>`;
      });
    }

    function renderReplyForm(comment, user) {
      if (!user) return '';

      return `
    <div class="reply-form">
      <form id="reply-form-${comment.id}" action="/comments/${comment.id}/replies" method="POST" style="display: none">
        <div class="input-container">
          <textarea id="comment-${comment.id}" name="comment" rows="1" required 
                    onclick="autoExpandTextarea(event); showReplyButtons('${comment.id}')" 
                    maxlength="500" placeholder="Reply to ${comment.user.username}"></textarea>
          <div class="reply-buttons" id="reply-buttons-${comment.id}" style="display: none;">
            <button id="cancel-button-normal" type="button" class="fab" onclick="showReplyForm('${comment.id}', event)">Cancel</button>
            <button id="submit-button-normal" type="submit" class="fab">Submit</button>
          </div>
        </div>
      </form>
    </div>
  `;
    }

    function renderNestedComments(comment, user, level) {
      if (!comment.replies || comment.replies.length === 0) return '';

      const nestedLevel = level + 1;
      const maxDisplayLevel = 3;

      let html = `
    <div class="nested-comments level-${Math.min(nestedLevel, 6)}" id="nested-comments-${comment.id}" 
         style="display: ${nestedLevel <= maxDisplayLevel ? 'block' : 'none'};">
      ${renderComments(comment.replies, user, nestedLevel)}
    </div>
  `;

      if (nestedLevel > maxDisplayLevel) {
        html += `
      <button class="show-more-replies null-button-normal" onclick="toggleNestedComments('${comment.id}')">
        Show more replies
      </button>
    `;
      }

      return html;
    }

    function countAllReplies(replies) {
      if (!replies || replies.length === 0) return 0;
      return replies.reduce((total, reply) => total + 1 + countAllReplies(reply.replies), 0);
    }

    async function fetchPreviewComments(postId) {
      try {
        const response = await fetch(`/api/preview-comments/${postId}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const comments = await response.json();
        const commentsDiv = document.getElementById(`comments-${postId}`);
        commentsDiv.innerHTML = renderComments(comments.comments, window.user); // Assume user is available globally
        commentsDiv.style.display = 'block'; // Show the comments
      } catch (error) {
        console.error('Error fetching preview comments:', error);
      }
    }

    function fetchLinkPreview(link, container) {
      return fetch(`/api/link-preview/${encodeURIComponent(encodeURIComponent(link))}`)
        .then(response => response.json())
        .then(linkPreview => {
          if (linkPreview) {
            let imageUrl = linkPreview.image || linkPreview.favicon;
            let htmlContent = `
        <div class="mini-link">
            <div class="mini-link-image">
                ${imageUrl ? `<img loading="lazy" src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
            </div>
            <div class="mini-link-body">
                <div class="mini-link-body-header">
                  <div class="mini-link-favicon">
                    <img src="${linkPreview.favicon}" alt="" class="favicon" />
                  </div>
                  <div class="mini-link-url" id="main-text"><a>${new URL(linkPreview.url || '').hostname || ''}</a></div>
                </div>
                <div class="mini-link-title">${linkPreview.title || ''}</div>
                <div class="mini-link-description">${linkPreview.description || ''}</div>
            </div>
        </div>`;
            container.innerHTML = htmlContent;
          }
        });
    }



    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + 'm';
      } else if (hours < 24) {
        formattedDate = hours + 'h';
      } else if (days < 365) {
        formattedDate = days + 'd';
      } else {
        formattedDate = years + 'y';
      }
      return formattedDate;
    }

    function toggleReactionPopup(type, id) {
      const popup = document.getElementById(`reactionPopup-${type}-${id}`);
      popup.style.display = popup.style.display === 'none' ? 'flex' : 'none';
    }

    function shortenContent(content) {
      if (content.length > 130) {
        return content.substring(0, 130) + '-...';
      } else {
        return content;
      }
    }

    function filterPosts(filter) {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      const posts = postsContainer.getElementsByClassName('post');
      const joinComs = postsContainer.getElementsByClassName('join-community');
      const joinSite = postsContainer.getElementsByClassName('join-website');
      const postCards = postsContainer.getElementsByClassName('post-card');
      const postingHeader = postsContainer.getElementsByClassName('posting-header');

      // Remove all post cards
      while (postCards.length > 0) {
        postCards[0].parentNode.removeChild(postCards[0]);
      }

      // Remove posting header
      if (postingHeader.length > 0) {
        postingHeader[0].parentNode.removeChild(postingHeader[0]);
      }


      // Remove all join community elements
      while (joinComs.length > 0) {
        joinComs[0].parentNode.removeChild(joinComs[0]);
      }

      // Remove all join site elements
      while (joinSite.length > 0) {
        joinSite[0].parentNode.removeChild(joinSite[0]);
      }

      // Fetch and display posts based on the selected filter
      fetchAndDisplayPosts(communityId, filter.toLowerCase());

      const filterLinks = document.querySelectorAll('.selector-button');
      filterLinks.forEach(link => {
        if (link.getAttribute('onclick').includes(filter)) {
          link.classList.add('selected');
          link.style.color = 'inherit';

        } else {
          link.classList.remove('selected');
        }
      });

      // update button text
      const dropdownButton = document.querySelector('.dropdown-button');
      dropdownButton.innerHTML = filter.charAt(0).toUpperCase() + filter.slice(1) + ' ' + '<span class="arrow"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 opacity-50" aria-hidden="true"><path d="M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg></span>';
    }
    document.addEventListener("DOMContentLoaded", () => {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      fetchAndDisplayPosts(communityId);

    });
  </script>

</body>


</html>