<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />

  <!-- SEO Meta Tags -->
  <meta name="description" content="Join CORE communities to connect with like-minded individuals. Discover, share, and engage in various topics and interests.">
  <meta name="keywords" content="CORE communities, community engagement, social platform, join communities, discover communities, social network">
  <meta name="author" content="CORE">
  <meta property="og:url" content="https://c-ore.dev/">
  <meta property="og:title" content="CORE - Connect and Engage in Communities">
  <meta property="og:description" content="Join CORE communities to connect with like-minded individuals. Discover, share, and engage in various topics and interests.">
  <meta property="og:image" content="/img/core.png">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="CORE - Connect and Engage in Communities">
  <meta name="twitter:description" content="Join CORE communities to connect with like-minded individuals. Discover, share, and engage in various topics and interests.">
  <meta name="twitter:image" content="/img/core.png">

  <!-- Favicons -->
  <link rel="shortcut icon" href="/img/core.png" />

  <!-- Stylesheets -->
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />

  <!-- Fonts -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

  <!-- Title -->
  <title>CORE - <%= communityId ? '/' + community.shortname : 'Home' %></title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: '', user: user}) %>
  <main>
    <div class="container">

      <%- include('partials/com-btn-container', { }) %>


      <div id="posts-container" data-community-id="<%= communityId || '' %>">
        <% if (communityId != null) { %>
        <div class="community" style="margin: 0 13px; margin-bottom: 2.4rem; margin-top: 10px; border: 0; background-color: rgba(0,0,0,0);">
          <div class="community-content">
            <div class="community-info">
              <div class="community-title">
                <span class="comm-title">
                  <h2 style="font-weight: 500"><%= community.name%></h2>
                </span>
                <span class="comm-short-title">/<%= community.shortname %></span>
              </div>
              <div class="comm-description">
                <%= community.description%>
              </div>
              <div class="community-flairs">
                <span class="community-flair"><span class="material-symbols-outlined">
                    person
                  </span><%= community.MemberCount ? community.MemberCount : 0 %> members</span>
                <span class="community-flair"><span class="material-symbols-outlined">
                    forum
                  </span><%= communityPostCount %> posts</span>
                <% try { %>
                <% if (community.Tags && community.Tags.length > 0) { %>
                <span class="community-flair">
                  <span class="material-symbols-outlined">
                    label
                  </span>
                  <button class="no-bg no-border clickable no-padding" onclick="toggleTags()">show tags</button>
                </span>
                <% } %>
                <% } catch (error) { %>
                <!-- Handle the error, you can display a message or log it -->
                <span class="error-message">Tags are not available</span>
                <% } %>
              </div>
              <div class="community-tags">
                <% try { %>
                <% let tags = community.Tags.split(','); %>
                <% let hiddenTags = tags.length; %>
                <% tags.forEach((tag, index) => { %>
                <span class="tag <%= index >= 0 ? 'hidden-tag' : '' %>" onclick="window.location.href='/tags/<%= tag.trim() %>'"><%= tag.trim() %></span>
                <% }); %>
                <% } catch (error) { %>

                <% } %>
              </div>
              <div class="community-buttons">
                <button class="submit-button-normal join-btn" id="communityActionBtn" data-action="join">Join</button>
                <button class="mod-btn regular-button-normal" id="communityActionBtn" style="display: none;pointer-events: none;" onclick="window.location.href='/c/<%= community.shortname %>/admin'">Moderator Tools</button>
              </div>
              <div class="community-picture">
              </div>
            </div>
          </div>
        </div>
        <% } %>
        <% if (!communityId) { %>
        <div class="mobile-jobs-container">
          <div class="job-header">
            <h5><a href="/jobs" id="secondary-text">Openings</a></h5>
          </div>
          <div class="jobslist">

          </div>
        </div>
      </div>
      <% } %>
      <%- include('partials/right-side-container') %>
      <% if (!communityId) { %>
      <%- include('partials/footer') %>
      <% } %>

    </div>

  </main>


  <script defer>
    document.addEventListener("DOMContentLoaded", function () {
      const hiddenTags = document.querySelectorAll('.community-tags .hidden-tag');
      hiddenTags.forEach(tag => {
        tag.style.display = 'none';
      });
    });

    function toggleTags() {
      const hiddenTags = document.querySelectorAll('.community-tags .hidden-tag');
      const hiddenTagsCount = hiddenTags.length;
      hiddenTags.forEach(tag => {
        if (tag.style.display === 'none') {
          tag.style.display = 'inline-block';
        } else {
          tag.style.display = 'none';
        }
      });
      const button = document.querySelector('.see-more');
      button.textContent = button.textContent === 'show tags' ? 'hide tags' : 'show tags';
    }



    function getTintFromName(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}65`;
      return tintColor;
    }

    function getTintFromNameSecondary(name) {
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 18) - hash);
      }
      const color = (hash & 0x00FFFFFF).toString(16).toUpperCase();
      const tintColor = `#${color}`;
      return tintColor;
    }




    function formatSalary(salary) {
      if (salary >= 1000000) {
        return '$' + (salary / 1000000).toFixed(1) + 'M';
      } else if (salary >= 1000) {
        return '$' + (salary / 1000).toFixed(0) + 'k';
      } else {
        return '$' + salary;
      }
    }

    function showLoader() {
      document.getElementById('loadingAnimation').style.display = 'block';
    }

    function hideLoader() {
      document.getElementById('loadingAnimation').style.display = 'none';
    }

    function toggleFilterMenu() {
      const filterMenu = document.getElementById('filterMenu');
      const filterButton = document.getElementById('filter-button');
      filterMenu.classList.toggle('show');

      document.addEventListener('click', (event) => {
        if (!filterMenu.contains(event.target) && !filterButton.contains(event.target)) {
          filterMenu.classList.remove('show');
        }
      });
    }


    function fetchAndDisplayPosts(communityId = null, sortBy = 'trending', page = 1) {
      const loggedIn = typeof user !== 'undefined' && user !== null;
      let apiUrl;

      if (loggedIn) {
        apiUrl = communityId ? `/api/communities/${communityId}/posts?sortBy=${sortBy}&userId=${user.id}&page=${page}` : `/api/posts?sortBy=${sortBy}&userId=${user.id}&page=${page}`;
      } else {
        apiUrl = communityId ? `/api/communities/${communityId}/posts?sortBy=${sortBy}&page=${page}` : `/api/posts?sortBy=${sortBy}&page=${page}`;
      }

      const postsContainer = document.getElementById('posts-container');


      if (page === 1) {
        // Remove the existing header element
        const existingHeader = postsContainer.querySelector('.community-header');
        if (existingHeader) {
          existingHeader.remove();
        }

        const communityHeader = document.createElement('div');
        communityHeader.className = 'community-header';
        communityHeader.innerHTML = `
              <div class="post-header-title">
                <h5>${sortBy.charAt(0).toUpperCase() + sortBy.slice(1)} Posts</h5> 
              </div>
              <div class=post-header-buttons style="position:relative;">
                <button class="header-button" id="filter-button" onclick="toggleFilterMenu()">
                  <span class="material-symbols-outlined">sort</span>
                </button>
<% if (user) { %>
  <button class="header-button" id="post-button" onclick="window.location.href='<%= communityId ? `/c/${community.shortname}/create` : '/create' %>'">
    <span class="material-symbols-outlined">add</span>
  </button>
<% } %>

              <div class="filter-menu" id="filterMenu">
                <button class="filter-button">
                  <span style="text-align: center; width: 100%;"><strong>Sort By</strong></span>
                </button>
                <button class="filter-button" onclick="filterPosts('trending')">
                  <span style="margin-left: 10px;">Trending</span>
                </button>
                <button class="filter-button" onclick="filterPosts('new')">
                  <span style="margin-left: 10px;">New</span>
                </button>
                <button class="filter-button" onclick="filterPosts('top')">
                  <span style="margin-left: 10px;">Top</span>
                </button>
                <button class="filter-button" onclick="filterPosts('explore')">
                  <span style="margin-left: 10px;">Explore</span>
                </button>
              </div>
            </div>
     `;

        postsContainer.appendChild(communityHeader);
      }
      const existingLoadMoreButton = postsContainer.querySelector('.load-more-button');
      if (existingLoadMoreButton) {
        existingLoadMoreButton.remove();
      }

      fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
          const fetchPromises = [];
          const posts = data.posts;
          const totalPages = data.totalPages;
          posts.forEach(post => {
            // Main post div
            const postDiv = document.createElement('div');
            if (post.isGlobalPinned) {
              postDiv.className = 'post pinned';
            } else {

              postDiv.className = 'post';
            }
            postDiv.onclick = () => window.location.href = '/posts/' + post.id;


            // Post content div
            const postContentDiv = document.createElement('div');
            postContentDiv.className = 'post-content';

            // Post header div
            const postHeaderDiv = document.createElement('div');
            postHeaderDiv.className = 'post-header';


            const postHeaderUsernameDiv = document.createElement('div');
            postHeaderUsernameDiv.className = 'post-header-username';

            // avatar div
            const avatarDiv = document.createElement('div');
            avatarDiv.className = 'avatar';
            const avatarImg = document.createElement('img');
            avatarImg.onclick = () => window.location.href = '/user/' + post.username;
            avatarImg.src = post.avatar;
            avatarImg.loading = "lazy";
            avatarDiv.appendChild(avatarImg);
            postHeaderUsernameDiv.appendChild(avatarDiv);

            // post type circle div thats on avatar
            const postTypes = {
              'blog': {
                'icon': 'news',
                'color': '#c3745b',
                'bcolor': '#985641'
              },
              'discussion': {

                'icon': 'forum',
                'color': '#586eca',
                'bcolor': '#45538c',
              },
              'post': {

                'icon': 'forum',
                'color': '#586eca',
                'bcolor': '#45538c',
              },
              'question': {
                'icon': 'question_mark',
                'color': '#60a373',
                'bcolor': '#50865f'
              },
              'project': {
                'icon': 'web',
                'color': '#ca65a8',
                'bcolor': '#914f7b'
              }
            }
            if (postTypes.hasOwnProperty(post.post_type)) {
              const postTypeCircleDiv = document.createElement('div');
              postTypeCircleDiv.className = 'post-type-circle';
              postTypeCircleDiv.style.backgroundColor = postTypes[post.post_type].color || '#000';
              postTypeCircleDiv.innerHTML = '<span class="material-symbols-outlined">' + postTypes[post.post_type].icon + '</span>';
              avatarDiv.appendChild(postTypeCircleDiv);
            }

            // Username, community and current job div
            const usernameDiv = document.createElement('div');
            usernameDiv.className = 'username';
            const usernameLink = document.createElement('div');
            usernameLink.className = 'post-quick-info secondary-text';
            usernameLink.href = '/user/' + post.username;

            usernameLink.innerHTML = `
  <strong>
    <a id="post-username"  href="/user/${post.username}">${post.username}</a> in <a class="secondary-text" href="/c/${post.community_shortname}">/${post.community_shortname}</a>
    ${post.verified ? '' : ''}
  </strong> 
  <p>
      <span class="post-timestamp" id="secondary-text">${formatDate(post.created_at)}</span>

  </p> 
`;
            usernameDiv.appendChild(usernameLink);



            postHeaderUsernameDiv.appendChild(usernameDiv);
            postHeaderDiv.appendChild(postHeaderUsernameDiv);

            if (post.isGlobalPinned) {
              const pinnedDiv = document.createElement('div');
              pinnedDiv.className = 'pinned';
              pinnedDiv.innerHTML = '<span class="material-symbols-outlined secondary-text" style="font-size:18px;">push_pin</span>';
              postHeaderUsernameDiv.appendChild(pinnedDiv);
            }

            const threeDotsDiv = document.createElement('div');
            threeDotsDiv.className = 'three-dots';
            threeDotsDiv.innerHTML = '<span class="material-symbols-outlined" style="font-weight: 300; font-size: 22px;">more_horiz</span>';
            let dropdownVisible = false;
            let dropdown;

            threeDotsDiv.onclick = (event) => {
              event.stopPropagation();

              if (dropdownVisible) {
                dropdown.remove();
                dropdownVisible = false;
                return;
              }

              dropdown = document.createElement('div');
              dropdown.className = 'post-dropdown-menu';
              dropdown.innerHTML = `
    <button class="dropdown-item" onclick="window.location.href='/posts/${post.id}'">View Post</button>
    <button class="dropdown-item" onclick="window.location.href='/user/${post.username}'">Visit @${post.username}</button>
    <button class="dropdown-item" onclick="window.location.href='/c/${post.community_shortname}'">Visit /${post.community_shortname}</button>
    <button class="dropdown-item" onclick="share('${post.title}','','https://c-ore.dev/posts/${post.id}')">Share</button>
  `;
              threeDotsDiv.appendChild(dropdown);
              dropdownVisible = true;
            };

            document.addEventListener('click', (event) => {
              if (dropdownVisible && !threeDotsDiv.contains(event.target)) {
                dropdown.remove();
                dropdownVisible = false;
              }
            });
            postHeaderDiv.appendChild(threeDotsDiv);

            postContentDiv.appendChild(postHeaderDiv);

            // Title div
            const titleDiv = document.createElement('div');
            titleDiv.className = 'title';
            const titleLink = document.createElement('a');
            titleLink.href = '/posts/' + post.id;
            titleLink.innerText = post.title;
            titleDiv.appendChild(titleLink);
            titleDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postContentDiv.appendChild(titleDiv);

            const linkPreviewDiv = document.createElement('div');
            linkPreviewDiv.className = 'link-preview';
            linkPreviewDiv.onclick = () => window.location.href = '/posts/' + post.id;

            postContentDiv.appendChild(linkPreviewDiv);

            if (post.link) {
              const linkDiv = document.createElement('div');
              linkDiv.className = 'link';
              linkDiv.innerHTML = '<div class="placeholder-link-preview">Loading link preview...</div>'; // Placeholder
              linkPreviewDiv.appendChild(linkDiv);
              fetchPromises.push(fetchLinkPreview(post.link, linkDiv));

            }
            try {
              const imageUrlMatch = post.content.match(/!\[.*?\]\((.*?)\)/);
              if (imageUrlMatch && imageUrlMatch[1]) {
                linkPreviewDiv.style.background = 'none';
                linkPreviewDiv.style.display = 'flex';
                linkPreviewDiv.style.gap = '1.2rem';
                linkPreviewDiv.style.alignItems = 'center';
                const imageUrl = imageUrlMatch[1];
                const thumbnailDiv = document.createElement('div');
                thumbnailDiv.className = 'post-thumbnail';
                const thumbnailImg = document.createElement('img');
                thumbnailImg.src = imageUrl;
                thumbnailImg.alt = 'Post Thumbnail';
                // make the thumbnail image larger on click
                thumbnailImg.onclick = (event) => {
                  event.stopPropagation();
                  if (thumbnailImg.style.width === 'auto' && thumbnailImg.style.height === '300px') {
                    linkPreviewDiv.style.flexDirection = 'row';
                    thumbnailImg.style.width = '';
                    thumbnailImg.style.height = '';
                  } else {
                    linkPreviewDiv.style.flexDirection = 'column';
                    thumbnailImg.style.height = '300px';
                    thumbnailImg.style.width = 'auto';
                  }
                };
                thumbnailImg.className = 'thumbnail-image';
                thumbnailImg.loading = "lazy";
                thumbnailDiv.appendChild(thumbnailImg);
                linkPreviewDiv.appendChild(thumbnailDiv);
              }
            } catch (error) {
              console.error('Error displaying image for post:', post.id);
            }

            if (post.post_type != 'question') {

              linkPreviewDiv.style.background = "none";
              linkPreviewDiv.style.border = "none";
              const descriptionDiv = document.createElement('div');
              descriptionDiv.className = 'description';

              if (post.post_type != 'blog') {
                let contentWithoutMarkdown = post.content
                  .replace(/(?:\r\n|\r|\n)/g, ' ')
                  .replace(/\*\*(.*?)\*\*/g, '$1')
                  .replace(/\*(.*?)\*/g, '$1')
                  .replace(/__(.*?)__/g, '$1')
                  .replace(/_(.*?)_/g, '$1')
                  .replace(/!\[.*?\]\(.*?\)/g, '')
                  .replace(/\[.*?\]\(.*?\)/g, '$1');
                descriptionDiv.append(`${contentWithoutMarkdown}`);
              } else {
                if (post.subtitle) {
                  descriptionDiv.append(`${post.subtitle}`);
                } else {
                  let contentWithoutMarkdown = post.content
                    .replace(/(?:\r\n|\r|\n)/g, ' ')
                    .replace(/\*\*(.*?)\*\*/g, '$1')
                    .replace(/\*(.*?)\*/g, '$1')
                    .replace(/__(.*?)__/g, '$1')
                    .replace(/#{2,3} (.*?)\n/g, '')
                    .replace(/_(.*?)_/g, '$1')
                    .replace(/!\[.*?\]\(.*?\)/g, '')
                    .replace(/\[.*?\]\(.*?\)/g, '$1');
                  descriptionDiv.append(`${contentWithoutMarkdown}`);
                }
              }


              linkPreviewDiv.appendChild(descriptionDiv);
            }

            if (post.post_type == 'question') {
              linkPreviewDiv.style.background = "none";
              linkPreviewDiv.style.border = "none";
            }

            // Votes div
            const votesDiv = document.createElement("div");
            votesDiv.className = "votes";

            // Reaction interactions div
            const reactionInteractionsDiv = document.createElement("div");
            reactionInteractionsDiv.className = `reaction-interactions ${post.id}-reactions`;
            reactionInteractionsDiv.id = `reaction-interactions ${post.id}-reactions`;




            const reactionMenu = document.createElement("div");
            reactionMenu.className = `${post.id} reaction-menu`;

            reactionInteractionsDiv.appendChild(reactionMenu);



            // Reaction buttons
            const reactionTypes = [{
                type: "LOVE",
                icon: "❤️"
              },
              {
                type: "LIKE",
                icon: "👍"
              },
              {
                type: "CURIOUS",
                icon: "🤔"
              },
              {
                type: "DISLIKE",
                icon: "👎"
              }
            ];


            const topReactions = reactionTypes.filter(reaction => post[reaction.type.toLowerCase() + 'Count'] > 0)
              .sort((a, b) => post[b.type.toLowerCase() + 'Count'] - post[a.type.toLowerCase() + 'Count'])
              .slice(0, 3);

            let totalReactions = 0;
            reactionTypes.forEach(reaction => {
              totalReactions += post[reaction.type.toLowerCase() + 'Count'];
            });


            const totalReactionsText = document.createElement("span");
            totalReactionsText.className = `total-reactions-count ${post.id}`;
            totalReactionsText.innerText = totalReactions > 0 ? `${totalReactions} reactions` : "0 reactions";
            reactionInteractionsDiv.appendChild(totalReactionsText);

            if (post.post_tags) {
              const tags = post.post_tags.split(',').map(tag => tag.trim());
              const tagsDiv = document.createElement('div');
              tagsDiv.className = 'tags';
              const maxTags = 3;
              const displayedTags = tags.slice(0, maxTags);
              displayedTags.forEach(tag => {
                const tagDiv = document.createElement('div');
                tagDiv.className = 'tag';
                tagDiv.innerText = tag;
                tagsDiv.appendChild(tagDiv);
              });
              postContentDiv.appendChild(tagsDiv);
            }


            votesDiv.appendChild(reactionInteractionsDiv);
            if (!post.isGlobalPinned) {
              postContentDiv.appendChild(votesDiv);
            }

            const commentsDiv = document.createElement('div');
            commentsDiv.className = 'comments';
            commentsDiv.innerHTML = post.comment_count + ' comments';
            votesDiv.appendChild(commentsDiv);


            postDiv.appendChild(postContentDiv);
            postsContainer.appendChild(postDiv);
          });
          Promise.all(fetchPromises)
            .then(() => {
              if (posts.length > 0 && page < totalPages) {
                const loadMoreDiv = document.createElement('div');
                loadMoreDiv.className = 'load-more';
                const loadMoreButton = document.createElement('button');
                loadMoreButton.className = 'load-more-button';
                loadMoreButton.id = 'regular-button';
                loadMoreButton.innerText = 'Load More';
                loadMoreButton.onclick = () => {
                  const nextPage = page + 1;
                  fetchAndDisplayPosts(communityId, sortBy, nextPage);
                };
                loadMoreDiv.appendChild(loadMoreButton);
                postsContainer.appendChild(loadMoreDiv);
              }

              // Infinite scroll
              const loadMoreButton = document.querySelector('.load-more-button');
              const loadMoreDiv = document.querySelector('.load-more');
              const observer = new IntersectionObserver((entries) => {
                if (entries[0].isIntersecting) {
                  const nextPage = page + 1;
                  fetchAndDisplayPosts(communityId, sortBy, nextPage);
                }
              });

              if (loadMoreDiv) {
                observer.observe(loadMoreDiv);
              }

              if (posts.length === 0 && page === 1) {
                const noPostsDiv = document.createElement('div');
                noPostsDiv.className = 'no-posts secondary-text';
                noPostsDiv.innerText = 'No posts to show';
                postsContainer.appendChild(noPostsDiv);
              }
            });


        })
        .catch(error => console.error('Error fetching posts:', error));
    }

    <% if (communityId) {%>
    document.addEventListener("DOMContentLoaded", function () {
      const communityActionBtn = document.getElementsByClassName("join-btn")[0];
      const memberCountElement = document.querySelector('.community-member-count');
      const modBtn = document.getElementsByClassName("mod-btn")[0];

      function updateMemberCount(isJoining) {
        let memberCount = parseInt(memberCountElement.textContent.split(' ')[0]);
        if (isJoining) {
          memberCountElement.textContent = `${memberCount + 1} members`; // Increment on join
        } else {
          memberCountElement.textContent = `${Math.max(0, memberCount - 1)} members`; // Decrement on leave, prevent negative numbers
        }
      }

      function toggleCommunityMembership() {
        const action = communityActionBtn.dataset.action; // "join" or "leave"
        const url = `/c/<%= community.shortname %>/${action}`;

        fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              // Authorization header if needed
            },
          })
          .then(response => {
            if (response.ok) {
              return response.json(); // Adjust based on actual response
            }
            throw new Error('Failed to perform action');
          })
          .then(data => {
            // Toggle button state
            if (action === "join") {
              communityActionBtn.textContent = "Leave";
              communityActionBtn.dataset.action = "leave";
              showBannerNotification("You have successfully joined the community!");

            } else {
              communityActionBtn.textContent = "Join";
              communityActionBtn.dataset.action = "join";

              showBannerNotification("You have successfully left the community!");

            }
          })
          .catch(error => {
            console.error('Error:', error);
            showBannerNotification("Error performing action.");
          });
      }
      if ("<%= user %>" !== "") {
        communityActionBtn.addEventListener("click", toggleCommunityMembership);
      } else {
        communityActionBtn.addEventListener("click", () => {
          window.location.href = "/login";
        });
      }

      // Function to check membership and update button
      function checkMembershipAndUpdateButton() {
        fetch(`/c/<%= community.shortname %>/isMember`)
          .then(response => response.json())
          .then(data => {
            if (data.isMember) {
              communityActionBtn.className = "cancel-button-normal join-btn";
              communityActionBtn.textContent = "Leave";
              communityActionBtn.dataset.action = "leave";
            } else {
              communityActionBtn.className = "submit-button-normal join-btn";
              communityActionBtn.textContent = "Join";
              communityActionBtn.dataset.action = "join";
            }

            if (data.isModerator) {
              modBtn.style.display = "block";
              modBtn.style.pointerEvents = "auto";
            }

          })
          .catch(error => console.error('Error checking membership:', error));
      }

      // check if user is logged in first 
      if ("<%=
        user %>" !== "") {
        checkMembershipAndUpdateButton();
      }
    });
    <% }%>


    document.addEventListener("DOMContentLoaded", function () {
      var deadlineElements = document.querySelectorAll('#job-posting-deadline');
      var currentDate = new Date();
      var deadlineDate = new Date(currentDate.getTime() + (24 * 60 * 60 * 1000)); // Adds one day

      var month = deadlineDate.getMonth() + 1; // getMonth() returns 0-11
      var day = deadlineDate.getDate(); // getDate() returns 1-31

      // Ensure month and day are always two digits
      var formattedMonth = month < 10 ? '0' + month : month;
      var formattedDay = day < 10 ? '0' + day : day;

      var formattedDeadline = formattedMonth + '/' + formattedDay;

      deadlineElements.forEach(function (elem) {
        elem.textContent = 'Exp: ' + formattedDeadline;
      });
    });


    function fetchLinkPreview(link, container) {
      return fetch(`/api/link-preview/${encodeURIComponent(encodeURIComponent(link))}`)
        .then(response => response.json())
        .then(linkPreview => {
          if (linkPreview) {
            let imageUrl = linkPreview.image || linkPreview.favicon;
            let htmlContent = `
        <div class="mini-link">
            <div class="mini-link-image">
                ${imageUrl ? `<img loading="lazy" src="${imageUrl}" alt="thumbnail" class="thumbnail-image" />` : ''}
            </div>
            <div class="mini-link-body">
                <div class="mini-link-body-header">
                  <div class="mini-link-favicon">
                    <img src="${linkPreview.favicon}" alt="" class="favicon" />
                  </div>
                  <div class="mini-link-url" id="main-text"><a>${new URL(linkPreview.url || '').hostname || ''}</a></div>
                </div>
                <div class="mini-link-title">${linkPreview.title || ''}</div>
                <div class="mini-link-description">${linkPreview.description || ''}</div>
            </div>
        </div>`;
            container.innerHTML = htmlContent;
          }
        });
    }



    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    function shortenContent(content) {
      if (content.length > 130) {
        return content.substring(0, 130) + '-...';
      } else {
        return content;
      }
    }

    function filterPosts(filter) {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      const posts = postsContainer.getElementsByClassName('post');

      while (posts.length > 0) {
        posts[0].parentNode.removeChild(posts[0]);
      }

      fetchAndDisplayPosts(communityId, filter.toLowerCase());
    }
    document.addEventListener("DOMContentLoaded", () => {
      const postsContainer = document.getElementById('posts-container');
      const communityId = postsContainer.dataset.communityId;
      if (!communityId) {
        fetchJobPreviews();
      } else {
        console.log(communityId);
        try {
          fetchCommunityJobPreviews(communityId);
        } catch (error) {
          console.error('Error fetching community job previews:', error);
        }
      }
      fetchAndDisplayPosts(communityId);
    });
  </script>
</body>


</html>