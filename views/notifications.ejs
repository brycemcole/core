<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />
  <link rel="stylesheet" href="/css/notifications.css" />

  <link rel="shortcut icon" href="/img/core.png" />
  <title>CORE - Notifications</title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'notifications', user: user }) %>
  <main>
    <div class="container">
      <%- include('partials/com-btn-container', { }) %>
      <span style="width:100%;">
        <div class="notification-header">
          <h5> Notifications </h5>
        </div>

        <div id="notification-list" class="column">

        </div>
      </span>
    </div>
    <%- include('partials/footer') %>

  </main>

  <script>
    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + ' minutes ago';
      } else if (hours < 24) {
        formattedDate = hours + ' hours ago';
      } else if (days < 365) {
        formattedDate = days + ' days ago';
      } else {
        formattedDate = years + ' years ago';
      }
      return formattedDate;
    }

    <% if (user) { %>

    async function fetchNotifications(type = 'all') {
      // Fetch notifications based on the specified type
      const response = await fetch(`/notifications/${type}/<%= user.id %>`);
      const notifications = await response.json();
      const notificationList = document.getElementById('notification-list');
      notificationList.innerHTML = ''; // Clear previous notifications

      notifications.forEach(notification => {
        const li = createNotificationElement(notification);
        notificationList.appendChild(li);
      });
    }

    function createNotificationElement(notification) {
      const li = document.createElement('li');
      li.classList.add('notification-item');
      li.classList.add(notification.isRead ? 'read' : 'unread');

      const notificationDiv = document.createElement('div');
      const notificationIsReadIndicator = createReadIndicator(notification);
      notificationDiv.appendChild(notificationIsReadIndicator);

      const notificationAvatarDiv = document.createElement('div');
      notificationAvatarDiv.classList.add('notification-avatar-div');

      const notificationSenderAvatar = document.createElement('img');
      notificationSenderAvatar.src = notification.senderProfilePicture || '/img/default-avatar.png';
      notificationSenderAvatar.classList.add('notification-sender-avatar');
      notificationAvatarDiv.appendChild(notificationSenderAvatar);

      const notificationTypeIcon = document.createElement('span');
      notificationTypeIcon.classList.add('material-symbols-outlined');
      notificationTypeIcon.classList.add('notification-type-icon');
      notificationTypeIcon.textContent = notification.type === 'NEW_COMMENT' ? 'comment' : notification.type === 'like' ? 'favorite' : 'person';
      notificationAvatarDiv.appendChild(notificationTypeIcon);

      notificationDiv.appendChild(notificationAvatarDiv);

      const notificationTextDiv = createNotificationText(notification);
      notificationDiv.appendChild(notificationTextDiv);

      const clearBtn = createClearButton(notification, li);
      notificationDiv.appendChild(clearBtn);

      li.appendChild(notificationDiv);
      li.onclick = () => handleNotificationClick(notification, li, notificationIsReadIndicator);
      return li;
    }

    function createReadIndicator(notification) {
      const notificationIsReadIndicator = document.createElement('div');
      notificationIsReadIndicator.classList.add('notification-is-read-indicator');
      notificationIsReadIndicator.classList.add(notification.isRead ? 'read' : 'unread');
      if (!notification.isRead) {
        notificationIsReadIndicator.style.backgroundColor = notification.senderProfileColor || '#000000';
      }
      return notificationIsReadIndicator;
    }

    function createNotificationText(notification) {
      const notificationTextDiv = document.createElement('div');
      notificationTextDiv.classList.add('notification-text-div');

      const notificationText = document.createElement('span');
      notificationText.classList.add('notification-text');

      switch (notification.type) {
      case 'NEW_COMMENT':
        notificationText.textContent = `${notification.senderUsername} commented on your post`;
        break;
      case 'like':
      case 'love':
      case 'celebrate':
      case 'curious':
      case 'boost':
        notificationText.textContent = `${notification.senderUsername} reacted to your post`;
        break;
      case 'follow':
        notificationText.textContent = `${notification.senderUsername} followed you`;
        break;
      case 'ADMIN_BAN':
        notificationText.textContent = `You have been banned by ${notification.senderUsername}`;
        break;
      case 'ADMIN_UNBAN':
        notificationText.textContent = `You have been unbanned by ${notification.senderUsername}`;
        break;
      case 'ADMIN_VERIFIED':
        notificationText.textContent = `You have been verified by ${notification.senderUsername}`;
        break;
      case 'ADMIN_UNVERIFIED':
        notificationText.textContent = `Your verification has been removed by ${notification.senderUsername}`;
        break;
      default:
        notificationText.textContent = `You have a new notification from ${notification.senderUsername}`;
      }

      notificationTextDiv.appendChild(notificationText);

      const flairs = document.createElement('div');
      flairs.classList.add('flairs');

      const notificationTime = document.createElement('span');
      notificationTime.classList.add('time-flair');
      notificationTime.classList.add('secondary-text');

      notificationTime.textContent = formatDate(notification.createdAt);
      flairs.appendChild(notificationTime);

      notificationTextDiv.appendChild(flairs);

      return notificationTextDiv;
    }

    function createClearButton(notification, li) {
      const clearBtn = document.createElement('button');
      clearBtn.classList.add('clear-btn');
      const clearIcon = document.createElement('span');
      clearIcon.classList.add('material-symbols-outlined');
      clearIcon.textContent = 'clear';
      clearBtn.appendChild(clearIcon);

      clearBtn.onclick = async function (event) {
        event.stopPropagation();
        await fetch(`/notifications/${notification.id}`, {
          method: 'DELETE'
        });
        li.remove();
      };

      return clearBtn;
    }

    async function handleNotificationClick(notification, li, notificationIsReadIndicator) {
      await fetch(`/notifications/markAsRead/${notification.id}`, {
        method: 'PUT'
      });

      li.classList.add('read');
      li.classList.remove('unread');
      notificationIsReadIndicator.classList.add('read');
      notificationIsReadIndicator.classList.remove('unread');

      if (notification.type === 'NEW_COMMENT' || ['like', 'love', 'celebrate', 'curious', 'boost'].includes(notification.type)) {
        window.location.href = `/posts/${notification.postId}`;
      } else if (notification.type === 'follow') {
        window.location.href = `/user/${notification.senderUsername}`;
      }
    }

    fetchNotifications();
    <% } %>
  </script>
</body>

</html>