<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/communities.css" />
  <link rel="stylesheet" href="/css/com-btn-container.css" />
  <link rel="stylesheet" href="/css/notifications.css" />

  <link rel="shortcut icon" href="/img/core.png" />
  <title>CORE - Notifications</title>
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'notifications', user: user }) %>
  <main>
    <div class="container">
      <%- include('partials/com-btn-container', { }) %>
      <span style="width:100%;overflow-y:scroll;">
        <div class="notification-header">
          <h5> Notifications </h5>
        </div>

        <div id="notification-list" class="column">

        </div>
      </span>
    </div>
    <%- include('partials/footer') %>

  </main>

  <script>
    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + 'm';
      } else if (hours < 24) {
        formattedDate = hours + 'h';
      } else if (days < 365) {
        formattedDate = days + 'd';
      } else {
        formattedDate = years + 'y';
      }
      return formattedDate;
    }

    <% if (user) { %>

    async function fetchNotifications(type = 'all') {
      // Fetch notifications based on the specified type
      const response = await fetch(`/notifications/${type}/<%= user.id %>`);
      const notifications = await response.json();
      console.log(notifications);
      const notificationHeader = document.querySelector('.notification-header');
      const notificationList = document.getElementById('notification-list');
      notificationList.innerHTML = ''; // Clear previous notifications

      const clearAllBtn = createClearAllButton();
      notificationHeader.appendChild(clearAllBtn);

      notifications.forEach(notification => {
        const li = createNotificationElement(notification);
        notificationList.appendChild(li);
      });

      if (notifications.length === 0) {
        const noNotifications = document.createElement('div');
        noNotifications.classList.add('no-notifications');
        noNotifications.textContent = 'No notifications to show';
        notificationList.appendChild(noNotifications);
      }
    }

    function createNotificationElement(notification) {
      const li = document.createElement('li');
      li.classList.add('notification-item');
      li.classList.add('px-4');
      li.classList.add('py-2');


      li.classList.add(notification.isRead ? 'read' : 'unread');

      const notificationDiv = document.createElement('div');
      const notificationIsReadIndicator = createReadIndicator(notification);
      const notificationReplyButtonDiv = document.createElement('div');
      notificationReplyButtonDiv.classList.add('notification-reply-button-div');
      notificationDiv.appendChild(notificationIsReadIndicator);

      const notificationReplyButton = document.createElement('button');
      if (notification.isRead) {
        notificationReplyButton.classList.add('regular-button-normal');
      } else {
        notificationReplyButton.classList.add('null-button-normal');
      }
      notificationReplyButton.classList.add('mini-button');

      notificationReplyButton.classList.add('ml-auto');

      notificationReplyButton.textContent = 'Open';
      notificationReplyButton.onclick = () => handleNotificationClick(notification, li, notificationIsReadIndicator);


      const notificationAvatarDiv = document.createElement('div');
      notificationAvatarDiv.classList.add('notification-avatar-div');

      const notificationSenderAvatar = document.createElement('img');
      notificationSenderAvatar.src = notification.senderProfilePicture || '/img/default-avatar.png';
      notificationSenderAvatar.classList.add('notification-sender-avatar');
      notificationSenderAvatar.onclick = () => window.location.href = `/user/${notification.senderUsername}`;
      notificationSenderAvatar.classList.add('thumbnail');
      notificationSenderAvatar.classList.add('thumbnail-regular');
      notificationSenderAvatar.classList.add('thumbnail-tiny');



      notificationAvatarDiv.appendChild(notificationSenderAvatar);

      notificationDiv.appendChild(notificationAvatarDiv);

      const notificationTextDiv = createNotificationText(notification);
      notificationDiv.appendChild(notificationTextDiv);
      notificationDiv.appendChild(notificationReplyButton);

      const clearBtn = createClearButton(notification, li);
      notificationDiv.appendChild(clearBtn);

      li.appendChild(notificationDiv);
      notificationTextDiv.appendChild(notificationReplyButtonDiv);
      notificationReplyButton.onclick = () => handleNotificationClick(notification, li, notificationIsReadIndicator);
      return li;
    }

    function createReadIndicator(notification) {
      const notificationIsReadIndicator = document.createElement('div');
      notificationIsReadIndicator.classList.add('notification-is-read-indicator');
      notificationIsReadIndicator.classList.add(notification.isRead ? 'read' : 'unread');
      if (!notification.isRead) {
        notificationIsReadIndicator.style.backgroundColor = notification.senderProfileColor || '#000000';
      }
      return notificationIsReadIndicator;
    }

    const reactionTypes = [{
        type: "LOVE",
        icon: "‚ù§Ô∏è"
      },
      {
        type: "LIKE",
        icon: "üëç"
      },
      {
        type: "CURIOUS",
        icon: "ü§î"
      },
      {
        type: "DISLIKE",
        icon: "üëé"
      }
    ];

    function createNotificationText(notification) {
      const notificationTextDiv = document.createElement('div');
      notificationTextDiv.dataset.notificationId = notification.id;
      notificationTextDiv.dataset.notificationType = notification.type;
      notificationTextDiv.classList.add('notification-text-div');

      const notificationText = document.createElement('span');
      notificationText.classList.add('notification-text');

      switch (notification.type) {
      case 'NEW_COMMENT':
        notificationText.textContent = `${notification.senderUsername} commented on your post`;
        break;
      case 'ACCEPTED_ANSWER':
        notificationText.textContent = `${notification.senderUsername} accepted your answer`;
        break;

      case 'ADMIN_DELETED_COMMENT':
        notificationText.innerHTML = `Your comment has been deleted by <strong class="admin-text">${notification.senderUsername}</strong><br> <span class="third-text">"${notification.important_message}"</span>`;
        break;
      case 'LIKE':
      case 'LOVE':
      case 'DISLIKE':
      case 'CURIOUS':
        let reactionType = reactionTypes.find(reaction => reaction.type === notification.type);
        const reactionIcon = reactionType ? reactionType.icon : '';
        notificationText.textContent = `${reactionIcon} ${notification.senderUsername} ${notification.type.toLowerCase()}d your comment`;
        break;
      case 'POST_LIKE':
      case 'POST_LOVE':
      case 'POST_DISLIKE':
      case 'POST_CURIOUS':
        let postReactionType = reactionTypes.find(reaction => reaction.type === notification.type.replace('POST_', ''));
        const postReactionIcon = postReactionType ? postReactionType.icon : '';
        notificationText.textContent = `${notification.senderUsername} reacted ${postReactionIcon} to your post`;
        break;
      case 'NEW_USER':
        notificationText.textContent = `${notification.senderUsername} joined CORE`;
        break;
      case 'follow':
        notificationText.textContent = `${notification.senderUsername} followed you`;
        break;
      case 'ADMIN_BAN':
        notificationText.textContent = `You have been banned by ${notification.senderUsername}`;
        break;
      case 'ADMIN_UNBAN':
        notificationText.textContent = `You have been unbanned by ${notification.senderUsername}`;
        break;
      case 'ADMIN_VERIFIED':
        notificationText.textContent = `You have been verified by ${notification.senderUsername}`;
        break;
      case 'ADMIN_UNVERIFIED':
        notificationText.textContent = `Your verification has been removed by ${notification.senderUsername}`;
        break;
      case 'NEW_FEEDBACK':
        notificationText.textContent = `New feedback submission from ${notification.senderUsername}`;
        break;
      default:
        notificationText.textContent = `You have a new notification from ${notification.senderUsername}`;
      }

      notificationTextDiv.appendChild(notificationText);

      const flairs = document.createElement('span');


      const notificationTime = document.createElement('span');
      notificationTime.classList.add('time-flair');
      notificationTime.classList.add('third-text');
      notificationTime.classList.add('sub-text');


      notificationTime.textContent = formatDate(notification.createdAt);
      flairs.appendChild(notificationTime);

      notificationTextDiv.appendChild(flairs);

      return notificationTextDiv;
    }

    function createClearAllButton() {
      const clearAllBtn = document.createElement('button');
      clearAllBtn.classList.add('clear-all-btn');
      clearAllBtn.classList.add('cancel-button-text');

      clearAllBtn.innerHTML = 'Clear all';

      clearAllBtn.onclick = async function () {
        const response = await fetch(`/notifications/deleteAll/<%= user.id %>`, {
          method: 'DELETE'
        });
        if (response.ok) {
          const notificationList = document.getElementById('notification-list');
          notificationList.innerHTML = '';
        }
      };

      return clearAllBtn;
    }

    function createClearButton(notification, li) {
      const clearBtn = document.createElement('button');
      clearBtn.classList.add('clear-btn');
      const clearIcon = document.createElement('span');
      clearIcon.classList.add('material-symbols-outlined');
      clearIcon.textContent = 'clear';
      clearBtn.appendChild(clearIcon);

      clearBtn.onclick = async function (event) {
        event.stopPropagation();
        await fetch(`/notifications/${notification.id}`, {
          method: 'DELETE'
        });
        li.remove();
      };

      return clearBtn;
    }

    async function handleNotificationClick(notification, li, notificationIsReadIndicator) {
      await fetch(`/notifications/markAsRead/${notification.id}`, {
        method: 'PUT'
      });

      li.classList.add('read');
      li.classList.remove('unread');
      notificationIsReadIndicator.classList.add('read');
      notificationIsReadIndicator.classList.remove('unread');

      if (notification.type === 'NEW_COMMENT' || notification.type === 'NEW_FEEDBACK' || ['LIKE', 'LOVE', 'DISLIKE', 'CURIOUS'].includes(notification.type)) {
        window.location.href = `/posts/${notification.postId}`;
      } else if (notification.type === 'follow') {
        window.location.href = `/user/${notification.senderUsername}`;
      } else if (notification.type === 'NEW_USER') {
        window.location.href = `/user/${notification.senderUsername}`;
      } else {
        window.location.href = `/notifications/${notification.id}`;
      }
    }

    fetchNotifications();
    <% } %>
  </script>
</body>

</html>