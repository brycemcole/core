<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/user_profile.css" />
  <link rel="shortcut icon" href="/img/core.png" />
</head>

<style>
  main {
    display: block;
  }

  .favorite:hover {
    background-color: var(--light-mode-hover-color);
    cursor: pointer;
  }

  .favorites-header {
    margin: 13px 10px;
  }

  .favorites-type-button .material-symbols-outlined {
    font-size: 1rem;
  }

  .favorites-footer {
    display: flex;
    justify-content: space-between;
    width: 100%;
    flex-direction: row;
    font-size: .825rem;
  }

  .dropdown-content {
    display: none;
  }

  .favorite-title {
    max-width: 85%;
  }

  .favorite-header {
    display: flex;
    width: 100%;
    flex-direction row;
    justify-content: space-between;
  }

  .dropbtn .material-symbols-outlined {
    font-size: 1.2rem;
  }

  .favorites {
    /* padding: 0px 14px; */
    display: flex;
    flex-direction: column;
  }

  .favorite:hover {
    background-color: var(--light-mode-hover-color);
    cursor: pointer;
  }

  .favorites-header {
    margin: 13px 10px;
  }

  .favorites-type-button .material-symbols-outlined {
    font-size: 1rem;
  }

  .favorites-footer {
    display: flex;
    justify-content: space-between;
    width: 100%;
    flex-direction: row;
  }

  .dropdown-content {
    display: none;
  }

  .favorite-title {
    max-width: 85%;
  }

  .favorite-header {
    display: flex;
    flex-direction row;
    justify-content: space-between;
  }

  main {
    height: calc(100dvh - var(--navbar-height));
    background-color: var(--light-mode-main-color);
  }

  @media screen and (max-width: 600px) {
    body {
      height: calc(100dvh - var(--mobile-navbar-height) - var(--mobile-second-navbar-height)) !important;
      overflow-y: hidden;
    }

    main {
      overflow-y: auto;

    }
  }


  button.dropbtn {
    background-color: transparent;
    border: none;
    color: var(--light-mode-secondary-text-color);
    font-size: 16px;
    cursor: pointer;
  }

  .dropdown-content.show {
    display: block;
  }

  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content a {
    color: var(--light-mode-secondary-text-color);
    padding: 12px 16px;
    text-decoration: none;
    display: block;
  }

  .dropdown-content {
    position: absolute;
    background-color: var(--light-mode-main-color);
    min-width: 160px;
  }

  #favorites-header {
    margin: 13px 13px;
  }

  .favorites-container {
    max-width: 800px;
    display: flex;
    margin-left: auto;
    margin-right: auto;
    flex-direction: column;
    align-items: center;
  }


  div.favorites-type-selector::-webkit-scrollbar {
    display: none;
  }

  @media (prefers-color-scheme: dark) {
    main {
      background-color: var(--dark-mode-body-color);
    }


    .favorite:hover {
      background-color: var(--dark-mode-hover-background-color);
    }
  }

  @media screen and (max-width: 600px) {
    .favorites-container {
      align-items: normal
    }
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'favorites' }) %>
  <main>
    <div class="favorites-container">
      <div class="page-header flex flex-col items-start space-y-2">
        <div class="header secondary-text">
          <h5 class="text-2xl font-semibold text-gray-800 dark:text-gray-200">Saved</h5>
        </div>
      </div>
      <!-- Favorites Type Selector -->
      <!--
      <div class="favorites-type-selector">
        <button class="favorites-type-button" onclick="getFavorites('all')">
          <span class="material-symbols-outlined">
            star
          </span>
          <p>All</p>
        </button>
        <button class="favorites-type-button bg-slate-800 text-background border-slate-700" onclick="getFavorites('posts')">
          <span class="material-symbols-outlined">
            article
          </span>
          <p>Posts</p>
        </button>
        <button class="favorites-type-button" onclick="getFavorites('jobs')">
          <span class="material-symbols-outlined">
            work
          </span>
          <p>Jobs</p>
        </button>
        <button class="favorites-type-button" onclick="getFavorites('comments')">
          <span class="material-symbols-outlined">
            comment
          </span>
          <p>Comments</p>
        </button>
      </div>
      -->
    </div>
    <div class="favorites p-3" id="favoritesJobContainer">

    </div>
    <div class="favorites p-3" id="favoritesPostContainer">

    </div>
    <div class="favorites p-3" id="favoritesCommentContainer">

    </div>
    <%- include('partials/footer') %>
    </div>

  </main>

  <script>
    const notificationSelectorButtons = document.querySelectorAll('.favorites-type-button');
    let activeButton = null; // Track the currently active button

    // Function to set the active button
    /*
    function setActiveButton(button) {
      if (activeButton) {
        activeButton.classList.remove('active');
      }
      button.classList.add('active');
      activeButton = button;
    }

    notificationSelectorButtons.forEach(button => {
      button.addEventListener('click', () => {
        const type = button.textContent.toLowerCase();
        setActiveButton(button);
      });
    });
     

    const allButton = document.querySelector('.favorites-type-button:nth-child(1)');
    setActiveButton(allButton);
    */

    async function getFavorites(type = '') {
      try {
        const response = await fetch(`/favorites/${type}`);
        const data = await response.json();
        const favorites = data.favorites;
        renderFavorites(favorites, type);
      } catch (error) {
        console.error('Error fetching favorites:', error);
      }
    }

    function renderFavorites(favorites, type) {

      if (type === 'all') {
        renderFavoritePosts(favorites.posts);
        renderFavoriteComments(favorites.comments);
        renderFavoriteJobs(favorites.jobs);
      } else if (type === 'posts') {
        renderFavoritePosts(favorites);
      } else if (type === 'comments') {
        renderFavoriteComments(favorites);
      } else if (type === 'jobs') {
        renderFavoriteJobs(favorites);
      }
    }

    function renderFavoritePosts(posts) {
      const favoritesContainer = document.getElementById('favoritesPostContainer');

      const favoritesHeaderContainer = document.createElement('div');
      favoritesHeaderContainer.classList.add('flex', 'items-center', 'justify-between', 'mb-4', 'px-4', 'py-2', 'bg-gray-100', 'dark:bg-gray-800', 'rounded-lg');

      const favoriteHeader = document.createElement('h5');
      favoriteHeader.classList.add('text-lg', 'font-semibold', 'text-gray-800', 'dark:text-gray-200');
      favoriteHeader.textContent = 'Posts';

      const headerIcon = document.createElement('span');
      headerIcon.classList.add('material-symbols-outlined', 'text-blue-500');
      headerIcon.textContent = 'article';

      favoritesHeaderContainer.appendChild(headerIcon);
      favoritesHeaderContainer.appendChild(favoriteHeader);
      favoritesContainer.appendChild(favoritesHeaderContainer);

      if (posts.length === 0) {
        const noFavoritesElement = document.createElement('div');
        noFavoritesElement.classList.add('favorite');
        noFavoritesElement.innerHTML = `
        <h5>No favorite posts found.</h5>
      `;
        favoritesContainer.appendChild(noFavoritesElement);
        return;
      }


      posts.forEach((post) => {
        const favoriteElement = createCard(post.username, formatDate(post.created_at), post.title, post.content, true, `/posts/${post.post_id}`, post.image, post.tags);
        favoriteElement.onclick = () => {
          window.location.href = `/posts/${post.post_id}`;
        };

        favoritesContainer.appendChild(favoriteElement);
      });
    }

    function renderFavoriteComments(comments) {
      const favoritesContainer = document.getElementById('favoritesCommentContainer');

      const favoritesHeaderContainer = document.createElement('div');
      favoritesHeaderContainer.classList.add('flex', 'items-center', 'justify-between', 'mb-4', 'px-4', 'py-2', 'bg-gray-100', 'dark:bg-gray-800', 'rounded-lg');

      const favoriteHeader = document.createElement('h5');
      favoriteHeader.classList.add('text-lg', 'font-semibold', 'text-gray-800', 'dark:text-gray-200');
      favoriteHeader.textContent = 'Comments';

      const headerIcon = document.createElement('span');
      headerIcon.classList.add('material-symbols-outlined', 'text-blue-500');
      headerIcon.textContent = 'comment';

      favoritesHeaderContainer.appendChild(headerIcon);
      favoritesHeaderContainer.appendChild(favoriteHeader);
      favoritesContainer.appendChild(favoritesHeaderContainer);

      if (comments.length === 0) {
        const noFavoritesElement = document.createElement('div');
        noFavoritesElement.classList.add('favorite');
        noFavoritesElement.innerHTML = `
        <h5>No favorite comments found.</h5>
      `;
        favoritesContainer.appendChild(noFavoritesElement);
        return;
      }


      comments.forEach((comment) => {
        console.log(comment);
        const favoriteElement = createCard(comment.username, formatDate(comment.created_at), comment.comment, comment.post_title, true, `/posts/${comment.post_id[1]}#${comment.comment_id}`, null, comment.tags);
        favoriteElement.onclick = () => {
          window.location.href = `/posts/${comment.post_id[1]}#${comment.comment_id}`;
        };


        favoritesContainer.appendChild(favoriteElement);
      });
    }

    function createCard(
      name,
      timestamp,
      title,
      experienceLevel,
      location,
      clickable = false,
      link = null,
      image = null,
      tags = null,
    ) {
      const card = document.createElement("div");

      let tagsHtml = "";
      if (tags) {
        tagsHtml = tags
          .map(
            (tag) => `
      <div class="${tag.class} inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex flex-row gap-2">
      ${tag.icon ? tag.icon : ""}
        ${tag.text}
      </div>
    `,
          )
          .join("");
      }

      const cardContent = `
<div class="flex flex-row items-start gap-2 rounded-lg text-left mb-4 text-sm transition-all hover:bg-accent" ${clickable ? `onclick="window.location.href='${link}'"` : ""}>
  <span class="relative flex shrink-0 overflow-hidden rounded-md mr-2 h-10 w-10">
    <img class="aspect-square h-full w-full" src="${image || '/img/glyph.png'}" onerror="this.style.display='none';" />
  </span>
  <div class="flex flex-col w-full gap-1">
    <div class="flex items-center">
      <div class="flex flex-col gap-1">
        <div class="text-md font-semibold">${name}</div>
            <div class="text-base font-medium text-balance max-w-lg leading-relaxed">
      ${title}
    </div>
    ${experienceLevel ? `<div class="text-xs text-foreground flex flex-row gap-06 v-center">${experienceLevel}</div>` : ""}
      </div>
<div class="ml-auto text-xs text-foreground gap-06 v-center whitespace-nowrap">${timestamp}</div>
    </div>

    <div class="text-sm text-muted-foreground">
      ${location}
    </div>
    <div class="flex items-center gap-2 wrap">
      ${tagsHtml}
    </div>
  </div>
</div>
  `;

      card.innerHTML = cardContent;
      return card;
    }

    function renderFavoriteJobs(jobs) {
      const favoritesJobContainer = document.getElementById('favoritesJobContainer');

      const favoritesHeaderContainer = document.createElement('div');
      favoritesHeaderContainer.classList.add('flex', 'items-center', 'justify-between', 'mb-4', 'px-4', 'py-2', 'bg-gray-100', 'dark:bg-gray-800', 'rounded-lg');

      const favoriteHeader = document.createElement('h5');
      favoriteHeader.classList.add('text-lg', 'font-semibold', 'text-gray-800', 'dark:text-gray-200');
      favoriteHeader.textContent = 'Jobs';

      const headerIcon = document.createElement('span');
      headerIcon.classList.add('material-symbols-outlined', 'text-blue-500');
      headerIcon.textContent = 'work';

      favoritesHeaderContainer.appendChild(headerIcon);
      favoritesHeaderContainer.appendChild(favoriteHeader);
      favoritesJobContainer.appendChild(favoritesHeaderContainer);


      if (jobs.length === 0) {
        const noFavoritesElement = document.createElement('div');
        noFavoritesElement.classList.add('favorite');
        noFavoritesElement.innerHTML = `
        <h5 class="pl-4 pr-4">No favorite jobs found.</h5>
      `;
        favoritesJobContainer.appendChild(noFavoritesElement);
        return;
      }

      jobs.forEach((job) => {
        const favoriteElement = createCard(job.company_name, formatDate(job.created_at), job.title, job.description, true, `/jobs/${job.job_id}`, job.company_logo, job.tags);
        favoriteElement.onclick = () => {
          window.location.href = `/jobs/${job.job_id}`;
        };

        favoritesJobContainer.appendChild(favoriteElement);
      });
    }

    function toggleDropdown(event) {
      event.stopPropagation();
      const dropdownContent = event.target.closest('.dropdown').querySelector('.dropdown-content');
      dropdownContent.classList.toggle('show');
    }

    function formatDate(date) {
      let postDate = new Date(date);
      let today = new Date();
      let formattedDate;

      let diff = today - postDate;

      // Convert time difference to different units
      let minutes = Math.floor(diff / 60000); // 60,000 milliseconds in a minute
      let hours = Math.floor(diff / 3600000); // 3,600,000 milliseconds in an hour
      let days = Math.floor(diff / 86400000); // 86,400,000 milliseconds in a day
      let years = Math.floor(diff / 31536000000); // 31,536,000,000 milliseconds in a year

      // Decide the format based on the time difference
      if (minutes < 60) {
        formattedDate = minutes + 'm';
      } else if (hours < 24) {
        formattedDate = hours + 'h';
      } else if (days < 365) {
        formattedDate = days + 'd';
      } else {
        formattedDate = years + 'y';
      }
      return formattedDate;
    }

    document.addEventListener('click', function (event) {
      const dropdowns = document.querySelectorAll('.dropdown-content');
      dropdowns.forEach(function (dropdown) {
        if (!dropdown.contains(event.target)) {
          dropdown.classList.remove('show');
        }
      });
    });

    getFavorites('all');
  </script>
</body>

</html>