<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/user_profile.css" />
  <link rel="shortcut icon" href="/img/core.png" />
</head>



<style>
  .tags-container {
    display: flex;
    font-size: .925rem;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    box-sizing: border-box;
    max-width: 100%;
    gap: .45rem;
    overflow-x: auto;
  }

  .hidden-tags {
    display: flex;
    font-size: .925rem;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    box-sizing: border-box;
    max-width: 100%;
    gap: .45rem;
    overflow-x: auto;
  }

  main {
    display: flex;
    overflow-y: auto;
  }


  .hidden-tags {
    display: none;
    margin-top: 5px;
  }

  .community-flair {
    padding: 2px 5px;
    border-radius: 5px;
    color: white;
    font-size: 12px;
    margin-right: 5px;
  }

  .community-flairs {
    display: flex;
    gap: .4rem;
    align-items: center;
  }

  .community-flairs div {
    display: flex;
    align-items: center;
  }

  .communities-list {
    max-width: 800px;
    border: 1px solid var(--border-color);
    border-radius: 10px;
    width: 70%;
    background: var(--light-mode-body-color);
  }

  .communities-header {
    margin: 13px 10px;
    margin-top: 1.6rem;
    margin-bottom: 0.8rem;
  }

  .community-entry {
    border-bottom: 1px solid var(--border-color);
    padding: .6rem 1rem;
    display: flex;
    cursor: pointer;
    flex-direction: column;
  }

  .community-entry:last-child {
    border-bottom: 0;
  }

  .community-info {
    display: flex;
    align-items: center;
    gap: .6rem;
  }

  .community-entry .material-symbols-outlined {
    font-size: 20px;
    margin-right: 10px;
  }

  @media (prefers-color-scheme: dark) {
    .community-entry {
      border-color: var(--dark-mode-border-color);
    }

    .communities-list {
      border-color: var(--dark-mode-border-color);
      background-color: var(--dark-mode-main-color);
    }

    .community-flair {
      background-color: var(--dark-mode-lighter-color);
    }

    .community-entry:hover {
      background-color: var(--dark-mode-hover-background-color);
    }

    .community-entry:last-child {
      border-color: var(--dark-mode-main-color);
    }
  }

  @media (max-width: 768px) {
    .communities-list {
      border: 0;
      width: 100%;
      background: 0;
      border-radius: 0;
    }

    main {
      display: block;
    }
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'communities' }) %>
  <main id="communities-container">
    <!-- Communities will be rendered here -->
  </main>

  <%- include('partials/footer') %>

  <script>
    async function fetchCommunities() {
      try {
        const response = await fetch('/api/communities');
        if (!response.ok) {
          throw new Error('Failed to fetch communities');
        }
        const communities = await response.json();
        renderCommunities(communities);
      } catch (error) {
        console.error('Error:', error);
        document.getElementById('communities-container').innerHTML = '<p>Error loading communities. Please try again later.</p>';
      }
    }

    function renderCommunities(communities) {
      const container = document.getElementById('communities-container');
      const joinedNetworks = [];
      const exploreNetworks = [];

      communities.forEach((community) => {
        if (community.is_member) {
          joinedNetworks.push(community);
        } else if (community.PrivacySetting.toLowerCase() === 'public') {
          exploreNetworks.push(community);
        }
      });

      let html = '';

      if (joinedNetworks.length > 0) {
        html += `
          <div class="page-header flex items-center justify-between mb-2">
            <h5 class="text-2xl font-semibold text-gray-800 dark:text-gray-200">Joined Networks</h5>
          </div>
          <div class="communities-list">
            ${joinedNetworks.map(community => renderNetworkEntry(community)).join('')}
          </div>
        `;
      }

      if (exploreNetworks.length > 0) {
        html += `
          <div class="page-header flex items-center justify-between mb-4">
            <h5 class="text-2xl font-semibold text-gray-800 dark:text-gray-200">Explore Networks</h5>
          </div>
          <div class="communities-list">
            ${exploreNetworks.map(community => renderNetworkEntry(community)).join('')}
          </div>
        `;
      }

      container.innerHTML = html;
    }

    function renderNetworkEntry(community) {
      return `
        <div class="community-entry p-4" onclick="window.location.href='/networks/${community.shortname}'">
          <div class="community-info">
            <span class="material-symbols-outlined" style="padding:0;margin:0;font-size: 1.1rem;color:${community.community_color};">${community.mini_icon}</span>
            <span class="community-info-title">
              <span class="sub-text ${!community.is_member ? 'bold' : ''}">
                ${community.name}
                <span class="sub-text text-muted-foreground">
                  /${community.shortname}
                </span>
              </span>
            </span>
          </div>
          <div class="community-flairs text-muted-foreground sub-text">
            <div>
              <span class="material-symbols-outlined" style="padding:0;margin:0;vertical-align:-2px;font-size: .9rem;margin-right: 4px;">person</span>
              ${community.MemberCount} member${community.MemberCount !== 1 ? 's' : ''}
            </div>
          </div>
        </div>
      `;
    }

    document.addEventListener('DOMContentLoaded', fetchCommunities);

    function renderTags(tagsString, initialTagCount = 3) {
      const tags = tagsString.split(',').map(tag => tag.trim());
      const visibleTags = tags.slice(0, initialTagCount);
      const hiddenTags = tags.slice(initialTagCount);

      let html = '<div class="tags-container">';

      // Render visible tags
      visibleTags.forEach(tag => {
        html += `<span class="tag">${tag}</span>`;
      });

      // Render hidden tags and toggle button if there are any
      if (hiddenTags.length > 0) {
        html += `<span class="tag-toggle sub-text secondary-text" onclick="toggleHiddenTags(event, this)">+${hiddenTags.length} more</span>`;
        html += '<div class="hidden-tags" style="display: none;">';
        hiddenTags.forEach(tag => {
          html += `<span class="tag">${tag}</span>`;
        });
        html += '</div>';
      }

      html += '</div>';

      return html;
    }

    // Function to toggle hidden tags
    function toggleHiddenTags(event, element) {
      event.stopPropagation();
      const hiddenTags = element.nextElementSibling;
      const isHidden = hiddenTags.style.display === 'none';
      hiddenTags.style.display = isHidden ? 'inline-flex' : 'none';
      element.textContent = isHidden ? 'Show less' : `+${hiddenTags.children.length} more`;
    }

    async function leaveCommunity(event, community_name) {
      event.stopPropagation();
      const response = await fetch(`/networks/${community_name}/leave`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        window.location.reload();
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const communityTags = document.querySelectorAll('.community-tags');
      communityTags.forEach((tagContainer) => {
        const tagsString = tagContainer.textContent;
        tagContainer.innerHTML = renderTags(tagsString);
      });
    });

    async function joinCommunity(event, community_shortname) {
      event.stopPropagation();
      const response = await fetch(`/networks/${community_shortname}/join`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        window.location.reload();
      }
    }
  </script>

</body>

</html>