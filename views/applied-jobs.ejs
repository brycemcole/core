<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE/</title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/jobs.css" />
  <link rel="stylesheet" href="/css/applied-jobs.css" />

  <link rel="shortcut icon" href="/img/core.png" />
</head>
<style>
  /* Table Styles */
  .job-table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 30px;
    border-style: hidden;
    box-shadow: 0 0 0 1px var(--border-color);
    border-collapse: collapse;
  }

  .job-table th,
  .job-table tr {
    border-bottom: 1px solid var(--border-color);
  }

  .job-table {
    border-radius: 10px;
  }

  .job-table th {
    background-color: transparent;
    text-align: left;
  }

  .job-table td {
    padding: 6px 4px;
  }

  .job-table th {
    padding: 16px 8px;
  }

  .job-table tr:hover {
    background-color: var(--light-mode-hover-color);
  }

  .job-table thead tr:hover {
    background-color: transparent;
  }

  .job-table thead tr th:hover {
    background-color: var(--light-mode-hover-color);
  }

  .color-circle {
    display: inline-block;
    width: 10px;
    height: 10px;
    margin-right: 8px;
    border-radius: 50%;
    vertical-align: middle;
  }

  .color-circle.pending {
    background-color: gray;
  }

  td>* {
    word-break: break-all;
    overflow-wrap: break-word;
  }

  .color-circle.responded {
    background-color: green;
  }

  .color-circle.expired {
    background-color: red;
  }

  .color-circle.remove {
    background-color: black;
  }

  @media (prefers-color-scheme: dark) {

    .job-table th,
    .job-table tr {
      border-color: var(--dark-mode-border-color);
    }

    .job-table {
      box-shadow: 0 0 0 1px var(--dark-mode-border-color);
    }

    .job-table thead tr th:hover {
      background-color: var(--dark-mode-hover-color);
    }

    .job-table tr:hover {
      background-color: var(--dark-mode-hover-color);
    }
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="main-container">
      <div class="header flex sb v-center margin-1-bottom">
        <div class="header-title flex flex-col">
          <p class="header-text bold">Applied Jobs</p>
          <a class="back-button link mini-text" href="/jobs">Back</a>
        </div>
      </div>
      <div class="flex w-100 gap-1 margin-1-bottom">
        <input type="text" id="search-input" placeholder="Search">

      </div>
      <div class="job-table-container">
        <table class="job-table">
          <thead>
            <tr>
              <th class="mini-text" style="padding: 10px;"><input type="checkbox" name="select-all" id="select-all"></th>
              <th class="mini-text" data-column="company_name" style="padding: 10px;">Company
              </th>
              <th class="mini-text" data-column="title">Title
              </th>
              <th class="mini-text" data-column="job_status">Status

              </th>
            </tr>
          </thead>
          <tbody id="job-table-body">
            <!-- Job rows will be inserted here -->
          </tbody>
        </table>
      </div>
    </div>
  </main>

  <script>
    document.getElementById('search-input').addEventListener('input', function () {
      const query = this.value.toLowerCase();
      const jobTableBody = document.getElementById('job-table-body');
      const jobRows = jobTableBody.querySelectorAll('tr');

      jobRows.forEach(row => {
        const companyName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        const title = row.querySelector('td:nth-child(3)').textContent.toLowerCase();


        if (companyName.includes(query) || title.includes(query)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });


    function createCustomSelect(job) {
      const jobId = job.id;
      const userChoice = job.job_status ?
        `<span class = "color-circle ${job.job_status}"></span> ${job.job_status.charAt(0).toUpperCase() + job.job_status.slice(1)}` :
        `<span class = "color-circle pending"></span> Pending`;
      const options = [{
          value: 'pending',
          label: 'Pending'
        },
        {
          value: 'responded',
          label: 'Responded'
        },
        {
          value: 'expired',
          label: 'Expired'
        },
        {
          value: 'remove',
          label: 'Remove'
        },
      ];

      return `
        <div class="dropdown" data-job-id="${jobId}">
          <button class="dropdown-button mini-text px-4 py-2 secondary-text">
            ${userChoice}
          </button>
          <div class="dropdown-content">
            ${options
              .map(
                (option) => `
              <a href="#" class="select-option mini-text ${
                userChoice.toLowerCase() === option.value ? 'selected' : ''
              }" data-value="${option.value}" onclick="updateJobStatus(event, '${jobId}', '${option.value}', this)">
                <span class="color-circle ${option.value}"></span> ${option.label}
              </a>
            `
              )
              .join('')}
          </div>
        </div>
      `;
    }

    function updateJobStatus(event, jobId, status, element) {
      event.preventDefault();
      event.stopPropagation();
      // Update UI
      const dropdown = element.closest('.dropdown');
      const button = dropdown.querySelector('.dropdown-button');
      button.innerHTML = `
        <span class="color-circle ${status}"></span>
        ${
          status.charAt(0).toUpperCase() + status.slice(1)
        } <span class="arrow">&#9662;</span>
      `;

      // Update job status via fetch
      fetch('/jobs/update-job-status', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            jobId,
            status,
          }),
        })
        .then((response) => {
          if (response.ok) {
            console.log('Job status updated');
            if (status === 'remove') {
              // Remove the job row from the table
              const jobRow = dropdown.closest('tr');
              jobRow.remove();
            }
          } else {
            console.error('Error updating job status');
          }
        })
        .catch((error) => {
          console.error('Error updating job status:', error);
        });
    }

    const appliedJobsData = <%- JSON.stringify(appliedJobs) %>;

    function renderJobPostings(jobPostings) {
      const jobTableBody = document.getElementById('job-table-body');
      jobTableBody.innerHTML = ''; // Clear existing job postings

      if (jobPostings.length === 0) {
        // Render no jobs message and link to jobs page
        const noJobsMessage = document.createElement('tr');
        const noJobsTd = document.createElement('td');
        noJobsTd.colSpan = 4;
        noJobsTd.innerHTML = `
          <div class="no-jobs-message">
            <h2 class="sub-text">You haven't applied to any jobs yet.</h2>
            <a href="/jobs" class="link">Browse Jobs</a>
          </div>
        `;
        noJobsMessage.appendChild(noJobsTd);
        jobTableBody.appendChild(noJobsMessage);
        return;
      }

      jobPostings.forEach((job) => {
        const jobRow = document.createElement('tr');
        jobRow.classname = 'flex'

        // Select cell
        const selectCell = document.createElement('td');
        selectCell.style.padding = '10px';
        const selectCheckbox = document.createElement('input');
        selectCheckbox.type = 'checkbox';
        selectCheckbox.name = 'select-job';
        selectCheckbox.value = job.id;
        selectCell.appendChild(selectCheckbox);

        // Company Name cell
        const companyNameCell = document.createElement('td');
        const companyLink = document.createElement('a');
        companyLink.href = `/jobs/company/${job.company_name}`;
        companyLink.className = 'company-name mini-text bold';
        companyLink.textContent = job.company_name;
        companyNameCell.appendChild(companyLink);

        // Title cell
        const titleCell = document.createElement('td');
        const titleLink = document.createElement('a');
        titleLink.href = `/jobs/${job.id}`;
        titleLink.className = 'job-title sub-text link';
        titleLink.innerHTML = job.title;

        titleCell.appendChild(titleLink);

        // Status cell
        const statusCell = document.createElement('td');
        statusCell.innerHTML = createCustomSelect(job);

        jobRow.appendChild(selectCell);
        jobRow.appendChild(companyNameCell);
        jobRow.appendChild(titleCell);
        jobRow.appendChild(statusCell);

        jobTableBody.appendChild(jobRow);
      });
    }

    document.addEventListener('DOMContentLoaded', function () {
      renderJobPostings(appliedJobsData);
    });

    let currentSortColumn = null;
    let currentSortDirection = 'asc';

    document.querySelectorAll('th[data-column]').forEach(th => {
      th.addEventListener('click', function () {
        const column = this.getAttribute('data-column');
        sortTable(column);
      });
    });

    function sortTable(column) {
      if (currentSortColumn === column) {
        // Toggle sort direction
        currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
      } else {
        // New column, set sort direction to ascending
        currentSortColumn = column;
        currentSortDirection = 'asc';
      }

      // Get the current data (filtered data if search is active)
      const query = document.getElementById('search-input').value.toLowerCase();
      let jobsToRender = appliedJobsData;

      if (query) {
        jobsToRender = appliedJobsData.filter(job =>
          job.company_name.toLowerCase().includes(query) ||
          job.title.toLowerCase().includes(query)
        );
      }

      // Sort the data
      jobsToRender.sort((a, b) => {
        let valA = a[column] || '';
        let valB = b[column] || '';

        // For status, default to 'pending' if undefined
        if (column === 'job_status') {
          valA = valA || 'pending';
          valB = valB || 'pending';
        }

        // Compare strings case-insensitively
        valA = valA.toString().toLowerCase();
        valB = valB.toString().toLowerCase();

        if (valA < valB) {
          return currentSortDirection === 'asc' ? -1 : 1;
        }
        if (valA > valB) {
          return currentSortDirection === 'asc' ? 1 : -1;
        }
        return 0;
      });

      // Re-render the table
      renderJobPostings(jobsToRender);
    }
  </script>
</body>

</html>