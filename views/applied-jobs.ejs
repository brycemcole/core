<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE/</title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/jobs.css" />
  <link rel="stylesheet" href="/css/applied-jobs.css" />


  <link rel="shortcut icon" href="/img/core.png" />
</head>
<style>
  .job {
    justify-content: flex-start !important;
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="main-container">
      <div class="header flex sb v-center margin-1-bottom">
        <div class="header-title flex flex-col">
          <p class="sub-text bold">Applied Jobs</p>
          <a class="back-button link mini-text" href="/jobs">Back</a>
        </div>
        <a href="#" class="link mini-text">+ Add Job</a>
      </div>
      <div id="data-container" class="job-list">
      </div>
    </div>

  </main>
  <script>
    function createCustomSelect(job) {
      const jobId = job.id;
      const userChoice = job.job_status ? job.job_status.charAt(0).toUpperCase() + job.job_status.slice(1) : 'Pending';
      const options = [{
          value: 'pending',
          label: 'Pending'
        },
        {
          value: 'responded',
          label: 'Responded'
        },
        {
          value: 'expired',
          label: 'Expired'
        },
        {
          value: 'remove',
          label: 'Remove'
        }
      ];

      return `
        <div class="dropdown" tabindex="0" data-job-id="${jobId}" onclick="event.stopPropagation()">
          <button class="dropdown-button px-4 py-2 mini-text secondary-text" aria-haspopup="true" aria-expanded="false">
            ${userChoice}
            <span class="arrow">&#9662;</span>
          </button>
          <div class="dropdown-content">
            ${options.map(option => `
              <a href="#" class="select-option mini-text ${userChoice.toLowerCase() === option.value ? 'selected' : ''}" data-value="${option.value}" onclick="updateJobStatus(event, '${jobId}', '${option.value}')">
                <span class="color-circle ${option.value}"></span> ${option.label}
              </a>
            `).join('')}
          </div>
        </div>
      `;
    }

    function updateJobStatus(event, jobId, status) {
      event.preventDefault();
      // Implement the logic to update the job status here
      console.log(`Job ID: ${jobId}, New Status: ${status}`);
    }

    const appliedJobsData = <%- JSON.stringify(appliedJobs) %>;

    function formatSalary(salary) {
      if (!salary) return "";
      return salary >= 1000 ? (salary / 1000).toFixed(0) + "k" : salary.toString();
    }

    function getFormattedSalary(salary, salaryMax) {
      if (salary && salaryMax) {
        const average = Math.round((salary + salaryMax) / 2);
        return `${formatSalary(average)}`;
      } else if (salary) {
        return formatSalary(salary);
      }
      return "";
    }

    function formatDateColor(dateString) {
      const now = new Date();
      const postedDate = new Date(dateString);
      // if within 2 weeks, green, if within 2 months, yellow, if older, red
      const diffTime = Math.abs(now - postedDate);
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      if (diffDays <= 14) {
        return 'green';
      } else if (diffDays <= 60) {
        return 'yellow';
      } else {
        return 'red';
      }
    }

    function formatRelativeDate(dateString) {
      const now = new Date();
      const postedDate = new Date(dateString);
      const diffTime = Math.abs(now - postedDate);
      const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      const diffMonths = Math.floor(diffDays / 30);
      const diffYears = Math.floor(diffDays / 365);

      if (diffYears > 0) {
        return `${diffYears}y`;
      } else if (diffMonths > 0) {
        return `${diffMonths}m`;
      } else if (diffDays > 0) {
        return `${diffDays}d`;
      } else if (diffHours > 0) {
        return `${diffHours}h`;
      } else {
        return 'Just now';
      }
    }

    function renderJobPostings(jobPostings) {
      const jobListContainer = document.querySelector(".job-list");
      jobListContainer.innerHTML = ''; // Clear existing job postings

      if (jobPostings.length === 0) {
        // render no jobs message and link to jobs page
        const noJobsMessage = document.createElement("div");
        noJobsMessage.classList.add("no-jobs-message");
        noJobsMessage.innerHTML = `
        <h2 class="sub-text">You haven't applied to any jobs yet.</h2>
        <a href="/jobs" class="link">Browse Jobs</a>
        `;
        jobListContainer.appendChild(noJobsMessage);
        return;
      }

      jobPostings.forEach((job) => {
        const jobElement = document.createElement("div");
        jobElement.classList.add("job");
        jobElement.onclick = () => {
          window.location.href = `/jobs/${job.id}`;
        };
        jobElement.innerHTML = `
        <a href="/jobs/${job.id}">
        <div class="job-preview-image">
                ${
                job.company_logo
                    ? `<img style="height: 36px;width:36px;" class="thumbnail thumbnail-regular thumbnail-tiny" onerror="this.onerror=null;this.src='/img/glyph.png';" src="${job.company_logo}" alt="" />`
                    : ''
                }
        </div>
        <div class="job-preview">
            <div class="job-info">
            <div class="company-info">
                <div class="job-posting-company-info">
                <a class="company-name third-text mini-text bold" href="/jobs/company/${job.company_name}">${job.company_name}</a>
                </div>
            </div>
            <span class="job-text"><h3 class="job-title sub-text">${job.title}</h3></span>
            
            <div class="job-title-location third-text mini-text">
                <div class="job-post-date ${formatDateColor(job.postedDate)} mini-text">
                <time>${formatRelativeDate(job.postedDate)}</time>
                </div>
                <span style="font-size:.7rem;">•</span>
                <div class="experience-level sub-text">${
                job.experienceLevel === 'Mid Level'
                    ? 'L3/L4'
                    : job.experienceLevel === 'Entry Level'
                    ? 'L1/L2'
                    : job.experienceLevel === 'Senior'
                        ? 'L5/L6'
                        : job.experienceLevel
                }</div>
                ${job.salary || job.salary_max ? `
                <span style="font-size:.7rem;">•</span><div class="job-salary mini-text">
                    <span class="material-symbols-outlined">attach_money</span>
                    ${getFormattedSalary(job.salary, job.salary_max)}/yr
                </div>
                ` : ``}
                <span style="font-size:.7rem;">•</span><div class="location mini-text">
                <span class="material-symbols-outlined">location_on</span>
                ${formatLocation(job.location).trim()}
                </div>
                <span style="font-size:.7rem;">•</span><div class="views mini-text">
                <span class="material-symbols-outlined">visibility</span>
                ${job.views ? job.views : '0'}
                </div>
            </div>
            </div>
        </div>
      ${createCustomSelect(job)}
        </a>
        `;

        jobListContainer.appendChild(jobElement);
      });
    }

    // event listener so clicks when option is open will not trigger opening a job
    document.addEventListener('click', (event) => {
      const customSelects = document.querySelectorAll('.custom-select');
      customSelects.forEach((customSelect) => {
        if (customSelect.classList.contains('open')) {
          event.preventDefault();
          event.stopPropagation();
        }
      });
    });

    function setupCustomSelects() {
      const customSelects = document.querySelectorAll('.custom-select');
      console.log('Number of custom selects found:', customSelects.length);

      customSelects.forEach((customSelect, index) => {
        const trigger = customSelect.querySelector('.select-trigger');
        const options = customSelect.querySelector('.select-options');
        const selectedText = trigger.querySelector('.selected-text');

        console.log(`Setting up custom select ${index + 1}`);

        // Prevent job link click when interacting with custom select
        customSelect.addEventListener('click', (event) => {
          event.preventDefault();
          event.stopPropagation();
        });

        // Toggle the custom select options when the trigger is clicked
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          event.stopPropagation();
          console.log(`Custom select ${index + 1} clicked`);
          customSelect.classList.toggle('open');
        });

        // Handle option selection
        options.addEventListener('click', (event) => {
          event.preventDefault();
          event.stopPropagation();
          if (event.target.classList.contains('select-option')) {
            const selectedText = customSelect.querySelector('.selected-text');
            const colorCircle = customSelect.querySelector('.color-circle');
            const newStatus = event.target.dataset.value;
            const jobElement = customSelect.closest('.job');

            if (newStatus === 'remove') {
              jobElement.remove();
            }

            selectedText.textContent = event.target.textContent.trim();
            customSelect.classList.remove('open');
            console.log(`Select ${index + 1} changed to:`, selectedText.textContent);

            // Update the color of the dot
            colorCircle.className = `color-circle ${newStatus}`;

            // Make PUT request to update job status
            updateJobStatus(customSelect.dataset.jobId, newStatus);
          }
        });
      });

      function updateJobStatus(jobId, status) {
        fetch('/jobs/update-job-status', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              jobId,
              status
            }),
          })
          .then((response) => {
            if (response.ok) {
              console.log('Job status updated');
            } else {
              console.error('Error updating job status');
            }
          })
          .catch((error) => {
            console.error('Error updating job status:', error);
          });
      }

      // Close all custom selects when clicking outside
      document.addEventListener('click', (event) => {
        customSelects.forEach((customSelect) => {
          if (!customSelect.contains(event.target)) {
            customSelect.classList.remove('open');
          }
        });
      });
    }

    document.addEventListener('DOMContentLoaded', function () {
      console.log('DOM fully loaded');
      renderJobPostings(appliedJobsData);
      console.log('Job postings rendered');
      setTimeout(() => {
        console.log('Setting up custom selects');
        setupCustomSelects();
      }, 100);
    });

    document.querySelectorAll('.select-option').forEach(option => {
      option.addEventListener('click', (event) => {
        // Stop the event from bubbling up to the parent job element
        event.stopPropagation();

        const customSelect = event.target.closest('.custom-select');
        const selectedText = customSelect.querySelector('.selected-text');
        const colorCircle = customSelect.querySelector('.color-circle');
        const newStatus = event.target.dataset.value;

        selectedText.textContent = event.target.textContent;
        customSelect.classList.remove('open');
        console.log(`Select changed to:`, selectedText.textContent);

        // Update the color of the dot
        colorCircle.className = `color-circle ${newStatus}`;

        // Make PUT request to update job status
        fetch('/jobs/update-job-status', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              jobId: customSelect.dataset.jobId,
              status: newStatus,
            }),
          })
          .then((response) => {
            if (response.ok) {
              console.log('Job status updated');
            } else {
              console.error('Error updating job status');
            }
          })
          .catch((error) => {
            console.error('Error updating job status:', error);
          });
      });
    });
  </script>
</body>

</html>