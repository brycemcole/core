<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>CORE/</title>
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/jobs.css" />
  <link rel="stylesheet" href="/css/applied-jobs.css" />

  <link rel="shortcut icon" href="/img/core.png" />
</head>
<style>
  td>* {
    word-break: break-all;
    overflow-wrap: break-word;
  }

  .color-circle.responded {
    background-color: green;
  }

  .color-circle.expired {
    background-color: red;
  }

  .color-circle.remove {
    background-color: black;
  }

  @media (prefers-color-scheme: dark) {

    .job-table th,
    .job-table tr {
      border-color: var(--dark-mode-border-color);
    }
  }
</style>

<body>
  <%- include('partials/navbar', { pagePath: 'updates' }) %>
  <main>
    <div class="main-container">
      <div class="header flex sb v-center margin-1-bottom">
        <div class="header-title flex flex-col">
          <p class="header-text bold">Applied Jobs</p>
          <a class="back-button underline underline-offset-4 mini-text" href="/jobs">Back</a>
        </div>
      </div>
      <div class="flex w-100 gap-1 margin-1-bottom relative">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search absolute left-2 top-2.5 h-4 w-4 text-muted-foreground">
          <circle cx="11" cy="11" r="8"></circle>
          <path d="m21 21-4.3-4.3"></path>
        </svg>
        <input type="text" id="search-input" class="job-posting-search-input pr-9 lex h-9 w-full rounded-md border border-input bg-accent pr-8 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 pl-8" placeholder="Search">

      </div>
      <div class="job-table-container">
        <table class="job-table">
          <thead>
            <tr>
              <th class="h-12 pr-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0" data-column="job_status">Status
              </th>
              <th class="h-12 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0" data-column="title">Title
              </th>
            </tr>
          </thead>
          <tbody id="job-table-body">
            <!-- Job rows will be inserted here -->
          </tbody>
        </table>
      </div>
    </div>
  </main>

  <script>
    document.getElementById('search-input').addEventListener('input', function () {
      const query = this.value.toLowerCase();
      const jobTableBody = document.getElementById('job-table-body');
      const jobRows = jobTableBody.querySelectorAll('tr');

      jobRows.forEach(row => {
        const combinedText = row.querySelector('td:nth-child(2)').textContent.toLowerCase() + ' ' + row.querySelector('td:nth-child(3)').textContent.toLowerCase();


        if (companyName.includes(query) || title.includes(query)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    });


    function createCustomSelect(job) {
      const jobId = job.id;
      const userChoice = job.job_status ?
        `<span class = "color-circle ${job.job_status}"></span>` :
        `<span class = "color-circle pending"></span>`;
      const options = [{
          value: 'pending',
          label: 'Pending'
        },
        {
          value: 'responded',
          label: 'Responded'
        },
        {
          value: 'expired',
          label: 'Expired'
        },
        {
          value: 'remove',
          label: 'Remove'
        },
      ];

      return `
        <div class="dropdown" data-job-id="${jobId}">
          <button class="dropdown-button mini-text  h-8 w-8 secondary-text">
            ${userChoice}
          </button>
          <div class="dropdown-content">
            ${options
              .map(
                (option) => `
              <a href="#" class="select-option mini-text ${
                userChoice.toLowerCase() === option.value ? 'selected' : ''
              }" data-value="${option.value}" onclick="updateJobStatus(event, '${jobId}', '${option.value}', this)">
                <span class="color-circle ${option.value}"></span> ${option.label}
              </a>
            `
              )
              .join('')}
          </div>
        </div>
      `;
    }

    function updateJobStatus(event, jobId, status, element) {
      event.preventDefault();
      event.stopPropagation();
      // Update UI
      const dropdown = element.closest('.dropdown');
      const button = dropdown.querySelector('.dropdown-button');
      button.innerHTML = `
        <span class="color-circle ${status}"></span>
        ${
          status.charAt(0).toUpperCase() + status.slice(1)
        } <span class="arrow"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 opacity-50" aria-hidden="true"><path d="M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg></span>
      `;

      // Update job status via fetch
      fetch('/jobs/update-job-status', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            jobId,
            status,
          }),
        })
        .then((response) => {
          if (response.ok) {
            if (status === 'remove') {
              // Remove the job row from the table
              const jobRow = dropdown.closest('tr');
              jobRow.remove();
            }
          } else {
            console.error('Error updating job status');
          }
        })
        .catch((error) => {
          console.error('Error updating job status:', error);
        });
    }

    const appliedJobsData = <%- JSON.stringify(appliedJobs) %>;

    function renderJobPostings(jobPostings) {
      const jobTableBody = document.getElementById('job-table-body');
      jobTableBody.innerHTML = ''; // Clear existing job postings

      if (jobPostings.length === 0) {
        // Render no jobs message and link to jobs page
        const noJobsMessage = document.createElement('tr');
        const noJobsTd = document.createElement('td');
        noJobsTd.colSpan = 4;
        noJobsTd.innerHTML = `
          <div class="no-jobs-message">
            <h2 class="sub-text">You haven't applied to any jobs yet.</h2>
            <a href="/jobs" class="link">Browse Jobs</a>
          </div>
        `;
        noJobsMessage.appendChild(noJobsTd);
        jobTableBody.appendChild(noJobsMessage);
        return;
      }

      jobPostings.forEach((job) => {
        const jobRow = document.createElement('tr');
        jobRow.className = 'transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted';

        // Combined Company Logo, Company Name, and Title cell
        const combinedCell = document.createElement('td');
        combinedCell.className = 'py-3 align-middle [&:has([role=checkbox])]:pr-0';

        const companyLogo = document.createElement('img');
        companyLogo.src = job.company_logo; // Assuming job object has company_logo_url property
        companyLogo.alt = `${job.company_name} logo`;
        companyLogo.onerror = function () {
          this.src = '/img/glyph.png';
        };
        companyLogo.className = 'company-logo inline-block h-6 w-6 m-0 p-0 rounded-md'; // Add appropriate classes for styling

        const companyLink = document.createElement('a');
        companyLink.href = `/jobs/company/${job.company_name}`;
        companyLink.className = 'company-name font-medium';
        companyLink.textContent = job.company_name;

        const companySpan = document.createElement('span');
        companySpan.className = 'flex items-center space-x-2'; // Add appropriate classes for styling
        companySpan.appendChild(companyLogo);
        companySpan.appendChild(companyLink);

        const titleLink = document.createElement('a');
        titleLink.href = `/jobs/${job.id}`;
        titleLink.className = 'font-medium underline underline-offset-4 block';
        titleLink.innerHTML = job.title;

        combinedCell.appendChild(companySpan);
        combinedCell.appendChild(titleLink);

        // Status cell
        const statusCell = document.createElement('td');
        statusCell.className = '';
        statusCell.innerHTML = createCustomSelect(job);

        jobRow.appendChild(statusCell);
        jobRow.appendChild(combinedCell);

        jobTableBody.appendChild(jobRow);
      });
    }

    document.addEventListener('DOMContentLoaded', function () {
      renderJobPostings(appliedJobsData);
    });

    let currentSortColumn = null;
    let currentSortDirection = 'asc';

    document.querySelectorAll('th[data-column]').forEach(th => {
      th.addEventListener('click', function () {
        const column = this.getAttribute('data-column');
        sortTable(column);
      });
    });

    function sortTable(column) {
      if (currentSortColumn === column) {
        // Toggle sort direction
        currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
      } else {
        // New column, set sort direction to ascending
        currentSortColumn = column;
        currentSortDirection = 'asc';
      }

      // Get the current data (filtered data if search is active)
      const query = document.getElementById('search-input').value.toLowerCase();
      let jobsToRender = appliedJobsData;

      if (query) {
        jobsToRender = appliedJobsData.filter(job =>
          job.company_name.toLowerCase().includes(query) ||
          job.title.toLowerCase().includes(query)
        );
      }

      // Sort the data
      jobsToRender.sort((a, b) => {
        let valA = a[column] || '';
        let valB = b[column] || '';

        // For status, default to 'pending' if undefined
        if (column === 'job_status') {
          valA = valA || 'pending';
          valB = valB || 'pending';
        }

        // Compare strings case-insensitively
        valA = valA.toString().toLowerCase();
        valB = valB.toString().toLowerCase();

        if (valA < valB) {
          return currentSortDirection === 'asc' ? -1 : 1;
        }
        if (valA > valB) {
          return currentSortDirection === 'asc' ? 1 : -1;
        }
        return 0;
      });

      // Re-render the table
      renderJobPostings(jobsToRender);
    }
  </script>
</body>

</html>