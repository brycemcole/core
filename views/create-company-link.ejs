<!DOCTYPE html>
<html>

<head>
  <title>CORE - Create Job Post</title>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="shortcut icon" href="/img/core.png" />
  <link rel="stylesheet" href="/css/navbar.css" />
  <link rel="stylesheet" href="/css/create-post.css" />
  <link rel="stylesheet" href="/css/create-company-link.css" />
  <link rel="stylesheet" href="/css/create-job.css" />

  <link rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>

<body>
  <%- include('partials/navbar', { pagePath: 'jobs' }) %>
  <main>
    <div class="page-header">
      <h5 id="post-header-title">Import Company Board</h5>
      <div class="toggle-container">
        <span class="toggle-label">URL</span>
        <label class="toggle-switch">
          <input type="checkbox" id="form-toggle">
          <span class="slider"></span>
        </label>
        <span class="toggle-label">Manual</span>
      </div>
    </div>
    <div class="output-container">
      <div class="error-messages" id="output-alert">
        <div class="error-message-glyph">
          <span class="material-symbols-outlined">
            warning
          </span>
        </div>
        <div class="error-message-text">
          <p class="sub-text" id="output-text">
          </p>
        </div>
      </div>
    </div>
    <div class="main-container">
      <form id="jobPostForm">
        <div class="form-group">
          <input type="text" class="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50" id="job-link" name="link" />
        </div>
        <button class="inline-flex items-center justify-center whitespace-nowrap w-full font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-8 rounded-md px-3 text-xs ml-auto gap-1.5" type="submit">Extract Job Details</button>
      </form>
      <div id="jobLinksContainer"></div>
      <form id="selectedJobsForm" style="display: none;">
        <button class="submit-button" type="submit">Submit Selected Jobs</button>
      </form>
    </div>
  </main>
  <script>
    $(document).ready(function () {
      const toggle = $('#form-toggle');
      const jobPostForm = $('#jobPostForm');
      const editJobPostForm = $('#editJobPostForm');
      const errorMessages = $('#output-alert');
      errorMessages.hide();

      toggle.change(function () {
        if (this.checked) {
          jobPostForm.hide();
          editJobPostForm.show();
        } else {
          jobPostForm.show();
          editJobPostForm.hide();
        }
      });

      // Form submission handling for extracting job details
      $('#jobPostForm').on('submit', function (e) {
        e.preventDefault();
        var jobLink = $('#job-link').val();

        fetch('/api/company-link', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              link: jobLink
            }),
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            showBannerNotification('Job links extracted successfully!');
            displayJobLinks(data.jobLinks.links);
          })
          .catch(error => {
            errorMessages.show();
            const outputText = $('#output-text');
            outputText.text('error: ' + error.message);
            showBannerNotification('An error occurred while extracting job details.');
            console.error(error);
          });
      });

      // Handle submission of selected jobs
      $('#selectedJobsForm').on('submit', function (e) {
        e.preventDefault();
        const selectedJobs = $('input[name="selectedJobs[]"]:checked').get();

        if (selectedJobs.length === 0) {
          showBannerNotification('Please select at least one job to submit.');
          return;
        }

        processSelectedJobs(selectedJobs);
      });

      async function processSelectedJobs(selectedJobs) {
        for (const job of selectedJobs) {
          const jobLink = job.value;
          const jobElement = $(job).closest('li');

          updateJobStatus(jobElement, 'loading');

          try {
            console.log('jobLink', jobLink);

            // Add a random delay between 1 and 3 seconds
            await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

            const result = await extractJobDetails(jobLink);
            if (result.error) {
              throw new Error('Failed to extract job details');
            } else {
              showBannerNotification('Job details extracted successfully!');
            }

            console.log('result', result);

            // Add another random delay between 1 and 3 seconds
            await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

            const jobID = await createJobPosting(result);

            if (jobID.error) {
              throw new Error('Failed to create job posting');
            } else {
              showBannerNotification('Job posting created successfully!');
              updateJobStatus(jobElement, 'complete');
            }
          } catch (error) {
            console.error('Error processing job:', error);
            updateJobStatus(jobElement, 'error');
          }
        }
      }

      async function createJobPosting(jobDetails) {
        // edit jobDetails.url to be jobDetails.link or it breaks
        jobDetails.link = jobDetails.url;
        console.log(jobDetails);

        const response = await fetch('/api/job-postings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(jobDetails),
        });

        if (response.error) {
          throw new Error('Failed to create job posting');
        }

        return response.json();
      }

      async function extractJobDetails(jobLink) {
        const response = await fetch('/api/extract-job-details', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            link: jobLink
          }),
        });

        if (response.error) {
          throw new Error('Failed to extract job details');
        }

        console.log(response);
        return response.json();
      }

      function updateJobStatus(jobElement, status) {
        jobElement.removeClass('job-loading job-complete job-error');
        jobElement.addClass('job-' + status);
      }

      function displayJobLinks(links) {
        const container = $('#jobLinksContainer');
        container.empty();

        if (links.length === 0) {
          container.append('<p>No job links found.</p>');
          return;
        }

        links.sort((a, b) => {
          if (a.new && !b.new) return -1;
          if (!a.new && b.new) return 1;
          return 0;
        });

        const ul = $('<ul></ul>');
        links.forEach(function (link, index) {
          if (link.link === undefined) {
            if (link.url !== undefined) {
              link.link = link.url;
            } else if (link.externalPath !== undefined) {
              link.link = link.externalPath;
            }
          }
          const li = $('<li class="job-link"></li>');
          const checkbox = $('<input>').attr({
            type: 'checkbox',
            id: 'job-' + index,
            name: 'selectedJobs[]',
            value: link.link,
            checked: true
          });
          const label = $('<label>').attr('for', 'job-' + index);
          const title = $('<span></span>').text(link.title);
          const linkText = link.link ? link.link : link.url;
          const url = $('<a></a>')
            .attr('href', link.link)
            .attr('target', '_blank')
            .text(linkText.replace(/^(?:https?:\/\/)?(?:www\.)?([^\/]+).*$/, '$1'));
          url.addClass('job-url link sub-text');

          if (link.new && link.techJob && link.techJob === true) {
            title.addClass('new-job');
            title.append(' (New)');
          }

          label.append(checkbox);
          if (link.techJob && link.techJob === true && link.new) {
            checkbox.prop('checked', true);
          }
          label.append(title);
          label.append('<br>');
          label.append(url);

          li.append(label);
          ul.append(li);
        });

        container.append('<h3>Extracted Job Links:</h3>');
        container.append(ul);

        $('#selectedJobsForm').show();
      }
    });
  </script>
</body>

</html>